%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: /Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Quad-001/.texpadtmp/Quad-001-Lsg.dvi
%%CreationDate: Sat Sep 10 19:13:12 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFSL1095 SFRM1095 MSBM10 CMR10 CMSY10 CMMI10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -o
%+ /Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Quad-001/.texpadtmp/Quad-001-Lsg.ps
%+ /Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Quad-001/.texpadtmp/Quad-001-Lsg.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.09.10:1913
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC894DC4B22D9D5E0B9DF531CD017A0B6E33A4440209B44B202CA7954B
F5261F3C042EA10E42A97DCD7D7849D616C02C311A8646C63ABD4109BC608D1F
05853A62DB1F38BDCA43DA2B608D94CEF4FE3CC17E90079E5EEE3714A7386D0F
DBB265F956D8F0BCCE5359CD04598828FEFF80472D999D1FFD9B1B1FFA15E67F
B06C44B5F97CE86BAC4EE67BF9277F7DB372B8778E788A2EF328D87EF141D756
FA0EAF04B743D6AD93AFA9D2A55E33C4DC1E1D873AAE448511FA99F424C17FAD
9F2BDD769B109DDDE02E9233092759CF0746C4B1324794477304DAC335EBDE5C
E243CE68FC5FE66CC9BC777565A3AB054F7E23BE19D58418E204BFF9A3476C1C
014725FE6E153BA19E78E4FB7901C816E35AAFF6AA5722C80D74023CD7D4E8D1
4870E674F9AF40CF42D3C3E465CB0F2916B93CF5CDED5354AE59855DCF9AD291
293EF5406104
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 21 /greaterequal put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B1491
307A6D9A2F2BA5099C8A07762E70BDAA74BA5E2BAB260C1352107EB8A96523D9
4BA3082B99772D585329AB8645C3BBD11D72BA01F95CCF11C6DEBFDAAF7F5C4D
795F99DAE6A8D59462D759001BBEBB59AB0C322EFE02904D82B424649C2FA593
0E23281DECC5AA908E54244566055D418602EEDBE78843300158908F77C0AC75
9562065826D34C38C598D8626BFED7CB672F132E065E2C27932F709935988376
94901EBAEAEC410E2B36575A71EBB8954C3A90EEC264E6115950FC91D0D54999
323D8B4FF8129A8EEC3900A00CCB026E6943BE1728BCD3F6C1BFD503D55A6A7A
6376AF4D646B2F31B1AF935446DCC68233C72AC164BB393DA250B0B423D32887
C680509C862B6F49EAEC995036CF797BC11DD87159241A7503B1FC87023766D2
E1CA46A71DA0AC4784A97D5A8F1249B04B949EA49CE82498C9CF0E72AB1B6A29
CD235A99A72019D29CB8C5CE21AAD45E0DDB18E2BAA3766D9E544286BF1E4AF8
9319F6B060A9785E543F75CA0E47693F237C7C4B4AF0A43B2CBBE2C0E8EF1A52
E7E50AE889687EEB596903A3DAC04B864403D2697FBD5C29456848D130462572
8CD2375C1469BE1B6F645FFC5BADA6EBD0C60476548EFA1F990256FC4DA3172D
3AE371D10D7D35623F47CDA1BA82CDD43A3DD9C633B67ACBB2D999D4FACCB3FC
0DBEF52F3E029A2FC362124C89839B7F68DB01F1A8A77CDC623AFB94BFB220EF
200D16B15CD6AFCAE10BE37C09D10672423CA92BD219425C385B2C34CB6A43AE
8E15431A61AD9B26CDB1607E2F1474F1111402157DCD07652B9575537490D571
241ED221B0308D32CB826C96D98F18B04B0E858822C690428C1CE0AE080C1EF3
103D03BE5EC983713A0E9D614B99235B56236B2265F646777239ECF34A6493BD
BB3982A6DE6E27AA188EE6ED3C77B12360EC76DEEFC9F8610A430D846C3C35CB
35C276C27119F58AD28E527269F80D6ECF3ED5BE9E2517123C5C0F1581DA12A7
4955EB2D655B504007DCAD92B526A9DA435A53EA03A0560D566BCD53601B9848
EF3F373A18A001810E426D817D4A6E2AD02A0C9AB2977DACA1CC799A01F2EEBE
761B3FF86EF91DBE5E4224E8BA94B4104E4C6A6B0CFA55B782737F73FC6D4434
99FF7DD5758CE81D61FA3A5B03264A07A087C1CECD89A6695C7BD0974D25230B
983C5F907845CAAA2BBB28C2204326CF45FF4C5002EB4E12BB7BB18A3E3BA299
C3C62CAAB5BBF5433A98E38928D24BAFECDB4B3C34EC1273BCE3EDD9B12513D6
27E9467145D6F42EB30CAA27D2E6DECD1ED7FB6CB2AD5BDFE0CD53945FD3ADC0
C170FBA19A080E9DAB102DEBA9B9D71786A58B76CB44991BD11E49158D22B47D
D91D3E10260BE1A57AAEE72734742BC2F1A0062192D1C9F80540875E658C0F63
919D6BEDCDF23EA2F4C60D8C4675CD614AEADDD53C8D4384C25955397A146ED9
3294FD299089D1F835DA136EA44624457BB719B05853336C6BCD57EBF0B88410
7ECD28A06B59E804582D21C544
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E70EB3FFE65984ABE6A86792FF4DE619473EC5AF48825E4C87DAF38161758DE4
F5E65365F1997CDC6886A867EB8D4454AA899ECE4676D88F5D394EC66E7E3F29
A38E96B19394F4C9D7F9F6934B3D8EFC23400860FE5D283A981437DA886CCC00
07BD95BBF88379F413BE60C6CA25AE8C2655776177A1F2676225A2291CCC34B4
0D792399EF95781283E70978F788A80AC3CB19AB4DFFF39AE4D2918F2F1BA6CC
E58C533CE73BE753625DD6DDD8816291EE7725531B5FC98C4431CEF86BD83C5C
530FF9E9E77B6982EB4AF5EB38CBA85B58C47B56EF8238FE3F5C88DD7CC296A1
1ADF59C4919F63C78F9B7C2FA998F5BEFF8DFA754C9789DCD73BC1DF740F437D
F5F1B361E2AE938B0C66B3794C043AB6EB1898B8C9507A855F9181906D38260D
23CBFBC986268FE1EDA208C1B92F4183F72438CCC1953B78E7D9D431A1B5A04A
73AF4A83C3AA0D0486B75FE82E88EAA03F65077776C747047E341707F28C5A80
F4BD3C2C515EB5BE01853F7F1EA8A7D9E9700516FD02309FC1FFB29C800A6749
417B4A4E35527FB8826F7F17E5F5D5C98C960B3F7873A164E8CE2C7DD495DAED
FC651D4A939CCBFF875032E159EA05C7F81248FDE0B428EB05FDD26BEEDF3943
D11F3A1A67DB7096EFB1F419D84A061BF099B8FA36670B17429367406B8CE651
196D0884211D48DFB521FD1532611BB620B435C1F8C806B6F2B26C65BEB92B97
EE5D01D445F8F69CA4B90D34988C1C1AE72CE581E82E69F6F88D4AE8A2F23BD0
6ECB8B0516A6F95F40966FC9788DCC638666E9458B2AA416677F8CA940DA3730
F94BF1C19D991D38296EAC8C58EA7574589A270F546E687B7078C34A4BF0DE6B
D73B178FB7B6730723D08EC4A9FAD95E18348CBAE0BFE66D8989C71D637E495E
DE412CAFE783725BADA81814332B622EB400B8F7CD6F57BB4D643B1ACD6F9694
59077D52CF2E1DF3882BE157C93CE9845C26B771F0F6ABE7D5C1ACAFFD41A9EE
209936B3C86381897896D2B93B9D96F2E332501EB4290039F576362BC511A48E
E7060705E92B98495E16F6D74D78150FA93FFD81AD5B6E3A2D629461953F5B05
88BD29B9D894B235C0F1980FA1753B91AFD1C84ECC15601E72FD549E4EB00888
F874578942C226789972824839754EC46A7304FAF73A030B136C40960C5905E9
6870B05CA0CFC94ACBEB604E917D2BA3E5D66350AC0FC370E3887C3283337CEA
DE9B04FF5BC47E71D0A4FDC44FA2C19D04EF925650F426919BD5359D881F7AFC
CFDE062AAFAA64980D9C0D634C653663ECD53A218EC52E8674DD5793EF07F2B5
9FDAB300219A45A3829844CAABB7A9FAE96CADF9608CA5390623B89F9DC2FFAD
40D87D9309D95970D7EA893E08F4EAD7CE4060684BF01E1BE2510B40B3451788
CF37E63F6884B4C0BDCED70161F0724055E73150DB174027DE1A1FF4B454663B
E4A9E0D294C6BA57101C2E8514DC17BBD706F11F598045807551EBF08E3F924C
F7BB2D9E32F0BA0E4EFAFF0FBEE7423D459EE0525EA6366ED47FE45CF292B917
2BA99D2A232129396645F8F800E0A946E507450D4132B82867DFF0717BE50DB8
A404FAF7FC83BAE843BA3E8CD02AEA0557F0F7F845FB4DDF4067330BA2831E65
3A70ECB9FBD23A4472B5013FA67495968FCB1C0AC1B0EB74D2FF596590E11B7F
6BFD847E494B27D138E4C1028408228D722728A3DA4BB321C726726BD072DBB2
4EE63E562B4E5B459AB1597A0F7FBF6E4FB435DEB6815C943DECDC32FF8B3051
7809AFE63552B63973828BFF04E5CC7173AFF1DAC6EBB51E85FB99763DF95FE8
1835CCBF26A2EF8DDC99845800F991E80977A73E18801FACB5598EE558ADC9C8
6D2EE7F1C55BA9A5801E6F7D21E1A947ADAF04363A94D75597A90D5978F0C498
8305A832F2B879E6897492F7B576A6EBD753678683918831B457343B595B94CB
38D411CB562B0DFF455EF6A881FCEB08A83D87C837B259ADE53E7CC11A9BD6F7
C3D41EEBE055810CACB682DA48A4F3B61043DFEB7FBFFCEF16292F9ACA074611
7F7A46FA31924C8D171E5678915BD9DB4572F10A5263769035B1B771817194AF
2A77FFF5F3289C6295E2B1B1EDCDB3245C8B65857667A8F5C3B884C6C51E563A
1217E747A4020E2901C7B9DEA177FB1DFC4031214DFBBAE2676CB792DAED5C88
777F040DE44E6E1A962650E6FA5762C05DB0F78902A2D2DD059F107EC3E0E1E6
5BEEC9B76F67436903AEA820BAA21853C33849B706F1E844A2ECE1B953960908
4310001F2D56DD2124E1BEE0C1F913CAB9E674CE76A02135D86210990EE24EAF
DCBD8409836F32EF8C8400491EC719DAB321789F2AD6F8B90F112975884041A4
A125CBB8410BD31116781186395015669738BD3B2459B24FE79CA4E85AA6534C
84EFAFA80FA9BD717268B1516C062C20E8FE6C223F6E46106537A7E869335783
272984958D9896EC04FBDF6FE2538ECB00D4DF6F45A0B66A77CA30959E91AC37
D5B2CD07158EE6D3381A60C9EA0DA0E606A49A7A252DE76547D055156730BE83
4E1E0DCE98DC113EE5D3A6C81EA9A2893176D4E97F4CE2CC8B627445E40F728A
0B7E5CDE90F02194A11E9E9DFA2E80B58F5CC2323C80D32E40C65EE39C69BD9E
7DC58A1240148DDF1847191FDA199A6EEF03A7A8ADD9DA614E0D18B18ED021BA
1AC51C1ACD652F2C6D5D2E0A9D8A6484A1D9770E3645963BD4F2199AA8C2C584
D824178665DC0973D03DC87CD15FDD92E9AD59D1F01F7F0EFD05DAC54924C24F
81FBF18587A162B804D263D53C4D23A1BDC50F2DC6763E7818449DABEBDBF998
6EEAFDCA4D9980CD1F9014EAA2AD3E46E07FD07D2FE57A5732AABF4D6EA891CE
9119C9989ACDA43CCD7978E67CEBF348718751DC8AAFC1D3A747BC5DA7C855CB
A9E20F68518134EC89EBBD60BEDE5B9CAF2B7AA307E179860B004FB796C3F51E
B3EEA329E2EB496B47EF0262397AFE4D90B23837DD77CF9FA93B3F901415D82D
A13F5F292D2285C25F59AE9EC0A1D52AD67A741BD5C69282459F7565AABBB648
91CEDB14DFBB43FCC75039168331A8968505BED476A540E30BFEEF9342BA9BFB
F253869660877FFD00B28C51FF34D8423B43FC73160422AA9195415124E596D7
00C3688E1AAC3AC3F6EAACD730BD31DD228ECA47A5079BB62F48A6D2055CBC0E
96F5B7C56C4F1A797531B3D0DD90DB4C8BFFF227973B51095613AD7849F6DC2D
8FF68BCBBD20304EF6341E6EB13BEF1C1E6B44A0774027EDF2DA009BF67E31AB
C21BBB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 82 /R put
dup 87 /W put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA855
15895421CD4FB9817B90833D98C453B3E6E24D9CEB5516F3FF8AFD668F97C05F
88DAD038B253EACACE1A07F28D9C9B715F6CB08AF08E8E864A86D9080B02674E
74A0D7FD748BB73455E1C8FA09719D9D0D2118E6D57B858468F85E3481CCE647
E32EC20FB8B64A1EB617C74206D409E20DA98C5F0F27073E8FFA55CD5DC77EBA
72A29F06E5D4722EFD97598A192BAE87851451CC1376827947997450D33CABCB
57814D9202516CD5BC7337FD1E8295CEDE7D7E5AB476071E9025B32503567E11
DAADB881D10B720417BE8B90F3C6383F81F21B7CBC50188CEE6D35EB8A2F03B2
D870B49873E663C1F8F00C75FF574283FA395B728B59F435246693F48BD05285
ACB1C60E8526E90DBC88F90956A1587DD0A842FF6BCEC22ED9C4750EA410EE9E
2D9A3949BD7881C7EE13F3B897D9444B48BB8BF7D1184913B8DA291AD349DB75
B318620F2971C9C20AD06F12F9637956B4177BDC30C8244DB566C473E477DCFE
9DF7CC9CB5B83948274EF9882275616C14FB9D2BEEB732A64B33BF3166D0FF96
87B3B3DCB4F177420E7600CF036655CAADA4C1B8C35DFA6551E0EE980609F610
0781608ECF41CE0D958460361573652704F80F5EFE7D2ADE079F8E9E0C12181D
67EF4CAAA44BE4DC49B0A559229F3B7345CBB610CA8A0A377E96BBBA4784F4E1
1F0BE44E40DA2AC030F131B11636F0970007B5AE7F6EB2AC696C667968F08298
6E7DA9BEA2B96754C60D52F6FF4994A79E56212D40A4C8A40D25FB099426A9AF
3943E640A38386A6C7B06E344808CF78570040DB42C2C309DE6EA904361496E7
61B015D77D34429519EACABA362F9B46AF4510E89CAA12A5F65B39F0776D4277
FE1494038AB2DB176250A4F686C7258DBCA23400E2D76EAAA5D4EF89EC3806C9
38FD8F4D39557F934E9A0E33574960414319A0F408498D780BE0F7ADD83AF233
49F7D69D84DD8D1B6B04162369517AD3A1941510EA2FADA1F43B5084CBC1C185
AB8A03FF691D9DF6438B2724AF4AC7E78A6E1F0C9D7874E93394300912083BDA
4CD6A3F53402F28DFFADD463BF179454AA3FD4AD640A0BE2F7333E78B70EBCD0
32968E3279B3DBE75669BB98A826D815508FE21F9FF1A05D4B7C515D63E15200
1B786A0575A747F56F7F90E31E4B94DF3B2874444602F7DEE57A596BB0E76062
CC13802990DAE1B449697951529B333385CD3B79AECEC0E66D3813F3ED75B9BC
87240FAF3BD6B27BDE949B00CF73C28050FBDF438E6D427DA9C3226603DBD463
30774DFD3EDE8B9CA795CE4B332EEC60AE440D028746872202AC84F5D016C6B9
A1D2576C20DF4DAD8CAD88BDF5AB753BFA1F2390F1D70ECE0D6F23197815BBA9
AC786EB3BE485E22C0DA81EE045F15B80F0BD349DAC214C8AF8314829DA5F5A3
90A62BCD06520F9F4B2693C4CDD75995
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899946CB41BE4871659C70A3042A36543F
67CF9A1EC0A0AAC8EAD72FE4D091C30CDD5FD96880ECE94E05803F338F54E98E
78967E51DD10E2B4D7714DEA33B756FBB270CD8F7D84DBC86356F052C4D010C3
91B5103816CD777C55A2FB9114C6AF4F0B9BED05139CBD2438F5FB004EAD6ED1
B1D70B2D38F4475ADBDB2D13A7F87C70F67602E3934BB8DA51B8108E59D57991
94846542E2C5DFCA889F03C4121DDD79982864BDCA48C069C9F0AAAC35965E06
A372CC7943AAC99F499AA3A239E6831DE034D2F4BEC784F4132DEAEA390D2DE1
C39A2F11B6493FE38E00745ED92A4AE54C9CBC34921FD978D547A31F9C9682AE
B720D5FAAB07863F8454DB75AA474C42A7733E97EE2065A7C30E8B29D87BF206
717E2741A0D8264EAA38C4AC19482CA68151B2A144319FBA90445916838F7DAF
61234820FED5BDB2F071EB68776066D09462F13F637E245B375FA2DC860CFDF0
670BD558C50D3018716A23FFBF28963C9EBC60C66CC4FD5FC0265A8EFC404EBB
E29E4203D0C3EBBC3CE615DB101B5E2CE6D3AAF26988F4EC209300F08FE3D985
3D4AA01ACEB9CCF1F4718C98A3B2DA975E68EB2FD1CA8CD756A08E72DD91BF0B
7A5C0146D89EAB0D0C21D715F756BB7E857281B067CDBCE3F58A797EAEEF5D02
3BB95949EE39E783623BA9B5A86FC8710B63EC10EDB51517D0F1774DBBF01924
BC2D7187CD112D3ACD59D09872EEB93D55BEFC12CD9599CAADB7014315B6CAD1
8FBAFE89C1299D94203BB940C69B8DDA0059097ED2E47A9725EED1BDE614D343
A16ECCCDAD1A4021E7D026A20145713A3BFF2BAE001B07895F0A72098325E268
681BF3334AEC2207446881B5CC9C9AA31999801726CB5F05EC5DD18199707147
8B005067CB41F763FC088FFB9C67EB5FE8F7F506F893BBDA2156C7CFE75BE53F
9CCF0B117FF30D3130282E1A689BEF2A7BB645F8E223D8B46EE9C2078429A4AA
0CCFD6FEAF0A323F4ADE930917303B7BC34AE270049D0ADFE3ACA814BFEDBC04
23C0C477112C38AC5788F6DA0335B5D81A35BF5A9A5115F7BFDC1FB9078F0587
91F536EA72D7560AD5C70E8F17C5128A779AABF374DA038B9475967738107F4D
C9BC75FDA79BA985B300F9644FF0FA6B6901A2A1F9E59107C89241ABD353D1BE
1FA5202AC0316645AA6E70AA8BBF8648AB63CF7DF47C88CED0B0C878AA3825AA
746C04903146B82468590927EB60E7C1EB7763E21679120CC4D205080D045160
343EFDCD4130A40933493554FE072C120D3B8A3A3B6C6AE0D98D5818DB53718C
621751A782DA56A87807F6FB3DD6BD73BE4FB5562627A5EF9666EA51F997FF34
79D7E68C5434949A65C85516820E7A851EB48BEBCF33EE9EB89EE6B550F865A4
A4ED66BFCBCB7B0B261D7EC35ABD70AD4774BF9C81B143BD48BB39511A446EB3
BC79C2D49160CB448A6781467F4FECAF2C88FFC87C846E94E39170F668B9B8CD
11E378940B7355E8025C6ECF7B197FEC95C03A85892810D52DAAAF1C37534E5C
748A8E03FB7615A3D0A614D3CBFD63287BB5113B289E81B36EE84548288CE22E
50C09144C5109FF036FF5F3BA80590C0731C2404C78744582EEBEFB530539E02
185E4F682C97E016C26EFEF30FC4012EC2561BFB2C146D133AB703CBEC1DA09C
5FFF0B69D2E8BA2A1A21403F315A3D2A0549DA1A31FDC7D428F23DA60AFD96EC
A5ECE4678FDB35670D6B8468EEC776A5D93BBB7224EC8B8568CC3E0DCEF5F96C
90C57B48C91C1B998EC30773B2F0ABF4C6D22C48F008A13B1110520AE35D7D09
986ED98393191A1534BBCDF9D228ADBBE74628D7AB71B042010723C5D05CBD98
E5C545E92F8E77B50E890E41CD0FA17906BDB310233895B9C855EE6DF8A23BFF
58788E63CEA65322A74B24BB9E7FF08F9ACF59390F2066AA14C4BF064AFC211E
202ACABE394A95196DA404F809808D9043A1D7989CE7823D3D2E00C5D90808D7
7A121DDEBC91AFF565E53B8527373B7E5F8281A2CC37EAF5F5634D9A9803CD4E
F58D2F04263EB863D5ECA068E7D0A3B2B9D9112FA4E69106EC551C1425422F9F
6D6220450BBA3167FD6DB06A34EA46087696052207B9A6F340C58D8018AC1810
25AF9377005A6B6FCFB58A147646AD45F956AD78B6395B87FE55D67D57AD926D
E198853E338CA388A3A98B4A590221B7B421583544B2968689FE04A78F8AFACE
98FFCAD79633F0154B65A326021FA4EB30FBD046CA69714EE28B903B37503D8B
32931366E3F026AA8173C4C3956CDD4BB412DA316400AC3CDD32B906E1699CEA
86AC2CA7624AD50EF95B1446F4D4B0AB67EAD961A130CE573EBB1028C67323B5
5F840A1E7673EA58F190043810AA04931410F4EDF9F08A80A7F1C5C5F00A33F1
298F5DB434B7EC51128087D8117A41550C687ED3DD0DFA5548C0891B14D994E5
1E2B0A460E286718CBB79BB9DCDD81D8BA1C9CFD1E630BD121BDE69FECBA2DFB
DA4F9F9E466F0258ADBA095A1C3BAF25E1DCCCAF0BCF8594E66ED37EB6FB4E5E
6E11F7F611DFEA314873A996C79E23B208068E481A6F00160FC392915F3B9840
23BA4E204D1EFA6FC57DEF4EF0A4DF772BCDC438FD296A0F3EE62D81EF5C61B1
A85CDDDA0862D1128B131AD66BB7725C549750810CFADB7085A620C5B5944338
8EDB91F8A569CFE3C2113B8B390968AAE3E6E67D911D534980632ABAF5664316
AA4465646F162FEAA8A167E3A5C9F842B17838C3524813CA1D5A2578BAA3A232
71148BE4D5B2C86A8FA9ECE136F9A3D1DC2D2E96E1CACAE3C922AA636F3E477B
7C2C9DA70B8D47EF7A5512D6EC95088A5E89C239B5DE093E154C1CDA2C40EF94
4093DDFE8DFC4CD4A51489858C38C9C133712B36C8F9BE26647B02D7A33DF8AC
C3DF5B1B27011CC6FDFE256D90E11AEB19C10A62A78D5237009C7C55C4A8621B
964362479582D860F7FF82EC5AC456FE8A99CC319EBEB94BF1634E724F4E2277
D88CC2F21D287808B8279A16E5786CF498EB271C57922F0BCA2EFFA90CF8ECD2
25A46DA5ED77A1594BD042C2900802227521D6809CF94AFA2A534FF7D4AF307A
55F374F8D1DA9D11F02FC31F5B0ECEF799D966D67132DB5C681FB0BE4830EBCD
C6C43CD2ED327CA534E449062F1C756B5A1AEBB7D061F60B96B3F3222DF9B89E
402F3F7003194B40A5F0E38B4A1577C74638AC1C0D9988390ACDFBC3EC2E69E9
5C1F79EAFB9564F9DD4730AB093918063F3FF5B3087E7D3F2E8A2DABC60998CF
4EE4E6D523504300C5185C84DC2E6F4519765731C5E8F3B1FDE84627F3FFBFCC
F21DFD50FDE84457B33AA6E13AD349757E5120468F2BFD346992888B1B621B78
6A223D6076250AE872FB1C4532BD1A51EF7C80370B071B71E6587FEF9FC0E65E
B2FADB7A25F042D94FF86182CD7033B5EA8978F58EA8D5269FE3AB371CA5668E
1E5AC382DC237A9613E3A804614DA48B1D8E40D824DD8B76A5157FF6236124BF
8C6FB3A0A0861E90E532295D16DFBB23CA066C96595748B648FD0B60D2347BD6
BDAA8BAC3FF70DFD0B03969BA2F49CAD1FD07BC298122A721D2990B46A1A1CAF
B8E0126FB44F1EBDAB137F6CFA4460BED7F8E1A571EB3D39C8E6D4013BBADB67
19AE00BFB9D1ECB790793CA11B2A7AE3AED8CA2564BF47C2348B46BB54774300
4F4AD1B4B90F57B5D41F602E326862856FDD93E745D318F859EF0FA13C6DA74A
ECF52E4C229B1F6BB4BBD8190E80B9F4EB3140E0E0BC4DFCD1744770BEF93A2D
5F26B32DEDFF350FFEEBE5A5D14EA45A0F370C82E423A21C22227ED686E0630E
B46A597A50EA587B3455B2A24C44DBFB6990D24CA83CCD860F483D2CCA152B1F
5657B51B636BE53938736CF32569B61A396F8091FB9D94210F34C1056BF638CD
2334763F84D475CE012EFD4F0BF896E4F0B2DA012760AAAEC5DC1577259653C1
98D56FAF3F556DB2D3EC30C2E710CA128E8B9C0056F876606751608B0488C1F8
B3B06D23D056FBD8687DC93083763D0264E4B8239348AA45EA11768EE7A47296
83E7EC67813773757B31CA9C0FE906B8C1024D6F0F00EF33148761B15D6CFD43
052DC67236E08C79A01AE9324C7A1B5C7DC8375A1D2E8D121D983AFCBF2ADEB3
F442D709FC6047E741415BDD8164F05EFD4539948FAEB4AFA2DE78EB75F4E217
C332FF50EC7718F85A9320385AA91C89710D3A8CF93BBE4E16D4177B39561E62
2655D8D3B063CC1D242A501B1BBDC0CE8BCCE62C372BEAC1BD60473DDF23ABE3
D4D6EF816AFA4869D539242C2CC6BFCB52F1C6042D339A5FFB4F3E2628853277
D75A0C2876725CA929E9427C185ABE396DA98E012EBB7F07C4F7EB2625AF6F4F
CC082042206197D5794AB9FAD56DC4900F9BB00471778488CD1BE8D856656281
EB2D210E07D859A2C3C8FD5D1DB151C504570286AF49CEA8D40E399CF9499590
7AA2D58B28357BD393D7BA0189719FA8780324620366F20C142FB46096A7B43C
CC37D57268BA442599481C6F29F802D6CA21CF3A91F1D36CF69966541EEF9C2D
63AB04558C40C14681BAD1A09E7DC8D49C6355B9CDA3F3A115780B4AE0732532
570C57ED6A693D547C54662D567DD47C7AA5A37C53AFA0FA794945B39D271905
145EF3E344A7A20CB27D67C5807A43CDB65F8C6348AE5E701A0CF7D2AC62176A
787E982213B2DBA9747509626BB2CB6357BC15E80ADB5493BFA396271E461C54
32AAC54FB97DD9B19A7ADD12100D90F33ADFA14C1CDE8FF545B3222E8422ED43
19ED7FB243632644C57826F6783F2BE334137EED89EB1F2C96468E4E39483B3C
2565649B536EB483322C842527FB21B3E23BAE1E96309B361483AB91E1376AEC
28F7A626F8A2147CC346FB7396CC981F6831341EAD3F021010D469326D679C99
B66239C0727D31A4727047C1F43D68281086B9DDB21D604056A76DC614E5AB46
6B3679D0A6ACA5A13D4D305E07DF33C809B6CF440C1333BBF6F62FDAF6604CFB
C105ADFC87D272EA3FEF39B8BA4FC9FE8BDC853F8C09273B4BFD002A4BC3209B
D5929FCAC7470D0BCEB436743766E385AFF589587B94FDEE540D675C45CD1CA9
CDF605AA6D9F56CBD6D1C649691C3E5A6DD38918C2AD833EC1C574E79475F889
B9CE9F3DD74EE6F50EAF0F329905DA0E15E6784B11D002045D5F93D1A9C9B08D
902ACD8AEA299E260D9D6CC3E92854A3C48745D928477EA187E3865E639AF21C
B3E47DCB4E86700C9CF0DB75B3A2E899F4F3EE7A00160C3B0BD1E7233027D144
00283CDC01B08B5CAAA7AEAA4C134372EDA3E944D225F364D6DD41E54967EA1E
6B9DC0E8AD3C4EE0034370E02A92F00A68A98796CCC53DEE5AF9E6B42FB8BC77
97D767663161D2860261A461D855F28F9D95B945C5836106CA1E819ABF8ECE44
96706AB51991A5E9488531D696EE428BA2B2961B6585C3BC8751B9BE47440634
83353D8103A221E156A5F076A67920DBB6D34FB20C9FE8EA91D497B2A49D7B91
337EC1E04E496076E76618BE8A70B0B58FA824C121D1270FB918B8C3B913722B
2F6C2CC8F4D874E3B29F14C5EC15B34A05EC13D278FF6F42FF6F889040027AA9
F5B6A729F016D7F6665716286D0A16C7C707660D60FE46E21D074244706FF70C
8F0D99D0A7D13EC5070DBB27982917DF5D0EABDF01663308AB0879BCBA40DAA7
7DA169262631F6D3AD49EDEDE759B3D3D31D36F1570E458714F0FDF8765922E6
74978092152D2D1A294F807CF29FAF81BF616852BF40CE8672A37BD8F58B4A2B
64CDE5BCD9D1C5B080C962D5D7BE9C80F94B6552F418EAD563D53FA4041B0B98
02EBD648B95EBC3327FD9DAEFFB951427C74F4E217C332FF50EC7718F85A9320
3BEC158B20729C387B48A62BB0D606F78C7C582FC8B16A286196603BD818AEC1
0A09F0C6F572D854EBFF8F25CD718151C53D223DE9B0CC3AB84EAFBBECEF9A63
91B6C8D23C2DC4143561645BC8C4B9613F04A7AC6DF829E861081D9E0C55ACDB
DE40B8532A912183F3C481443420FE970DABDC232178A07EF5F65A358A6D9B70
0D894DA78FD0AA959514CDE2774A10345548608A0360F9E92CE4FCBD8EB1ADEB
F0BBC7254E31EF8E5A18B2D4A533B18D96B055C78051BDF2BDCB62799A6A8110
E7FFDF23F47C8B20A714F9F6470BB3E83DCA7167957BCD0824CC86C82450C485
0FF1F4D01F9F6CD2DE97A27F4C1A23754EA27F07048F00422F754CBC581869A1
F1116ECF2D3C2928E60FA592CBDEF437D0EFFFE390796CE3A791D976005A1EDE
BC9E1C418C747A1A9DF623B8B83AA32D2E5C8BC3ECBC3DA9A200BA7E005F8325
C89AB1ADF5F3D00752745B632E30C361EA4CAB239C71BBA3F4F48079FC8AA22B
B75B05774BD9D32DAF1C80D8BFDAFF758C9E8706E8C945D5679FFE1F4ADB5CC9
6D623350BB16808119B5F56C76A9A57DA79ABB8F9D8C023B77A4A06331C133F9
C970295F39FA1C3DBA612D7B111D90C98206E38D49AF3C0128B031E9FA153FCF
1F373CE79CC401F7140730186F5A5E7F5878F1A72B603DF4E1ADF2D35BE976CE
E456DF62E587D918BDC79A29F57AFF181D66140874153114B81A52D6916406B6
8B77223108DDB2486695C93B1418785577EE4A5F4204CD43E67668DB02447082
F98707A37E85AC594FB7D21F6BE904ECD311740C559B53DD956C173DD69A68FF
F20AB8CD9DC552F63DB4D156B6EBB07A150D7151E1193697B341D04A4052704C
B324B00078E836A3ABDBB1991E4D9DE9ED5767C311C5B5839F0FF8CCE45B16DB
1AE70C94832B1C5CAAE371092995785BBD35B985D05E5D4494876A229467D5A8
493B3D41B290CA0CFCED7C3C9D15286E6667AF3195281E7B0970596714161A2B
BBBDCB98E7B2B53B18DF7A139CFB32E6D3C3317B330F33C892AC77F5E39BE608
32DE009B6D57E11AB564A93AC81C2A417768EE251A0CF07A543EABD0412C81F9
3AC07F64A2719EB8F2CAE11F3A66BBE836FA36A2FCB2967E074EFABB241DF40A
48CB72977070C63EE4177E3F3D2AFF386E28CCB836379761BD8EA30C1C1C4154
2327056A9C1AE92FC8FE541BFA01E70786FFE4514FBD89E1EC30B408F687975F
04A6CB582AEA7290AEC8B462B3039DC126314700F1942DA3CB7FDB6C45BEA13A
C4D1DEF07B3D6B3B014C442759644A128D42C31E0E387D6F02CFA6AC99B7F112
965F67442C2269B888DAEB2E9F205401983606559569A0122AD78E63581C84A0
CF391A75A2CB73748ECFA5B096AD626B987F848451BF2FB8C7A3E4A0C720537F
EB050D65A4FED1A48D45A4287C62CCCC120160DF6504E661BE6D41EC37F09714
0A37510ECDD5D5C4C3F0E8CAE46CD3989BE515453CD9EAA72DE774592CC402DF
F8FF435DCDDB876051DB23A8F721B06622F3A869246D27C7CABC1C4015926F10
6FD8E40DC098B3CDFE4BB389B89BAC5BCC79DB21FE10A38A4E37D4F7856F481E
25637442F5DF597259E25BA79FE299A30CA2FCFC6B948A2CA55685D2612B7F36
AA67E42ADC813EC5042E17EF20E8A173487DF644CC765275D72BC735C815A974
B8CC28A53CBD95FA48EB30144C53A101612F5C8410F9F4C325CCE75FA673FCD2
197AB058F9C26C5EB7E51D2989AF27FB3547807B62EBD6D3636EF1D194079545
65AF36B781F953706FC7265693A70B31A7409389BE57FFDFB68A41EC63BF3B7E
F5B14E4B56E13C67417FDD3136C74277661C628BEDB58E4B232A5C3E69EAA2A1
D6549557438B020598A301C4AEEEF17E1ADE8FF545B3222E8422ED4319ED7FB0
EC5F636151688C19C690B20B6B83225581B23F005336E8267454950C2C03647A
BAA8D45939203FBC4394B77B0DC473289CD30B761B74DC0F1DFDDB8F56FACD9D
11622AFA30B4785F27C7882DA9D0A699E733AA64B5219556D2C859B38DCAFF5E
BEB5EB9167E76570B1F2D9E561675FDEBA8CB89756E1BE078FFF583A510C4873
472D8E00965DEFC7E06160C6971F4255BCFA95FF3464719926675B6E86D22213
D30B5DC2178BCCABFC1C6181467F4FECAF2C88FFC87C846E94E3949C13AFEA66
900D1DA4EDDE32C6D89B7278BACBFDCFAF08B538019F6CACE20A956D4406EBF5
2F80616852BF40CE8672A37BD8F4DABAE47CFA590E1FEDFDE240BADF14954971
C0FFE43A67064DF7422D8DAE5A86550C91A60CF96EF6FB23F304CA1D98797E79
3D354F7E32CBE60B39A63B21F2E15C2A8EF37F9EDD48615BB5FF6E7E78A099D2
1B332C09E9EA3B4584439D2436226E55C23FC871F0A1CDB2DD3A05D5EFE70C8B
1FD63B002F2A333816A1331E7AF43F5470557B23B9D50884B2CD1F56ED14F982
6F4AA8FF66FC0A8D12F66286B4D8CCD808C3CB9B92D2B2611530E726B8EC951A
51E13DDC00DC459B684F923169F8C5D6A158E9771E69BE9B7711236B758D3530
A04B9254DFD4723A21A1B2A125A9DB1A674DA959D8A87E287F626832CC3851EC
33B6D56F5BD022F4EF4B5B2B08FC817D68029DC837EF5CE0AE698A3A58972EBE
2F28CA947F55F200D164B017EC6A8D646014161A2BBBBDCB98E7B2B53B18DF7B
CFEF4A5C89D98E88B45A8772E1250A760F141BBF42FC738A2DAA04D63516D012
A2C4E610860BE8D809D760A7AB40F922F120AA3D61F042803D75D8D239FF7CE6
505D1BE25AFD9D25C98CF9E0F884EB1D93F7C2B325589371F5D7BD278EA46A0E
D7B2105A740E97192D45352EE410CE05059505C8D1E6EF9E25FE40329FF3103C
0EAF878CE9C396983BD00E5811F3E5B8FD5E0B08AD851A31DB10CD2CC71B9CE1
D6E934278D16E9F72C0978F81B1DE62BA0614BA42E736182E8E2F23776C27C9D
B2420E03EE978F03B775F27C0256E19DFA8DE0AE36FD481E84B6D7A65137D69F
0592540F29C23C5D0B2DB4E5BA9BE0D909655248B07AF818BD729B7F7DD402B2
9FCD6EB2058428157A461A5C24A0F592C6A12147C309006DEE93515ABB88ED2A
7B73FD45B6BEF1229200E1F189F9A01E8857394867ED03CC33E37EEFCCCAEB5D
D02EE6863E2CBC2530816D0088780E87F9686A50BBA16DF8A3D3008BB1CE8E90
BE72E9D048D564C8D315AEB1EC2805E1C56024106AEEAD6A269573732F1921CF
9765A456BFF7999978F9940AB1381865B3C1540A2AB9C6375215B3A6EDB206FD
44869BE59F0904DB3094FEDE119533E2D4EF2545BEF5468941C1A7909E909D62
5E8BD59300C44EF62E9EA4A9561B149C9D12835296FCB2352ABB638F1C765E75
4609D7266EE4E6568B22D7663DF3DF96EFF84355D24492AC0F942A2BD7968D17
BA68A9918A69F55BAE6D20F4AF593C82060040611396581F1A77DBFF8E3B6450
ED68DEF618B911E1AD17E5B6ED63ABB7D7E941F0D9523E6E313965B4AF6562B3
C645DF6113965E6F9D31B811384DE04F2AAAC4AD81F1EE52D7A1D7C6B353DA57
9F7DD152700EF72E3B95C7E8E874F5F495036765CA153D9EC6B5E7C71C69E821
015301C8EBA3BA7836495241743313D1B1337F236157B06E518DA65E02328C23
570BD17A6F72205C93892E0037F310E0D03A3A1B713A270F3575D98C9CAA8C55
6012EE5E31D9C3FE7F890E205115D37978C4E030DBAA42C4E968001846E41606
DD510D2C7D0BE9DD12EF363BF9D3A84A8A4BA542E760F0D0CCF6782D6F3A99EF
2B57FDE800527F67DB1AEE9A33FA3827E7831AB90F19EB7835FA1C6DA8B2AF98
E2ACA1D4E3BCB9430533036E23854D443B66E2FC9C94D5828B9A2A195588F31B
8B3F494F898277C0AC298D9DB49E05992D1CEC24388C07AC126C285E59CE23C1
963D3D6A19D4464E56E0AB0255E4A960FF5432EF732B69E3A51D690ED747B160
8852ADF2F9B2856FC0080A9D50AB8A01F834C6E411E1BCB816EB68911F83BC7F
43467AEFBD1733373072F975D7E809E9A6A9F68CA8BD8B131F138BE2AB5D9342
47F2DEB90603762EC6CE9B609B8DC1CE7B7453FF94AE6496E0735180291E72DE
255479D8E1AA7A5C001B593BBE7A0BBE3F1109BEFC016237522DAF6B17E403AF
AD974695CC9B91EFE132C2B8A703B91CB2071949CB97B53DEB549BA154E7BD5A
B907813D0CE0D679D99308414D9F7A66CC81F3A127B0814FFD646A4EA379BA15
7F7E7F3FAF94C1DC01B39401D74A8026042BDA8AD75E1DC771D68C11C8EF4CFC
98FEC73669815B36AC99E924BD35B37E004B247674D8853C2E8CF493676DE502
5889A7B9327BCA41D31B7C79CD45405C5A10A5FDF82685EF306620C1A75970E6
2866D1DD2AA3CB7FDB6C45BEA13AC4D1DEF07B3B875FB2A27E9187C3BE89CFCB
303E06CB73D388FECD298979C10010D1C3524F6F89EAB1B3C4A2518215232947
EEFD4006211442C7CFE8B92C56FE0F7936B97E947E1BC6260036FCD0EFF6D124
AC5E19A044609A75AAAE3F77ED6051A994C72DD5134C2DF0B66D07CC68CA4EF2
AFE35798B908F5087CBF8A99DFD83F138FD8B9B60041F594E5D1938514F441E1
268F3F77839E60753AFBE1C002F12F67759CFEBF6550BE6CE58A483766BFC1CB
63137BB3F173EE974E78646600CBACCC609AC790FB9EEFC002FB61AA0478A60B
D33A9C20D9F27670669A26A3F656B45B5BFCED3DA803A8E909613911620588A8
D3D44B6D5EC297192C2CA6516E19D7710CE3BDA569D72586F2EE505C0B4A3C2E
FE1FE92B652D1E58AC8C2371B0689E903D44D3E79DBDBEE3D3A0B48E153AF7BC
A866DC636191B0A59A52E24885C8D0280BDF268593657BF884C30D28D89D98EE
F722FC9EE46958A7989507AF64E711723807BB0C9B27AD623479188E5134A27E
8A5A106D86E395ADE5040F17C722B233136F9989303481B529E3E0EF814E479C
CE6BD4AD8366BE4714DC4CA7354A30E8C8E5BFB97F824479739F7E849835BDEF
589F0BEF87390010A4EE2ED540CB4E2F566FCB135A4E59D2E8871F75B38BDB8B
708B296A187D3B614F5F587799524586182A06CF890531A1CA5D2C7860DDE223
A0EF82F3B712D270EA0209E3747D35FB85DB3A2B2873EA0AC11DCCEDD7EEB35A
D055FCE7A1C3E629B541D68694FBCD77272CBE02B13CA1B7C5068E7F7630E483
ED73FC7F03CA78B37661AFE1663CED2E5BC52BDA42D67FAA0D4C9702D65E5ACD
088D4FA293A0D76420634500FACDE591FB4259A2936B89C46B83D5F0C33DCDC6
A80D4D8AC59EB66B834397C2E2BD05A164D315F540DAF3BE6F43AF91EB9944A0
454CB691DDBF843D6047472AA6B33D2295D7CB77C33ED9222E749817CA202C62
9955FFEC45FBCDEA39CB07BB778842A9804676D4B1EB01B9A0375560D105600E
104D8398E10A7FF982B67F7B711E673044B10987945AFC328FE6F40F1E03AACF
A829B6A426B837E53AE0B35E280939170E8A7C00E0EB5AE87EA37D3A5BD929EA
9378C99D52FED657B780B2F9B3AD38AF0BB8B16035CCC845D958D548A9836213
3AFAE8AE1F6B50A55546D2C649BA0B7B7F532449BDD7E451E0226A4B420DC03F
B2A2D2213C72B9DA3439FCF973C4F22F8A3ED4CA0AD221FE4534652B5A42E6D0
36A9801722D7616F0157861EB97F38CBEC45468CB3D551029A4FF273EBDB029E
06FA42BDD67BA69BEACEA2C2264C403596F43A6F28BC16E8DA06B2829DC81792
C1C42F403BEDACE9F51177C94007D41265C4C5B41E4E69FAC8D49EF48ECDAEE8
966483F21D51527A26362E1BE40132BB3AD6E600A47E7C02D260D1C48777394B
687C781BC3A90F49453C4E41B1E72A7772E2BB99D906B8CD728DD54FAAEADF41
19F04927F53E41E301C7E13BB120D09D01776436E2F07CD4EC408D5FDDE5A9A5
666E730F71AD36F6AA937D6625C4CCA069C644ACC54986732C1ADF08CCB34173
DA36AB0E62E7BB23FCDD72756F06AD2F69FD772CE0E89EE224E611A85863D993
6B827C7F8EE50675DF3F7359574B2BDED25618B564F43A8F323499CC71D32CE6
183A49724CFF9DE61704AE2E092434F4A5C6383A176D4493CED62566FECB6F53
0354AEBAB25499F884611EEDED8B7A331F84DE922D6C7E79540C9B244C944B11
AABD44046D11F3E32397DAEBE12E9FD441015C20F8A2C7CA0A34E1E98002971E
1E8F6BECC774D5CCF63549261AC39A38778C937980087C60327616A9B930045F
07CD60FAA8B62F0E5DDFBFB320F1127DF818248592E463BA14FF3611ABE62691
65C99E59F4F6E88D8CD565397A69753B033815C699B778AC96D967F64D7D8841
707DC0374123068474042DCB2011E2E6CE9B910DCF6AF98234E7D7E32C0027A8
38AC025DF158E2ED8C4AECF2A28EC6B288D358AB380D84CD0AEAEB8D3DEC8535
8C47386DA54F1A021886AF075FA1F01B93F2CAE11F3A66BCAF82DE740111CC81
FC8A4652D4B8FA9FEEEEFEE1280021B01C0CEFE18FF3A61799D2E5A4C86D1119
07124F35312259CFDA8957136B199B96D29EA08280BE1355EB2292B4C6E3D0BF
420106480EC54E8EC96EA4CF41138F9A274F2EC32FC0AFC27CE90EE8C3B1E0A9
D7EF7327B65A190E11786E7A1D49B3EDD4D46537A910ED31359611F6D5EE1BAE
A92069FA29BE10097E832F7DBE008CF0CBC9349642C65C282F4113C6B620D938
0D58859752E6F2E278070B1FA8D793B1DE3130E3F8D2561CDA54E91F9576E790
0B43027E3068B6C558CD8B212B4B33297520B630C794136CF924902F5F7BC059
EAF78BD04488323A042D12CEEE002C87D3CD39F92BCB7525F6F60445268DB63E
948E317A4C2D8A8096C7CDC752C1A8E924544299C18A0A61F15219BB3C764288
C408BE781DA16CD6316DF44B1652BE3465E613AB18E1CF5D31DB1D5F99FB32E6
D3C3317B330F33C892AC77F2423D08EE342AEF1D930B2589AAD85209E9A6A9F6
8CA969A09446A671875348A6F171D46DA38370AAB831F5C7DA67292BD44AF2DC
41F97F21ED1DB3E9D11E805FFEF20F2A5F459ADFF08FC9D7279D9A2C726F175E
2F39116FCCA6923FF60DEE6CA9E7C8E39C721862D673B740C302DD88D6E05819
7C9B8C231D506CD7D09EC95205A348028836A5C9EF60F581A46EBE4A677C4F0B
8E3F48D4314FD9EFABBB7D77A882814973C1B865F6A61B4369FA6CBB0A2A531D
D58E6BEA09CE9979B0D663D45B50B26321B604181A86C465945D3670D967A08A
9C8FDAD168DE28F394F6FDCB6E34435AC61CF5587F16CF2453E2FA20409EA9B7
0EC43DD2C69D6E149D153BF00C2064A8A1E8BB212E7F582554322A9E0E720837
B785241C98FD38A2515004CF15321E6D00E863B27DF4F2D57673B9645F023970
3B35D633875594900138E6CE245099A7E827C301EA631F6E521DB95CFCBDE18F
40D39847DACB1F10AE19DCCD959BFF93244F75EE386A097AAC9BD36080DBC340
E54000DB9B9C9B512A591D6D1254424AB803C274753444FAEA7A34B37F797090
AEB6705EFC8C1B91A7E4D8F38D8FB90436306C4F413DA07B03266C1A998DEC34
4BFF9AE065B36B2DAA71B22ADE1210209E8C9EB2CBDCEFC63C3590D52F450A80
8B4C4B4DC18655D0E86938D93A74E2D3C6B73E8CE4818D36D08375FDB613F5F3
59812651868F7FA8F2F12C63E8CC2FC7C9FCC92C8B92C19A2D66E18FE29270B9
41530493AA38FE01216EDBCA97DE0561B376D4861E84A42BC03A1B36011AD171
50D9DDFC74A5137C4E5DBC0EDFCB0326CBF528015F2C12A885B65B32831F4F98
A68C205758D9EA0B9A6E9078E5350B764BF253D65E3C8FEB7D78FABFB025A80C
AE34104C780DB2BD058A8BE2888C83FC34FB511F609C62B933EB55FE9130F3CA
D255BFF140633F393060892D57C079DD6B972BDF32D97CEAEB48E1D6A861395B
12C8FFFE0BE66189E35D7031A7D3D5A2F3FE9A2E99DF6BCE0BC5F8D56353106F
3673A27362FF66E61CA031FCC4C9FF1C6E1C9EE60D222FBC973F199099F4E035
A443EF99B0F94EFD8B8510BFC3E7B8C6FFAF92354622F510C4E331B2B199EABD
5C6FBB3BE2A7C92620E6B3501821A700488D7316A30ABDAC96AC22E11F4C1C33
1B4009B0A25D876715DF10B5D7F515CEB552810FFF3EA91185F9186B707766D4
C9F806427189931210373B4654679360CEED85B22773F34FFA0922F5D3ADC5EE
3D294E91B637868345AA73D21D0CDB555FDF37B69E68F2760F36FE0458356724
6C5BA745478E78F7476928747C5C026913962964AB928E37EB374D341D427DD8
B004B57C3F9836BBF2307F7D1E8F39D9D55FC6EFC499E08827BD9280E2EDBAC4
963494FC43369DF0178B7D0353AF45A1FEF8870473AD9CF4AF827CC62A761566
7606115593DBBA2B34349870A5E696419DD73376234D0D5100628B03A41590FA
30DD98FBC687750C798B5DAD0AE5F49E4A061FC6BBDD7CC9567458D04311F82D
E9C6B61496AD4B8BB7A286078BCEBC6D07A2A3862020A1E45D610F7F982AAC0D
90E27C810BDF947733D82941BA552FECB876E2B431CA7083D3432F21D3C0579D
2F9C046C526C019510998526A6A331D0AE40FA3B337DCC0258A1717F111814BF
F6F7970B76BE54F512807087478101948063F83BBA123D5993C82CA55814330D
5F9F38141B8B4F5522EEE0648CA3192551114F74A077DA7B9261427A4E07550D
7037AE3F4D05DC20F88EB100D8C60DCA396203B79084F686692647097124CF91
0694809362CCD041188202136BF4052AF90793926A5B6A8345CD8B9CF3614F7A
105FA5532C97AA076FA9F395C5D46D0822E0E05E28E1A39CC3521006D3B775FA
C70715F974E5D273E3FAF60F9F7C3FB6892BB24B0346E0A28F82535ADE3826CA
20A8712BA60A2EE7E90229214ED6F193384CC175BD084BB4DC7B48F14B665F4A
DCAE24FAEF058BF78154F9A26D13A516ADF18A4AD8EE7F197B0E170B7A5DF6D9
91535BAB3BF321D5CC9BA8B79E473645F8EE9477A48B76328AE278FF2213C9B4
3DE47CDB570951E52712165554E4C0F8560ECE4CF173B7C708E79031C2BE4F4B
89C55C49CEEFD333AE9B10208C40CCD8B55CE316D323662C4C1F7C78DB46661C
23DC20180C12202BD37C57807E01C0ADD6ABD830570F35AFEC1AB1E21EDBEA52
163C4904E9F88560BFCA6887309D8433CC99268027CD6F28C238878691ABA39B
9A58C0AF0C8B139EF3DCFD8F26F172816F1FAF9A930921E010A3DD871FFCE4E9
6AE79F0D06D189A71245802727555C65946D0372D380C6A49D33E9AC8DCD7167
85799C8F2DB39F209B5C356365E5C62CF49095DFC96085AC9A8C3CB864C178B6
6E56D9853902B230A9A28C7CAB452A963597540B2AE0790F4613D10C8C1DFD11
022B3BE8EB86F4A9C9FE6A5B3A6A5B77CBF1073809A5F0A7BE6D3AF88136E952
93C180E0C2E7B279B424DD935543613A8C6E1DB5698892A893FBAA69AC7BF97C
2F65193D27BDDF059C52B61993293E45293E67C367ADBAEB98997ED2B15511D6
9364A438B07FC3539B664FC89FC31EC2D433AC1F267A07007FDCECAA8E390564
26B7DFBE7B82EA995581C3BF73ED6AF1CAEBA4247B877A2D78FB1CE4316EF35C
4F3A8A6F91BCBDC38D860F9FD561C26C37460FBD1D476B63306FAE4BBC223FB3
3C93D8E5FA8B27E93308F64E6531F1279BFDEA4B9F734A4BA3CD1E204E0E5616
147A290449A9041B44B3A8EDEE836404D050D21E236A5BE8F0DA74427E349A13
7E39794B615C4D18378670C541CED8258735636A59C6E001BFC37AE2D4375FD1
97F55A4EA2E7FB2536EFF45CAD0D1D3A12885EB5616065633F8684A48A16A6C1
6D95822E5087B732465C83F594D34201E285ECE2D1A9E66055A3DB23596CF9BA
5FB627267EBB216151679467E8AB6754D936F40F7E70D2B29E7742483C22AE9A
ED2D91DD81664FB0CB14390AFBDA512B22D2A22AEE64A02521F9F4E89B632FD2
7DED768B478B982ECA71C390D5F831EC1F7F3BC98F47F6EBA4E8207CAC488CC2
7C41A3629E20E1990410D70624D691709682A47EEE5B34DF6A56436166F2041E
7E82A01FF5C4572DCA7014092F44CC432AEB6DD44B8712538DF92DACFFDE687D
99912D757CBD02120021284342AD29F235A961113D57A3A2B074E9D9791911E4
AC059537ADFBE07859BB448D72A825B1A1B8EB71BD1A68519D11EED5149F662F
1F7731C5A64FC50ED13FDB632DB2DF0CD7B75F1FAB04DB01E926CEFE58916C4F
80791EEDA8BA2D74A6896F9BF89B01806160828C722414DE4C52C86967196804
5BF8A4BCC354BBCA3D63372245905D328000F518C19ABF796AE574600B0F108F
559977A6A21C8105DAE23AA5297B1C8B3E6C99DBE223DBE00347D12B71DD33E0
B1E99C1590A8EDC8C63581E61D9327C12FACADA562FED8C1934000AF057089F8
5FF82FDC3FA25D71EB8D9982662ED4D0CEC8DE8366E842FFD1C61F73E4CA4EB4
DD2C437142F326BC457F529A21691BAC44F9AD382313A089704AA88AC53E8BC9
D43C62866E6C13EEAE8183683C8459AB89B669A88177F05F851E6ED1AF8EDC97
DEADC8DD73408BCF10098D8577A8CD9747501AFFB7DD4D7DCE91DE8E81FF143B
8CB318E10A83EC44628182034D59D97A1CE566336919D3A47CBB9BB21B4CF327
A3A3FA79DBC2CFABF32ACAECAEC1FA706539975FB605284B9BF4E2FB487E6736
A43C93629FE7878DFACC26BC709B1E7401D14273DE12C792D1DA4D69556B5BBB
7B3AF0598BFC87F7D6B2EC1855250A292B2D2FE880BA1393A4E39C98358ABDDB
5919F1F8310DFB541CBE0DC02C2E2E68E87BB2EFB6FF2CAEF3611C03BA4EFFC8
B0D7572121601F4CA82DC7A52B8322920075CCB945395E24BC20250785146F10
3284D77A2B5CC519F1B02F9F3F8B328721AD995E482F3BDF10A666D4D6D7249B
720BAFD6D46878F59BCBC1A56B4DDC5E0302EEC36EFD195CD392A0FE3754A3A9
F55605D7498219F0607E7E31806A1F87E8D43085DD3C7B62F978170AAACB750A
F38736CB62F71019CED20A9A13F333F689A53C102D68D23EA369300C1C4DFD8E
0074480AF7DEB46BD7F12EDD97FA904304AAF8AAC85E5FD66080C881203E7473
D3D8022254CFC10A674F4FC32ACABC5EC52890A82372526C9E5B9E98C975872A
D616EA159FF0BAE08A9DFA57FF2164C2792FC6904312272AB6AE5CC183D04231
039706D8856094280937BB98CCF00B3B221601306C2E5D2FF3E8D26064673858
87B594B90917F8CAC26A41BD8536F2E9CDB243309C1492AB68A73D2A4FBC35E3
47DAE9C4EA2D8AFFF03AA56CFD0935199F25DD5EA70C28A2DE39162FF91DCACC
2944254FE0F819A695FE04523D45A7713CA4C8E6951EB95FD69DF8790D6357C7
BBAE333AE70DC09BCBB8D74BDBC58AB2ECAF03C813234D97A4986B7C53FF64FD
DCE6EAD7F23AFA4537AA4B32F66DD7E99A4CD626A9C1F497A8C9EDC7C42F03B5
79EDE1EE7EBFE6E89D276A222590C03050AA224FAF7D4129F8D455EC9AFA2D0D
ED8F0E8C335FFF4C23A2B329040290A2375FC5E56E4A040A304164B49FA32746
742DCE27D08AE326B904EBAE98733B58E808AA19BF21C060FC44DB62923A55F5
46ED0B0D2BAE7C20C36A80F82EC6DE1A971F3C38CD92766B4D3EBFE3CF54A555
896D9A5FCE9216973CC55C0056A9325C8A5A394507FA07396A63A3603835BA2E
0E71A7A9EB7272AA4933A075AADCE885837BF0FF82C8AA7AC428E15E3414F518
4CCF6AF5F2D8381EA1385A4BA84D924E05987E501803B13BE3BF1E3161260371
B8359BDB24438DC2CE6E150623DF0DA69BB669CB30CFED7457EB6179A867457A
790FC8B2024DCEF97AF0FBB6C6A02B82584DE983845720875AB59304AB92AB68
A536CC9774A3B467CFB473B7DDC4DE927E6FBB4C8C0B9AEEE5D925C69E053754
F2B6D33F111F12183A55372B8997394D400005518A0FAAF1309F1FE82F35CD34
8629F40F760243E99B0F83D3B3B6A2167F42A486410CEDFC0F2519609871D15B
AB1CCA409DD70C0B361790DB7389B4B53AF09E392787491B2F3CC9E9F39DE9FA
5C47839B7C6568999895B9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFSL1095
%!FontType1-1.0: SFSL1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecsl1095, tcsl1095, lasl1095, lbsl1095, lcsl1095, rxsl1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Slanted) def
/FamilyName (Computer Modern) def
/ItalicAngle -9.46 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFSL1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-150 -320 1474 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E724728647E86B0DDF0DF
27E470DE304BAF6B908EB3795E1E2C2EF1C03404F1DBE0D3E3C183379DE9E0FC
0BFB0D61769003C4A9E55431A4C3C5DBFB2752864A9A725F367EF3165F7E622C
C138303769E5DC370F262EE5CA8F59C0831C0849547E8357BC5300BDD59440C9
294CE784007D57CECA937A34BED5119A5E304D5261DE9153D2DDBCCE739E6198
9070CA375A2DEBA40443CE2AD54F4B3D184E9846EF9C2C567CC19A512C73A990
6E3D61BC03F048A3FCEEEC49D7E62D00A699D12E4459F98C8423D946E74E9041
3C8DDEA7C255512A023960324BDDA11B92459A83DC5A6A119375E450E0F3FBE8
6BA5385413972A464640F061E935AF7989DC229C4E9DF86D9162A1BF33567C0C
31045A0C5CAF0A394B694D99E97BE7B58C3C427F8F48C15094463323AD593CC9
CA898C6939F284563D4BFFE656737D635FD6BE414094FF3384A36F14024D9368
6E38EF747E4E8F662BC7E7099CB166191BCC2410A69BCAF57F21FB55FE221CE0
BB8019CF28A7B33F6011048B700E1220ABC2B49A835457838BA4E238565CDCD6
73C74C40FAF34BD971DBBCCB60B2BD7AEC5253B4610F9137BF480E3C9F1CCAE0
F24F8F13C840D3D815D51C6C1BC368DBF428B5454132BDCEAF909FFDD31DB259
4E6F6B41EED47EAB63DF8B2D6B37DD024B3483CC13A06C356AE9895EAC769BEB
EF5E4839973091137858C1D8596000C2F85892D574194F0EA9B44085C3BBDC87
5A1C250E382F837F4A493228B7DAE705275B56BA63D4C4E5389B32052EF346F8
9349BEA0C53D690900696B7E92555F3935183C17752F1DE829847D167466BFFA
CD64CB39A99A44D0C255646911E40F0AA1A0F2EBB1E1A34E6EACB07A901BB4A9
4CED1ECD64E0FD0679EE72B812BE81BAE0196AA209D1CFA5C8267F794ACB69E7
1DCF71A547123C8464BC5DE64E0717E7B076251A9019C9AA9EB921266A103431
05E947584617685896EB18120F759C3D5B8305C186A61279D544E2B62DDBEFBE
EFCC6D6706337662B94BEF7C919C6829379849A19401260A7434413533269ECD
C99B60755D87C2F5FEDED313DC59B60614C2D7E72FFD2E71F2020931EF7C6287
E8933A4FA58300298B12F3DDB5318F92C6F33E6D384C155A789EF1DDB768507D
A2CF9AB31CFF42FE6B4F03CD53252501C2796B15E89FD7D5E9EDC21FFE4679C8
D20B5EA6C04F961E03169F13B0C2720DEBB9432F01A550980BF7FFCD72AFA257
B92EF40580FFC7D49BE88BC83E76967445B1F5730DE62C03875E50B14B0B6BF1
FE86A001507C04521B40EA1CF49975BFEEA0B2276AA0630DCBC4306D1D96FA21
AD7B1C806F4ED2BCE9A2B379B89EED605D72D0BDCC2A72DE0E9B41A66C608F7C
ECE80469201E64134B6D91829737B529FDD96D6C22A99E04D6532BEFAD6A9354
2B26C28A9D9D736D429C304296090F66AF3738F588D612DEBF7FA7DD4220A61C
D00F1BB5284434C917AAFE03A6BBAA3941B1056B6A3EFA631A9DE24D6E9DD8B5
26EF02EC5DDC3040E38CC2FA9F6EFE382FE4FBBBE7EEBD2D0C6FD2C5B3A41F00
08BEE50D97D2C3D6D004AD27CD4DE92D89F549D7C9959A0017F9F909E698BB12
7E4D543A7B128893D0D808E5933013A67DA0E78383EA858AE2A1BBB996C90D0A
557D1A0F97D00BB653C274848D0B49375AC07EAAC1F39A8CDAC4722F9EFBD234
9A572B8D9C49904081F5EE889665BFD5CF095DC10B658B1D2ECD03DE2F234B17
4D8B17FF27457D09F34E3AEA8B78003042DA8581975D4C14CBD9CAD608045328
4D21E7A6E9F0D06720FE1AABFD0D697B6365AE4DAFC3A88E05E97214FD97E281
20D8A1373B617E061109AA0AD371AF1987D9AE31AAEDE320A0520A1F095275D4
E9C6C475E9975FE2FC20D0E397EDB7BD229082E178AA6A6FCF0A1A038732E38F
7E37270241205A1E1B08F580E612EB64C4DC165BD6C64C44F44C208B84C0C7F3
CF111A7DC0B91D4BB0C8BECD16F1512AD2F69615F48D4050677787ED921DAF71
2A0135F35B9B1CCD769147E7A4D00F27C2E1AD8CAA72945C94960840005C7528
27F9AE2CC60088FAF1ABCADDA38D4EA22B3F912EB2DC12DAC3E890DA1F075E84
FC2FE0B2A3698E3F7166E15A9FFE7EE7B8FE92CF64E7E6A79BDCFE3F44CDE174
513001FEB070116A145FB3B0272C619E6A3CC8A3F602E7D0B639E2FDAACE60D5
A6009CC1644BCDB9A47BA7F0BD089F9BED1D904E7C6DD6BE703868758CC19E81
DAB955BB114FDF5F688DE08C84FF443BC122E310304907427C229938838A5454
CFF7A7DDB93250698AA0AB99C610D5739BED2629572529A19B0C080808C73007
08BE33F3599991D07DCA2785F52A2D9587FDF9FB095BFE6125C41C1EF08F815D
A9FC81DB308E78F05DBE7F262AE102DC020C35ED1F2F85E0B962B2967A677BFE
E847A8F50AB34063E50A0A05DD71CF004087F913EE0CF4B5284CF8FE9A2E99DF
6BCE0BC5F8D563531062B5F19117BC34CD778B057EBD29C3DD113D2D8A626621
778463D1287DB8D742DFE83E847C1720B47420F1C8B4AAE9F22CD6C76650A7D1
AA9D026CCD1B21B70D7FCE2E4C2ACBD6A361AC8026558DC3FDDEDD4109073210
DB92D6168DE1D9C33139E956AF79A217A315FA7B7962AAD680278ECE63C3448B
F5C2A651BA10469159C8911F844021FAD8EB29845025DE74A792B3389C249A86
EA1764EAD2D65F03B4FC9106B4610C16C97EC9C93466FDEF6E41F8C4CF1DD88C
50A2F6FB0CF63CDD5FEDDF536A90DB58EE30B33ED56B35AF4D871CBA7F5D54BB
399F7AD87556AC4B2DF46A79E76BC9A21026B5AFA16C3C57DB545CF8C748DD42
9C3FC85114F9806D271AA72073495CA295BE6933B1441A8253334C9FB1BA385D
79739EC28346E30F68F66AF1EFCE9A8C95E447FD020938E02C10A3347D516A08
D004B567793B3917C4EC71FB0A9C2DB0C2F30AED4EC343F6FB448978F58EA8D5
269BADB658908BBB0DAE7BD18E01314194A8D526E8D61539CCD9463C68299180
2075C8AE72E7FB4BF0203DCD9CCFEF19336B13B81B363A7D8859EC2DC27A2920
3DCF46C4D38296630AB077AD96270F0C2048CA2112051398DFEDF0573D8D9104
5389AA77C19171B22E3D34293A98B1B422D93FC7B19A19D7E1D95D49E54FBB28
E2127A06C26FD439BDC79AF24B1E51A20F41119742F4E3281AFF60FF78E65D6F
FCC2C2D56AB22553001E833160B5047931CB24F3DF7F49D69B9ABC11CEE2ABE3
7156EC48C2532054CE4621251A287D12BFFB2131781F3234B3803A4FF311D78A
EEE8FECCFA6183F750C799A8E80923EB7201344B23A1D8B0D625F520920702B3
9B46C32C799AB4D33D2CD6D855305C3AAD370B0EEBA6F87BC92CC7A3F7829296
DCB0F684D19BA2E1760F73F58522EC6FD339BA67EB314266BA9F1FD4D5835F6B
B7657CF2A0A2951BC9E072C0C1AF20D681702745D81B88208E6816770C93BAFC
0CD2293012310A50802BF2042E8835311074EAE9ED878D047D3CAB2381245451
88DFD681702745D81B882339AFC82735A1CF4D1CE19E46C61A0AF4332C928A33
04A859D98C2AE3B0DF0C1360B2BFD99F2DADD5AD8283DC9CD1C81B93B844F4D6
35520B2269035CEDDCB3B5518E2C1C1B11096363748ADB403A2495B3D53C4E90
874B15D889F41783A3EA4EA466656FE8721A5C6BE598A448C9272EA02E66EB1E
A0DEA60602D6153A670D00266FB7345BA7A2F05453FAE1D2311E6EEBAAC514A4
2B46541BCCA8323B798C6D3B8930D7C3D779DE50D50FB3CAFBE398912A3F22F4
B3113BDB5E2BC36B8FF68B24CBF7D79A6F974915B838EE89F05DD820578DBEA7
E3BDA2BE4024C50C8B5879AFBA7DAB4DD0635346554D16CB650CCF7751A240A6
16073A9F1E34262FCCE584AA10ABD7E9C00638DC06904F0680A8048B59AD93EE
9AAA8BE98438C6183E093DB16D953B78679A23C0BD615BDCBF3B5BA481BE014B
62759399EAEF8B4BB1CBB26A53901310676CEEB2EC4F37D2FED84DC3206AF06D
F3306F4195D35DDF81018CFDE16F37C7B58B6AEE2B56D12D33F599194A044C55
E21E9D187AD9CA260CDAAEDD0DD902F450285D595ACC5B376A425B37F9D9CC85
30B6C1ED9E4F1C10281CCC98E0D1C4D5047D4BA97D901A1D503D7B9E6CACB70C
5FA5B96078BC1DEB158CFB707F08A181350D6EF2BA778817174AD09B9C92F21E
559AAD015A3ECBC6773D4A8E05293C88179956E369C418B77A92E0B718668A71
C7D6B094B14FBA78D14931B4D1566B478E0D9E6DDD321D51A2E412FA202D41DC
88A30D3828EB29E0B32B95A89478F8C8EABFF56F5A09C1257CF81E56651BF157
3997E08AEF740A455F3E1C163D57FE05E7CA830163AB27FD7C001FC6302F6880
23B4B5B33BE92A0310DD612A295B5B72491AE0E2CF7D447C1B6A40A3AE997242
3C51C16C0F6BDFAB854748172F646CE344F4D76996D0127E23FDEDBE356E1CA0
55F80607132B66A80659D1E8011A2C6F184EEC7C7E614CA588BCC95C23200FC3
221F142BEBBFDD58DA9D4689E5D207751DE0BCAF73ED468BF58A186BC6BCF43B
A455DEF3CCDE1AA8FCEEA48E815FB47A57EC73E5A4C4385A2F5AE58AFD4A3364
A47680E82D0E1772753E04311775DE97A802E45496D7C99530F426D5FF7F10BF
D4467BAF34835CAC34C5C0677AF2B3C473C5EA77E3B244C14AB5A245DD8787A7
83D08A069FDE9003CCB87CF1C4757B78821D52A03F669ABC8CCC9C7AC2BDE2F6
58E07099DA3B71E6EEBCAC80D17024F4F0FFEAAD16CF75E9C06B9D593022C17A
C8734181777CAB9BF9C20DE216B3319E23FBE110BE6274895A3FF937C6CB1882
1A811552CC7B72E43E34639C248A2A6CE65ABB4A94800D73007B4F6060FC2937
DD6AB422FCDB929D94565781BB77FF203C063E252CBF5A12D572721B5F946F7B
C232B84112C1A88BBFD5F134F4974AB098935575983B743D597766C94041DA68
A11043DBCE995E7867954D2CF55961C0512ED552B37D8063F5ACF719E5F6F66F
12DA59625C437D4C180DB0CFE5C8FB8FF538B1093E1F9990481264023390ACAC
DF7E603304077B139B5F11BC14057875DCA5493CD69B4380D32A7A87F0D17FD3
7779E82F47ECCAE0749E97B5CD13C38604746D826811F7C8B663A9376B871A57
E6EF028103BDB5DF9E7D3F4A4F87101381555294F65A8E3C686A3F8D65AE50E5
481EB898AD834EC65107E430DE2E62E8C1194AB206E3823CFF7708F7D78C26C1
D30E3B6AEB7EFAE67384667C5369467F0663C927DACBAB9737D011CCE9F0EACE
9F97B5911158713114F79D4DB71C472FDA891AC2744F8E4755484C073F981D15
ACAF54AFE9A9008A616251A86BFD4705006E4AF46A848771EBC0694A7AAFC805
06B00336285F6CABAB72E7BD0196059F98ADD1ED265E96E4352DE80CA020C752
34FD6C574117146FE57FB77CEB986AA1C9FA2BA8C45C94919231A51D25C9203E
539817CB0472CB805AA9A6B5BDD7B27C047D9CAE387378FC232393DB32E2A00D
B9F0CC0FD934823271837120F2A13D7BD5C6118E30484E2971044E7021EF83B1
D328C386E13F0EEC37407D44468B5E27C4A2496B5ED750549C0238926AF35775
327FC5C5AE70093518AD9000E3CE315A4E18071665A39BDE0EE7368EA1DAA264
9DEF78173384DE6ED387C051B641383D1E637D899BFDB630A8409629BDE3F089
B8367EC0271CE295B620B9E745F4A05BAD737B2A2EC8BB9A8959A0E13A259D3C
B47377A99EBA1F9EE3D8D12E98D4BC2114A4BE40B4F5243B4982C503D49FCD50
08E8448ADB78D43F071C647F99018C117DF0B2BD415687124F18EF6716B368D9
B0024B395111FF2286A875B95E950CE999820A15ABDBCD9CA636723A64D100DD
7C66CE6F1B457BA89C4DBFFD88AC513E0B07D6CEB2FC1048E824D87501B5369D
B1C94389DF02CAC58C1BEF50462E59BF1FCD59DAEAE142BD2D4E912B80B49357
6E0891DA51C599E10ACACD6F9A07B3684E46E7D7CB3F24C7CFAC0CC95021DF41
F5BABB2B6DB8070A4F3EBE2116D50CB7FFF1C167EC360688F5269CEAECEA0500
A1E37C1AFF542133868010EE23C94C0459012F203FD61DD9BE8F5906465A49E9
63B3FEEDA37DB82E63BA2E5D206C7F6299C49CAB1B3844FA3CE4F785404AC5D2
0F8912226D571A18CA48DC1A6586DEB6D302F8913C6BB60832AC06E4A3F1A61B
11727E311D760A1F9672BDAD415F4B34ABCAFCAC2FCC33FE8717D9483C3D90CD
CA8DD26EA6B25B067BF784BD3D8A0CE8DE1F408884FE98C1383EDD3B140DF8D2
76745C88DA2EC25B75C01085E9FC6CE00204AF7959BF2D966705D80FBF09FA2B
EFDDF91B4766FB91947CC743CD6637B6E3D52454F7C7425B6901476738B002FC
42139850ACD990092546AF937F0BE8B4197E509F4927641511C5A17854CC24DE
67F7B766485310EA9A9B88EA924090D1CBFC4ABAD1F5FFEA86E9AE215C79C1CC
6A1C88EBB6A5F4AF5E70B13F6F6CA317C1A7351FD00A02EE061CB4F460AD9C33
3DDF5AEA23709BB667545DAE84A4B76A65DD7F4C2FC1BD83C432BB7CFA94083E
1630C801CC25791BA4CED3A6A94C8FB201C9E18668AFFE056C5FF626C1A840B1
5A1B11BD38059A4C12D55EB7424FF583C132D24EB3F46C7B4D72201FCD020F8D
B32F5ACD29421BADEC43FBE482BF2AC5D42F6AB08C51234A87D8D42B543BF4D4
904A9DB221D6A26F83828603A745468784B7F3091ABFFE8E8BFB5A609F0CBDE5
6745219717B3D088F9082913773A08A6567F812747A6031D07B6460AA696EE86
80F72AD122D14B6D6CA60B1F2A679835679A9F84B87CE63A1021B0A1895306C8
D08B0940830186B286AAC2CC7932F017D6ED3ECBC400428A279ECCED5D3EFF2F
F4BD7C970E4315D069F56424D43916E799AD04298D971EF7EC0426EE926FB26C
E338CFE5F50CF2937BA69AB97673FD4284B8D14F4872A439CC804FD1A47B8D8F
A5EB10E25BA41EE9124C48BE11B77F7D00AD989DF67305D3A251D1A607A5B5BB
C5E1DB6A0DCB8D0CF788A0FA47E31A57FFA78AC78EEBC9FC68AAC0AFB8C0640F
4235A2606102198ED89B9258E67A7224A4407BF6792C4576D24A193B41947777
FFAC047CB1E103DD35DC762C859BDCAD57DBEA349465832765B86046AADD8EB7
05B6CE72AE5E6A2D7CC83709E7B1F043D9B2AAB1BBA3E92751BF4083B295E46F
4C3D9A8E9EE0D6FC35E245F700BE22433B7494A1286004A1E58D5834F928EAC2
44CAD6FA6C270FD424EE4004343402A24E6776FDCBB2742EA6632DDB8B2D8CA9
72455534CD898A2EE5DEC3654ACE617B6F2F761AE694105ACB71A11C776391B8
FA4438E92AEEF0BF2AC8AF46D0339DEEDBD48EFF2EA4BD68A5B8EACA7A287CBB
48C561EAD1AF652E42295E4B5DBFC7B980FAB6AC77AF90111311025418375FBB
09DB7F34F072E4B04E0B4799FF851301BDC31198D30DEFA88A0633B8108CB555
236A14368F9BEF10EC0C46F4BEFCA79E8620825E5DEB9673894CA9D7E303BB52
2D20F91AB973BBA8D26DDB03EFBAC85EEB91A62ABA6EF344788245856108F8E1
9DCE904CD39DE18B88453D0C4E9DF81B2CF16CC8D9E67963016A1C77555FF8EC
6F39C81C5A9B589423FE8E386C646710BCF518C1B92FAE3EC2CE003245CD099D
44CE016458B114423F70569776A23C0723DC47BC6EEACB2B99FC2CC90D816164
6AF1B4E859D84D50B004A7EE85F3A49416670915B9EEBD5FEF21CB1244B88C6D
380A1B63AA077E58DA1004B15AF6908F243B673EC29ABDFC6722B8990F570D08
26E5433C25A5FE8968FE5DB4282EB7D1B85B203D71DC802866F884E5F7AF4E5C
79529C029F278F612B880E6C0D430D1D80858F5CE1C414D709C1BE6A726E2C13
8AC9AC0982C104CC919D280441616F73EFF152EBD59359563E4E498DEB47B3DE
081EB2168B3D1B42607647F6EFF89C97B5A01B4C5A035E864189F8259826F363
FA856BDFE6C72D9CA6F9C7E02536219A4504B3946B09383D81DD3904D85C32AF
4018D631818E1A0AE690E4E750565C6A63D4E868BA31AE79D3432312F8E8EF94
71F7AA5A5FCE33CD2BEA504C976E945512A38F8096C24CA17E70D61E78B3D6C8
D6FFCB26ED9010DC52B17C1802B3B2D454B2A62BFC379A48A06E11E57D7B2C53
7FACD18F19CBA04421D8A4631EE275B83B62D4195BD05545B04A54FDF2CB3FF6
66A0EB387276C69F3E71E5A53F2745950461448F3DA9EB1A47F2AB39A3FC9E26
0FD436684182C9B8FD83A99CED30FC1D066C3EA0554333695BE2B2B18966478C
A1E13A16BF7C51340B9C57773FFB718C4CBF13F9DC35C339CC467E4D22C358B7
33712B9197536D5BA8611C7F47BCAE3BFFA9E2A00F8C0F3266FE3BC28C1DDE65
747AF8F5643D441C792E662C2CC8D20E7B2FEC571623729CE14FCBCE484B7F55
A146D8BD2A38F7C07680D1A9AD9007EB369B2A6B80A956735284020E97B3CEB3
02886322215C3D8860A508795CFFCBEAFDDD7DC740742D3E421F18FE4A3D877B
221B0727107B7CF39E05810E65F566A1C695F8D501537ABE3F15F5FBDF877D78
FA32A7CF62CD4DD8B065A9C367BE5F50CC074C98C189C334C577F78B283C5DF1
BE136CA0E13E10A4B31B29DCAA3984CCFE734DC86FF098DEEA0A248016B940D3
A8F1697B4F4B5763E628A466731CE41B2854E7251BE2E085671644E889CB71E3
7BAC2C13BB200812BDD001D2CFBA62ABF0533F151B569A0BE14E361B541891B7
8E0C530AFA5FFF62F8FE26A02632ECDFD0BF913D2697A4B5B87D1DEFC1BC0BD7
DF733F07DED0FF4F9086F239DDE63EAB225F2857D63D5CA74B5F3FF6CF40DB53
A552F5999A1B500D357354164DC008CDD674A19F38BB8CD76583C605038A8FA0
AEE394CE83436E9945383FD01B9530C7333F9B903268006A99F5B0B9C60C10A7
595A3FDEF5A78A41E4BF5384AE0E66F0970A4099F55529BB528DAB42210FA563
2C0FFEF90A864DFC8050FA52A43BD093520A87455633663995CE6137298747FB
DF9B6D3DDED36978583836894DF65292F0BBD05A4E26DF502BBB968B61EEE2DB
E4E428F10D6361548940602AE0AA7A295EA4EB39FF1D17405A3620270BF01EDE
1BFB64EB7CF6955084AA74B9E8459ABFA31EEA92EB52EF994980B921C47EF745
92B6FA0D4B1951C648D1F75FA0C7E46A46B2BF96C8EBE8FECCFA6183F750C799
A8E80923E993AAE8523E11CEF846426006329D340EEB3E41D99EF12FD3CD91EB
213A92541054C05B972D78A68657BF6ED1F4BFDB27007903DAA149088143F1AF
BC0E85D15EB6A459A08F09CA41D28ACDABBB8C2B2A3C9E36431D9EE9ED999020
B01CD2F176ACB3B40C2AD40F13350F70A046732B115C4E8026D233EC0AAB9022
A6C6E67F9E62416D85AEDB5A78DB866EB200F60801805A8C4D880971F692346E
A5DA9B6FBAD028F92D0A7C89305D2E396A57D348C8699CDBBAB318BB72913810
1F8384D7183883808F23EF4AC14C42BDAC9617AD31DA8D1CDBC4D20F3F418BA4
17939172074C40600FD67B79A8EE5E0528B365B81BCA25DC1D0D4C3FF37F2521
E7EDE4696CA09440902D0983B4EA885CD9DF121103BF80775281FD7A8B4132D5
C35C47D639FC201645CEC2174D0E6422111BB81D4C8B5B1DE06718EA3286BBB2
365138869D666EC10BF1C88AAEC1A55A459D3F57504048C0F210D1A6B83F242C
D7D3BBE4559246C9FA712D7711E6462FEF6165B0143AC59698E084E5A72B86A8
820EDCBAD52B8C391B9272AD31963B379EB1559F77B9DD072CD64C3B048E3EB4
66D7EEED6E00DD3B183CFA64757CCE0BB0CFE5C8FB8FF538B1093E1F99904AFF
928652490A31EFB184F781387785659BFED08DED24E434D98573336D5F16497C
F076AACD1E69F824581A91E2E30EC3FE52FD3545E8853A6A8343DDFFB840F5E2
0C8806D73D94DAED2909813121F0ACCB72A0FB54AFC17A2ED5AD1274BC51C67D
CFD8E886857484E09333F26EC047B16014275309AAF5A4C5E050CC75AEF32776
B3A29543F526B92CFA68A927D2D6F8B4ABDDBB6FED5048600778C4E66F7F9B8A
21A3D319F5A2C3548BC3C9CE8F5A887DB9C8A48595E399ED18C84F86A7D5DB98
6A59AA60664D2B3CFF2DA1552EED275B1B6443D5507F563A528E1E6DB60D88F8
D524DC50EA94E931CF4859A76D6205027A35B28C8C771F3B74C0ACC8DDEBC0CF
FE5D7849D734BC9844749FF7C02F4CC8CB0787E20624CF500757712F7A57D062
A620DACA7750D7EFD51E830EA429DAA585F70B5D1040054F2BF3F2A0AAD96571
2728417DEB91020450E7DB0A8E981347E21C316C918797C4B949101FF665A780
6D89E7739681A0E5273A9BF938E6AB16B2A52ADDF6EF861CA2B6BD49B44A0EC4
6AD2E8F794C151C257CF9BCA17A2D508D809FF461106D38A5F42EB62DBAC95A0
53B2A38C80CB0D5520F6080FC68ACF427F7B09C61AEE0B67BC491273035EE652
1D41AAC9B1A9ACC5F02B868921A1F27153C874D9E7D1F2FD32C072BA4D82DC3F
1062E543EF66B98F9F45C2ED71955F3F321192903A4F9FB2A08B48360A2F4C86
3DD60FAC84A5D33E27382663283EE9D309C72DE267794D6A060830BE729498C0
147C5B77224C103909C02130B506FB4732B136ADAF438E48FD16EF420C1D801A
E1CC3071BB8EA01F035C399EDED6AF7A70BF27B19A170DA0767B6C0A51F66AB1
54DAE7900C218542AB1F562B205191673BE8DC07AEC284DEC07925EC6F2C26BD
DAE0294BC44F4A5BBD6CB72301B0ADA3A44868B78687774923664DB8CDD1210C
3242B4017C11A635E09D7066AD4E54B8072927D0241DDAC2F69F99C2F361F092
77C8467852C6167A41D9137E9542C692F9E5A139A6FD5A64D6903A23EB4F7247
C1544BBA54D01D2B42B3980AE7CE89485C5F41E675B238AEFC6CE2A1D9E51A4B
61F5B691F04E526C85C657D1C6E550D9BA09C5CB3FE06390D32D8B1042DE5834
23A2EC4D219FD964D4FB01E6220B001AE1A142EC970409266674CA23110FB41F
88304290CEDA8D1CDBC4D20F3F418BA4179447036070F045637BF6F46DC6CD4F
EA8E18E3A6CDB35E8E468A1B62C8929FFC1FEA0F312854E772DE956ACE0CA995
B7BE5DE65590E7C217D43F798EE0DD3FC02D26B276628633378ACE7D3CD04517
0F95D6191F3287E32BEFA87A839D70015EFA7FFAA12B256EE39F1899A0F1A13A
E321001D5ABD368FB7792298859FDCFC04820E2C57F585DA96CA166C0047D28E
14AA058A34FFA56E5DAE5E432EDB4222EFC2A63E87293390E2ED53A79B75E175
C64DE59E00E9253C9B160D225ABDE2A5529369A03D501AC6601146907D83D768
0C6CEDACF572324DAB9A7B6FA299812BC828B6E0B9EB9C83FE340EBE8F03A38F
43D05FD1B1DF59CDAC54CAD5EFF289A9B7D169B36350F6405A643AFA5FA54A1B
D687FD91FAD6E45EAA03EFFA83E84F9E953A912BD611825E99124389F65E0DBF
66CDB26E66879D869EFEBEFC3DCA6A8D6933DDEDA10171D4281080BA9F50E917
85711E3B419296237C9DCFEE98A7EFDA898E95F774F78F0959D682E13C4176D5
E5A86ECF2693940C90625D1673093CFD71FF2DA588399B10AF8971DD6C9A8993
94FF19037D8A673AA447EB75BE531D3B1B7E41694B03D9959B4266FEC7816571
2D78192D10CF9C166F966894FBE80A900AA27783C45CED390EBAD6D893DACB09
DCED2FCDDF7AA5E402A021411BFAD49CD62F83C6E32F6A21DBA1C204D4BD2FCF
4A5A0B93CC99881FDF09A9379E3924A26B286DB76B9F56167D8C0F3516C416BA
03AF61F982FAE658E188BDB36EF4B50F77F5A4AD07FE07EEA9F97EFB002CBF81
8A2B50712DAD0A53BD9B9AA3BDBC5FEC96D9AE9E3422DA16A6D082123A6A273C
184E496719A54E6030D04576A763849DE2447210C874F6FF9A95D8526E02D446
3AD45667B53A1D027129777BB56802707822DE85145694F4D6DA385489B60ECA
96559EC2AB0A689FD7A9AD35E79BFB6574BA23C5BC8F67C41E14CDBC3A206057
99532BAE1FD33EE749DC5CA4C868C094BE88B71855F6282481DF824F81180C3D
F89F1AAEFA49BF6F1E3384CDAE27F49E9DD53956A4B47759B680D45ABC17D942
30C074F160D43BF068C10D6F9AFD5F149516508792883821BB22E6B2271613DF
7982E97287956C9FFAA6A1C76238C4D8192B7963829012EBA17B58B154AF8543
39C59370DA9C9AEC6A83C30A70A34323D56D124F73FF91CFE5273B704A1EAAAF
6E9D46910539801393C3FF55A96331BFE725DD4D7F5438D7B87EFE37BBCA049D
CD6F8E43E60A0BFE64BCB9257A6D6C19DB0DFE2937634DD0B9B612199CDDB4A8
7DBF06DFE56AC88BA4381C92831BFD61B676F4FF319CD64546E560F1515875DD
9162752C73293FE05B5383C49AD96E100EEB267EEB8D7DC98EBBF55011AD5710
635340105E022A41D7A0D523C06678F931663CAAA896AF9D4FFF8AA0AE3DF700
E40C28EFABD4BA03F60F0C7D018DE4AA3D9A44E2D7AF48FA2D631A940A62BEA2
F092A3E45C380E879F1EBA09F3D11260F11B602B9F48832400850E2EDCE10917
24B0A06962764A671D66EB451DEFC390EB33C21AB0C2F48F82F9C6336D351A69
B88CB3D6E329D73961D494FDEF9E3EFE930AC07EF5549AB1D587C464B81693FC
BC24C0033AEF18CAA77C3E1F216F33D02958474AA95A6AAA2347EDC8E83A1771
73F2A93F60D8B8768E8FA6442B793D291590A381B143BD48B95250D72E01FBD1
740F7B3ED9A79FE6FD1A5E16B3A6395EE76EDC73CFF744AF97D7CCF83084CFF0
D019F1F131BD76E748078A88E853BD9A751F6137DFEA833004F468947318FFFE
992B3B2B1C8753E86C5FC40BB41394D9297AE0F532F49A93873CE97AE2F4DFBB
748488CD1BE8D856656281EB2D210E0397A5835504BE0F327FEEE42B483BAC09
D6689ABF61B74965FE75BAC7FC7A6812DBE86F3DC693E6A3105A8A41BE553D01
2754A6D029ADC5EB01367274B59FC6F2A799EE15D2122400299E1D502C4FC51A
EFECB5313B7F713716A217722C4A06C2AD4CFBF4328BC54E15C66B9BEF2A7B1C
DF40AC183179C30EA709E549AF3C0128B036D82B1A9F8D9EAC5120BF7BEEE925
6AD518B3D49E24589D3D46AA18829E285AFDE19C788B5C2BF115C29D834B54B4
64E495144D01E56DC807734B35CE28FBE3996E7DCBA58B2BDF073723D92AA3B4
EB58F6EBC3B73DB3C95F1BA7E3806A1534708C378F40466D5AC1DF4BCFAD1DF9
6F82FFCC4145600B49D598C4D9F57045BCEC024AFFEC504702002CF97B0F8E59
055A7A457FEC6C9A25BBB0636B8E4CC1591ED81C16A8E8B4138360A410A6C781
7D55874870992DD4C818EB9DDD10B6D5846434F37294723C825B0D6141DBDB78
A0491432D70D1417541EA61390913108145F747754CA79D8F6EDECE0E8BD8B48
E55D304B11B5017B4E7CB7ACCDDA8AFE80469C00CFB4C2F573C66FA03DF92D4F
5E3F8344288E79B2FBAE3CB6DEFB663D035BF224B6EA61C8CDD9758100ADD9CB
BB97E584D5F85E8CBE85DB16F4691EDD31135B78B5383119AB3704F849C2316F
95BE42F08A3A67AA53C4CD0B51B2211AE0E9313F4B66F62A24E625AF3230DCB8
85A1095DF657706DB32077063F6ACB3FDA289F09A5729641561D7AD08B8AEAD9
AF75A2A43084CCE18B1EAD9B4110333102E3CEB940813583EC09EF5766F00C25
007D304188A9E3D175616A8220A8D83DA5B505B5F326EC465D50D094AA31D13F
89A74D8550213E1A5EBC2304E6EC354780B61D6065BB27BBFBE0D970F75D8883
F59C4C51FCF85D95A91E95797161ED0E0F66F65C923E567B225E703D9A28430E
C6591FC47CE0E7431D2565F9EBA3B9318546BDD02D36CD00AD9EB380107A1565
581A5FF98FEB82C16DDE509CC7308875A44733503D4DFB43726576FD8A8494BA
A30F8C0F3266FE3BC28C1DDE65747AFEA99F6570EDE5C0912F7EE4A96379C955
E57F3A02DF9B69F620A60CE0A04EB773F097D8DCDA6E168BA9221228C1780DFC
6ED28FB793C3D9C3ECA83702960FA88B0D6952F979219B247AD14CFD0DE38445
754256FC5F537264C0D006978CBDEBC7D6904FBE0D6CE8FBA82343EB98B9B231
4CE4935EDA3270A103648997E867582A142A89B65AA64D0A0F1FF41447CFEDDF
EB25F63DA842A6235E343A01A94B4F28882C72FDBFDEEF6F2D2FBD4E421297D3
6AB8A7D831DE499CEB3C9522F47D6FDD7BF7665D584E4DD35D907DAE068C755A
7D1DCA5D48C817186CF4E77390D80B0CEE8D52BAE71F9CD3CE185CB98D42D400
A94461DDCC6AD816CEC368CA4EF2AFE35798B908F5087CBF8B4D7693BE05736C
A382BEA56E3EF92C7435438D4144862CE925D163BEA22381ABB958B4E01FF750
7BE4D608D72543F7692E2DB480EE39BFE6AE6E00456948BC4C4261AD72D8A965
064887899C110A23D2970B441E2A35AE083CFA2A5F140D8342F8EC352745F5F8
2837228484D0F967E12DFDDC54827C9D5B7CB54E36E6A5E529D8053700BDDB4E
2DFE7EACDBCA8A7F3C8F0C1521CD2BA8360AA2050D539F5A13E3370708E6CDD6
2EB5BC836BA4FCDD1D0C71A23F67F3E689B2B26247DB5A3BBD16E8873A811954
AF92E3AC314AF8FDBEF52517DCE8A204A24A2FC36B05E83849821D077FD359E8
DE829B03176768ADD400CDE2BE2C5C14D8B964B980FA031CAADF93F881C2956C
4250F5F28207671D7E3FEEB31A46EADAA4827160B800375848784CE927596DB1
D7F391E34FE1FECC661C05B430BB65975F5B4A6E200C668AAE2E394A21B05070
FCC33D46F9C2FE922A8DFF9E29EFDB2B70E64676F88660178B7B0C497981F764
003D85CCCB15B587A1B4927F33964F03B0B331DBC88524130625B70FFEBE287D
F97EE708E78C118D43A76D582650EF8767142FD66C35F84A671893F033848E67
D08709AF1C5E5BFA1E256EE5DAC923CC821B922CB3D690D600A83B33A8B638F3
F610618A28CC4ACEA44C5BAE3E0F2C80B41E2AF91D2D707E6F5C409DD6B28E77
20FA95A0B84A894016987D62B6EF971D7647937DFF15BA94B1E87FE23F11E215
234565C2D3B94A7F638C8D3E34061F9385348C498E5A68F3BC6BF940B24672F7
3C7A8459BB5AB88635C3E1B89948BE9F32EFE05F0AB5524286430D222CF1EACF
0056E7F6E733AE98A7BB53EE4D694987D9A8FFE4A0A9EE68CC87B7529181FEEB
B743BEA31BF8F5D86DACDA93E7DB66C9BB07EEE8B9372FCE121D8FE4FF405287
7522B643BFBF372B75E65D6FFCC2C2D56AB22553001E8335B238E1B400F441B6
27C895947416A78AEAF6B4684E6CA7856EF78B2E03A0269B0BF62D3CBAAAB217
F5B4C4178DD66BC0CD9D58A7A9335A29C98D586F5211B7DC6B86BEBC65D2D965
B2C0F5895C8F92698037332C718B17313FE3EEF55C3C9D7850F97A4EBB3A274A
153B9984C76EDE45B5D6F5A5F33CA31733E09733A7D4A853D99C635B23570A7E
D33F437F385B924C89E14FB51BA5B22D7FB2451D4A31EA1AB1E37F1CC2B577F6
563A2B05043D0FF84D1F2F7CD544A329ACBE29B7887A6A364F9DD44A4F97A21B
7BCAE322CEDCD02AC1360F2D4238B539BC80E89821A5FE6C48BF44B3FE1CC88D
DF9E06747F17C14C8FC935AA1E2EC698EA640F752672D4C6B94014647062732B
AE788C6E93A08D0ADAC6A25A53AA6722A42F260E4494FA899FF43EE984ADAB27
80CA144ABDFEA50BD7829E7491779BEA526E7DB3648DA533B77F21B03D8D3409
2CB9FFEE9C4BCA7580DFDFCD16805ECF58E32BA43D04F4AFC36788C3083BB242
A624B13C666A8BBA72F9A2B918B36E0AA2F1AA183BF679A1A86E19133BB0FF3D
DD591BD50B8B3F946DCC5D5582975C8B40CDF1365D4D7B25D72F6C4FF50C0765
F8EF31A8DBEEEBED91E9BE7582BAD97673AC1977D3B19D4130B686A72F66991C
9A4C428C3D33CD9618E154DB6EA731DE1A297D6A284F65DF8552047F06EB2CF8
433AF289140D57A2345F7B505EC40D1CA6CB491D0E5F26C0D00B886F36177687
89AC1A7462AF121798F939B0A14466651ACFCFC452840709450CF8AB68232C46
79A07170CEB26E9EA3F22C22C993407462E8E6CC5950E784B6DAF6D519908D78
FE779653101CF9B1358862A20B63B6C4B4A2D1569E7C0A36A874B1B8EB78A3E7
51CCD96F8BFDB95EB9A04F58078B2CA03636DDA52B7CEE9C1C40CC1D2D08A45E
0B6ECFEADD4B4B1BA1C001ECD5817954C34EF2A6C32D5B96E22EF96AF7C6793C
BFD47446A02C80A2298169BD16E41C05EBE31DADA8EBB3021793F7D29D3E17E7
8268E68763FA71905B11E2716E8A4DFA11738948B7F460EB4646B0ACE7D783EF
B34369F064553A8B2EFCF013DE198123B3ACCC888095F816C7D3D19F7E5D4908
3AD2E94A92117D05CAC8EC8DF93598F9DE2DA134FF86E8A76D1B59A095DFCBF7
9F7E8F84DB1517736EBB1573CC330DF822EAF99F19A291D7097A2D1A35AA6923
A0908D2D27C4AF9D94C2A2A6FC1E4FE330F426D4633D5BFD57754E6C26CD91A9
FF01A569197A4DE3298DB8902FB15513ACB54D72A6F8601A08C9E2C3B904846B
05D93A1E711B777F0C5695077C01C3CEE888B93E8E99C1BA9C6BB24CBA9354D9
C61A16A10B5766320E0435F1DEB4E0897425F065DFBDEA1646FBC7BD1FD5DA7D
362130EDD83DE01A7155501DCB74F4013A7AD1473E6701C98E1CCFB1643E0B29
A42349A79AE46C72B949992F894AA2814E0CCCA8E37A073D8E7FE2E45158F6F3
19DECCAE46DFB7E689C9F3C869E8157A489EC38075524C7200CE4833A2C29087
A0BCEBDE8EB89919D35F9673B05C8829BE252B3AABF45F253DE4C3743756F431
0B5864861E53E77328A58A6038BB37EB7C6AE8C677CDF4313257EC930F421B92
892AD2BDA74FB24154AEB359F7D8E966414B6D2FA8C790995AF6D0CF8C02CA2D
CE30214595548F7D099B38819E0CD319DEF0CF7C396EE60D59B1518216B1211E
15A3E61398F4C19B369CB2D1ECE14A0D14EC21435625C0134D9CAF0BAA99D2D9
3027B82A097D10DA30AE89D11684B7F99DE79C000BD55B5488859197B3FEB005
3D822FADBD441A15DB36A7CE9E136AEEC4002E465D4FD683A72358A2901BA0A1
9A63AFAFCD3E86D94CDD97E18B3CC54EBB27A8E4278F6B8EF6F337FD412F7086
6CD6B8CC69985203FC5A94326DFC9D63E7BA131D39AA4AB220777F9BFDE97271
A557F13A2EBF5FED549471D0E6407E1CAE1E0A8BD139E961782E667F66EA8478
2D97245EC9623F99E876A9F6753B327DBE0582225FA9FC573181275D043DB033
6D00E4DA08CDBA631CFAE5B21929C0BC1410CD68F49474858E6EB6B031584CCA
5FC71128DFF105F86682C5FAE3241E39257BA17B41FC053263D6F44E31010918
C0981987123B15EF926EFE3DD47A02744C904646F112EB85E4D2D0F7FF63254D
C6D5B33AC9DBA0382413549CDE0004AF46D08FC096D86C31E0F4F985F314396D
8A8FAB19F8028D87DD1D1FDD78617485BC44E54DC6CEE45F7B89235814AED387
19C9370979AF54DBFB372605FF64E9EB83525BC0F7423A3E9C817AC92BFBB5E2
838B6B7E880F3DD94C5D8E494BCB5E1FB1486464CCCE7D06AA4B9029D9BC1BC5
5A9695C40EB7B502341ABA904DAF37D828EEB36FA74318606C77461FB54E6B83
48ECE22D25640B9637C9D355916EE9B2B084E097D8DF6925A9A5ED019C8AA594
CB8D47B3D359D1F6B6ED013E755E02C7B61130D662EF3F4964A4FE7890DB5E5D
56CE361DB5CE952E40EC702AFD1E51B1F25BFD2D171406E655A8D22B02566584
2A98E6F6F4C50927D6DB0E8D1EC40C4DAEDEEC7D0D0F1C9945E847F8A155F797
16F9E00529E3FF2BDA0EBE43168D49F08CDBF2A12E504C927899E83ED9D4FCCC
C6FE7E4E32315E6B641825ABB71F33A4AF8B6D99CD05528A94320E81D7A3C392
841D62867C69C889A09B22CE0A66411F6FE1C7EA30F534A026A77A1084212569
AB56046E0AA46EBDEF77D797D0940C4336C73F79346DCA47F4812FA2EE0907F4
A3AEB332534ECC7FBB5A9833FCEC1FDF0318867AA6EFC25C627FA0ABFF1EC724
2FA864D9A49EF50E9C391AAA4214BDE313BA15724E558FD6AED912614DD0EF5C
D2059CBF82DC3F5ED92FE4D1FA7221B10D2AF07E59F3503F7B62C563A28D8707
F2FF0755D79A6C7885DD864D3119CCFC4033401CD0A06BE0A96C3657F8517C92
CBCA670FFD93FB6118FD7CDC27E719243DFCCC09335C3F20C384C3AD669C22F0
7048505E6D2FF224DA4C429B69324C26B4A5E5B41ECE95272E13DFE90FC97224
26F488C90A6FA28CC511AFFD3FEBC372566142FA545490A645CDA076804AF3E2
336961E535781736C0D62F944930A0611B964446898FC3D366A59249C22BD051
6F95BCF0FE3DEEF4DB68633901B0ADD2C18CB26A8FCFB61CC2570DA9DC9F61B3
BE5A3CECA168E931ADD63206710B7E0B25787EC10E6DB731ABF7F18BBBEDE193
6DA1B1629041DE4E26F607841848B7D8BC390A94A53F164ACAB47E8B6743A991
53A6583F273AA0E6E018512229293F188B22215F0E3C02772990A86B62E5364D
C18A20132C7CFDF6D63AB702779583953B10EF021FE63E65C536447E7A695205
C0956C3BB7E74F87087F483E487DFF52B4E11B6D8A6BA7228B4F01AA24A2D592
7D27282F90452ACE90C47E03C2040223D1D9768E3242A24227466B7080025492
0ADE4ECF587476DA23518AC2530D8652505B69C335DEB26FE8E89382188156D3
D019270D9D91350F62D05453EADA838CF7493AA69C31CD659D14057A3A18D92A
6337625A4E141720419CF6894325CBAF63A80E48C9679372CD76E380B70BFD35
C056B524BF927D66DDB78A5F1497AC6F92D087899229ECB911DB0034B7F37B8A
1103F045AA56B08A3E77A99107AE70383437521B71B570C109E4D6A65E737D98
FD4718E83551E30841C147A213A1519AAEF09D0613C153A34B33A74B5B0FBB3D
DC16E8685E265848C4ADD740D74522DBA54EBCD2B8FE3D4DB5BE4A28834F6E63
618C99EA70952BC4B63840D5DB3DB8D94792EB605390E41D5BAADFFC964CC049
C75E4AD676A1CCE5BC85D9A74E667F6D988BB03D178A0B1BE012968477342F05
B34E78C9C56531E89B32C77D565162B97F766F551D1DC21674584A4D6AD9A257
E9BFBD40305406182BE1773079429DC6F99418685BEBBC997E3213CE3F6E227A
633CD6A4710FCC9C028328B53DC475F131F5C46AC1076315880954693F144ED7
234D86BE7841197B6B2135BCEF55FC14C22FA5D1C81C977B6EB25D20A45CB247
DCAE2799EBA01A4EB48DC582E714D4F156E61421FD9B38122D49F30253E42A7C
17EC9B2A0BF4CFEB439A97787F0B7E5AFF502E77C8A8544717A2BDD756A479F3
09697BE09BF8706D9C344AC717C5517945754C87E67C132ECD756DEF623C5605
2FD1611C2BC882B773ADB5C7B4D22DDC3D9BF5E1843662CCEE6F35017960C107
46EA2614607F1A0A62B15A52A30FA3528B52A492078D22BE56186DD2FAE043F1
77F24F4B786278BE009E215BA7613BC0F568176AFB0B3FB9E445AF543D68A5F0
2840C7E3E2D4C5FC9A0149D2D7562AEDB399B20DB76C80C4FE6D06A819E8000F
FAA89D76FBF5B16D4374498D316FD185497878F9ED54117475947BB09C136835
58F8D830010BA4A175DD161CF02986C1AF6A604071A4CAF96D5534A66A89F368
B348F4CB84A02D4FED23B8067B61694BFDFDE220FB3111EBBE6CE7A81218C844
68F535F716B89A8379F06F0B060727E5263D7E15A747F448439A465BD0EAADE4
95B59A690975916B00EA374564048C4FEE21BFF6A6D5CBFCF7CC6FCFF380766D
8E360715B7F4DC6226BE3933C2077BC95BFBBBA94EC74EF68A19F44466DA0A02
6CD8D3A6145BFA22F6688D009198EAE9DAD025AFBE2A3C56AA06D459C9DC98AA
904A0ABBEAADC9D59A1240C45D16AD1CCB28A0269A41C29D7F128AB26A882CE8
2D37181974EC3C31305CD9FDA3248FDB7AD74F213AB23113A324AD94B1573CF3
AAF2DBCFBCD35C548D0F326402A311078DD27B053143AC18691582B4336E566D
61BD5A1FD7CF5DB00ABC672275BA14734FB3A5BC1EE0C0958BE057979F0B3973
853190DFA6C402E31AA42BC1F73A9C27B4268295B3BF1CECC2745119E9FF136C
7864BF8CB02F21D7D880FE57612EDA09146EAEF465A62921EC7D9A1F162F85EF
9659320F8D816AE4E8746D7369EF4884F6220F154D17B7B7479F7449F482C8F9
C1FF37840C852216D396D08F723435BA336EF8ACD8E28AD629DD4003C1050C03
6A44E1A13B2243EBD68972B2A3D922710246D3FF12F9F0B5CAFD22BC6C3F8A3D
F81CC4D58A4F5AA634EB70524C7D9C7A86D2F0F7D176D018388E664C67F657A9
BFDBE1A378C5CB06FA88D773B8B788553C2743451072F539F0210304BBC38207
E633673A8A1592DE66E07178D1AEC51958A0BA23DAD0827E94F033C748D9C171
A20CE2324A4703C0ED880E5D4A83125D832747B43B4A108BB375D1C59D87480A
330E7F32D752AB35B5E48370100ABA5CC981E9175DC099084C722FAC1A7C56EB
2397780C674976B86A7FC211D2DBD27C99C168658B6F7FA259A90C4407435433
2ED132904D1217CB3FD26BA3326C58ACF83F8ED1BDB031A643FFCC223D807EFE
E95588E04EBA60E99838AC096CB727E940CA1C00E0E61EB4B303C51CA89B5349
2D8D32A4162BE9CA12B2428C78FD992DDD3698BE880839480F8C4F643EB110FA
757C14596D0BDFE69A05A7E41E888AD9A4E4D717B6414D9D0814CB964A65669B
C37A8B12398D65831A5E80C331B716BD79E6E2A40CB37646C3504EBC5089B10B
501ED28F34D5C77B013689BD7CC862E8DFA493C5A26FD15CE590DC55627C75FF
5A939C08D19CBBF218F190EB650AEC399AD4580A8F92EE91D8CD0158EC170100
30F1F9FC08417D1E227E500327AD9FC7D808D434FB9BD57F94D39E18636E01F6
DEEF14BF204D9A66CF96EDBBC5A5DA8C7D6B734CA1E5864F4E677983521311C9
FD9A53C43A2E1A112EF0BBA80EF828CB64F90E6E4ED090663C24F857598DD76B
FCFE3EB6001CDF982C28C8815278901010CAD1CA4DAFDD29F63FAF481009BBAE
BC570CA5310829BFA554A1BFF7F7125B6940F3F89599D349A19838EC95013048
10E7B9D4209EAC7B5651DF4301287CC92723B2A5F9285875CDAC7A87B57B828B
D7CA5792CF194CE2532FBED2A682AD75E827C8BA1874A89CFE87269E636371A3
0D9822ACCC16BE8296748CB8D64713A9C01DA4723B706D5EB5275D43CFA03BEF
4884520EF959B6C53C21E9C0C82F56DFB4E4D507889292851CADF22316F2BD2E
59DDC56AC9D9F7F6175F3D6FC06DAB41C98C594170BBAE4A4781CB56C8611E30
245754AEE4FECA790319501860477E0CE12CB2065B8B5BFAE29BA96447198373
DB42331DC4EFF11C964EA054D45CB626D1A339E03FC72028022F1174F933B020
3E545917DEF51EFD1255B0CC1C66B7571F82BEE80E63DF5496E0DFCA9C459D0A
C7A10EC3E8A2E93D36F8E24F496591332DB7897983813A7A6F6612
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(/Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Quad-001/.texpadtmp/Quad-0)
@start /Fa 134[45 121[{}1 90.9091 /CMMI10 rf /Fb 149[25
2[45 45 80[71 20[71{}5 90.9091 /CMSY10 rf /Fc 194[71
6[45 45 45 45 45 45 45 48[{}8 90.9091 /CMR10 rf /Fd 168[91
4[66 13[66 68[{}3 90.9091 /MSBM10 rf /Fe 138[50 6[50
4[25 50 45 1[40 1[40 50 45 6[55 31[25 8[45 2[25 1[25
2[35 41[{ T1Encoding ReEncodeFont }15 90.9091 /SFRM1095
rf /Ff 138[50 35 36 35 1[50 1[50 75 25 2[25 50 2[40 2[50
45 13[50 5[83 56 10[68 10[45 3[45 45 45 1[25 46[{
 T1Encoding ReEncodeFont }22 90.9091 /SFSL1095 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -442
a
SDict begin H.S end
 -136 -442 a -136 -442 a
SDict begin H.R end
 -136 -442 a -136 -442 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136
-442 a 0 TeXcolorgray 0 TeXcolorgray -128 -327 a Ff(Matthias)31
b(Linh)m(ub)s(er)884 b(Arb)s(eitsblatt)31 b(Mathe)852
b(10.)30 b(Septem)m(b)s(er)i(2016)p 0 TeXcolorgray -128
-290 2008 4 v 1880 -290 V Black 0 TeXcolorgray -128 -128
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -128 a -128 -128 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -128 a -128 -128 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128
-128 a -128 -128 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -128 a -128 -128 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -128
a -128 -128 a
SDict begin H.S end
 -128 -128 a -128 -128 a
SDict begin 13.6 H.A end
 -128 -128 a -128
-128 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -128 a -128 -128 a
SDict begin H.S end
 -128 -128 a -128 -128
a
SDict begin 13.6 H.A end
 -128 -128 a -128 -128 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 -128 a -128 -128 a
SDict begin H.S end
 -128
-128 a -128 -128 a
SDict begin 13.6 H.A end
 -128 -128 a -128 -128 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 -128
a 0 TeXcolorgray -16 -36 a Fe(1.)p 0 TeXcolorgray 0 TeXcolorgray
120 w(a\))p 0 TeXcolorgray 46 w Fd(D)25 b Fc(=)g Fd(R)p
Fe(,)120 b Fd(W)25 b Fc(=)g Fb(f)p Fa(y)s Fb(j)p Fa(y)k
Fb(\025)c Fc(2)p Fb(g)-128 -14 y
SDict begin H.S end
 -128 -14 a -128 -14
a
SDict begin 13.6 H.A end
 -128 -14 a -128 -14 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128 -14 a 0 TeXcolorgray 169
5701 a Fe(b\))p 0 TeXcolorgray 46 w(Zeic)m(hn)m(ung:)2174
4284 y @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def   /showOrigin true def 170.71646  0 -170.71646
 0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave
L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart exch
def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true and
or { /viceversa -170.71646  170.71646  gt { true }{ false } ifelse
def /epsilon 0.01 def /minTickline 0.0  def /maxTickline 512.14938
 def /dT 1864679 abs 65536 div viceversa { neg } if def /DT 1 abs viceversa
{ neg } if def /subTNo 1 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -4.0 4.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd 1.5 2.  CLW mul add 1.4  mul viceversa { add
epsilon sub }{ sub epsilon add } ifelse } def /logLines { false } def
/LSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1
add { /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 0.0 512.14938 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 170.71646 0.0 -170.71646 0.0   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  } def   /showOrigin true def 0 512.14938  0 0.0 
ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave
L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart exch
def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false and
or { /viceversa 0.0  512.14938  gt { true }{ false } ifelse def /epsilon
0.01 def /minTickline -170.71646  def /maxTickline 170.71646  def /dT
1864679 abs 65536 div viceversa { neg } if def /DT 1 abs viceversa
{ neg } if def /subTNo 1 def subTNo 0 gt { /dsubT dT subTNo div def}{
/dsubT 0 def } ifelse -4.0 4.0 /tickend exch def /tickstart exch def
/Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0 
setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd 1.5 2.  CLW mul add 1.4  mul viceversa { add
epsilon sub }{ sub epsilon add } ifelse } def /logLines { false } def
/LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1
add { /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 0.0 512.14938 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  [ 170.71646 0.0 -170.71646 0.0   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
2151 4417 a Fc(0)192 b(1)f(2)g(3)g(4)g(5)-1497 b Fb(\000)p
Fc(1)-352 b Fb(\000)p Fc(2)f Fb(\000)p Fc(3)h Fb(\000)p
Fc(4)g Fb(\000)p Fc(5)g Fb(\000)p Fc(6)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
