%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: /Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Aufgabenblatt 4/.texpadtmp/Aufgabenblatt 4 - Quadratische Funtktionen und Tangentenbestimmung.dvi
%%CreationDate: Sat Sep 10 19:11:48 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFSL1095 SFRM1095 CMMI10 CMR10 CMSY10 CMR8 CMMI8
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -o
%+ "/Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Aufgabenblatt 4/.texpadtmp/Aufgabenblatt 4 - Quadratische Funtktionen und Tangentenbestimmung.ps"
%+ "/Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Aufgabenblatt 4/.texpadtmp/Aufgabenblatt 4 - Quadratische Funtktionen und Tangentenbestimmung.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.09.10:1911
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /f put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D593104140E6AA9CFB0
4E0B47C91E504BB6A95B2CBC36EC03BE01897C3D498EB30FBE4BD9584B9D766F
CB3CC7C96FEA1D49169F89E303F37ACA22B9C8DE195C735D9A1B34C733631EA8
67260C7DF410BF3799C22230276E6C1C9427B1CB8DB78A35B132D3CA7EA05347
8FF61F131FAC28AAA825C2413CAB01E9EB28C36663AE5594DFECE6591BF956CF
77D8CB686EBBDF0AD53D679CF656FC41F4DD7F3877EB46D5011E368390749C00
92D5AD6B21C45E04F003BD996832191F362B99FA83E1D7E6385D815244D9865D
697E6290F02207E53630B3DA16D6E8704B1F3074F339DBA6B5C2B2592418A866
C07FF3069F0CD90C515649CBB287A0137C1A59DD44F25B01CF67E5F054F3B148
2A7C85AE3F176774E24BADBEC70EDA7B234163E9826B23A433121E1166F84038
FAA73307A1929E4D459A6D0773C78D211532AE04EA31B563D09233ADB3DE1D5D
69EC544DB3BEF633E13FF85FBF3F0B45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DF4743FAE6668B61F72C8700992755522AB11C765981A9BEE0D040039D
6C2D64ABED527082C97CA606127AF5C0C98647BF46AB8149F215BB0F1087E62E
740D8676CE8A486096DFA164A37E97EE630B2A16FF4BCF31B9A630D93C278ED7
6D6003D463C33B8AB5E8BFB9777F0B3D3243D650AC5641B91082A85801F907A1
54CDCD22CDDFA0F5E255F1F7E04A621013F0F3841D824897E67DFC2F5AE51C4D
36411D26424AA9702018C26AE65120CE396C9B001DBE259A3638455C3F4949F2
BB23F04E53097AC814F9DD04F0F26BE3F8C2118311C916D2FD21628BBC018A31
021BC222B518F904ABE96333EB8A033D13E80033452B2F7C8F400CE65F0EAB91
81EF6447CEE4BB024AC35075D24EF62ED3E393401BA04C01CA115E0231AB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D491A1FDD60F7230D5D725D21F531072155D5CA
12045C71F375116E93825D964FE24E272B239E8E12DB85368F11963CBB4E2B4B
EA559F6A1FED7DDAE902017290E4549337A9F6CC3109F1F858213AF70573323B
78B9F56D9A2D6E6BD0FB038E6B0AEB661D95D1669D49D7E93A21C76C8E0B29CA
73D10BB805BC9D2D488FB292E1D014B47ED472B3DD4819A2CB3E370EEE819BCD
8C722A1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 58 /colon put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
ED277A492B42D88D0E068D61F2BEAF96BFE7F399175DE7D08981736F7DA253EE
331F97DCBB941B1832E3FDBFA7650E0905E062516F27090476AD2FF0CA78B14E
13CD9482201FEA5AFD00A134F3C357412CEE5E264C20C39E157567538D94E69B
6B7F3EC896D42594593A016CB5FD306F440F6739C7EE88132663A1B1D635E362
5667C0843D4E8E1C205588BDD46FCA71692EDD0042913BDAED8DA7D7C8016D0F
B9B44B7EE36B8356A8740617776F18D167F6AD72D8B006DE3E4BD74C1CA8891A
8E08C09A601506D57B5EDC2FD998E405A987C4205CAD91AB441DD76337F8E54B
79142482B2FE7853B7960061A6C420A696A0C47538C692108055EAC99DA91CD3
B0A2B7AA4D3E1CE749165D28DA7E2AFEAD936AE066ABFFCEEAA68E1B41C74CAE
CABF8616AD95FD9ED3B11C918BB38D165644346F51053A08C551220E93385C29
C2E8B76655CB57458FB78C6ECB6460A281A80F502523BC02292E1B8125409C3F
A734449C3B34DADF947075BE99F21B31B00EE34F824317E8766999D17EAC8B28
132D2BCF954CD29EB760C8F0114D19D4BA0161537A4B2E556C0B64CE8AC122B1
6BF9132830C8F4EA9DED9CA2889A38D1393498ECCDCB076A6A7E850ECD3A062F
050B7B9907A9F37C84D143DEDCFB27AD763C746E1814DAF381905B63CF391ADA
2DF440658BC5CBC9F250F58B0661DD335E29F1931A004EB68BF10930ADD30B07
362F8C9C7F438CDF8944DD5A06583A75079194054F8C06AB22E36F01DF05AB58
428703B5F8FCF7156859F1497DE012A4ED81A8493B153CEC0FAFAAED622EF190
69ABECE38D053D6CBC34EC86D24A93624C7942CB3D9219D488F9FB992F7B7A7B
D6B0C8950170438A606B36244408FA18CCB93DDF370452380862FE3E7A56C8ED
2CCE3405EE642ABE81E3472653B118594A55413B373AEDC78AC0CE9918EE8E8D
4BBDEF36BCEE4E5A0810307CC13A1050AFDB5FD2070031BBBFEE555D5AA5F991
98A39BE62AF7CFBAB277B8A66C8413A9A6E77EFA90FBE923D372C66C011F8185
503029B9A61F274BFBF372840036E3D1E71C93111F531B0D8E14F4693132B7AE
3689C9C0F4792251E945D9890F48F7DF5D6DB3041CFECCC768588BD38F0FE2F1
05BBCE98F9D7C545BC4D21C7EADB5AD309E2D327457D09F349CCA0DAADC0D6DF
BAFA59CBE6E358CF0EF99B5C327AE5F182B0746F03A829573C79648B3F5FDC32
1715A82CF84A6734B92BCBCF272663ACFD83E27409C51837E5267BE5FCB0B209
B090009718A49C6D7256EBE0D9745924E9FF4B42159E5978724D0874215B49AC
3C1B0CBFB782A22C8D118F3CF7203C7C0C191B6A7AD6A40163EADDD822C4806C
9910021263EC419BCE1D8335EB8AEB703BC7366ABEDC1825750DBF07753E280C
98E1CDDBFCD51A4E1260CFFE758ECD59EAE9ED878D01D1DB809BD0C73EE2780F
4950CF5CE88342AA2D163F8CB3F156C524E15C7E5DD01D84D9C3FDB218240688
CC19BC6268B672E98D6D3A64C4D3C3AFAD0869003860BA84717637F4F62A76A5
95F3530B95CDACC4AEC4FE6BBD3DD789619909A6BE5CB9117199FBD2373596A1
7067ACCAFB470469798AC194B31AA1E693DE59D4AACBCF495B87FD9F369D73E7
7F12ADBBAFD83E00F8C3934C4287B17F5613AF6A0821CF81AA3BD93F1BE6A390
3110F1BC42EC5FFCCE6840E8ADC084E63A7C5E3539778B44311B287E25E91899
1187D441F2AA90E53D3664E935796233C8C788C31A5CD411A5F5CB07C3C1B6E6
244E5CC893BEAB521275D0108121C2D778E1B9A621CFB33D7C6D034EB8530AA1
84CA8A5E111CCEC5C9A28336603006289544091C3074E04673F0EF8CB04E56C4
8DCB22D8F0CA6C633BE68E5977EB3D8814797F8B2CDBA530E9795CBE691C141A
143280C65FB7AE16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED6DAD94E2106
9ED4EB4830E5E1BE4EE7195B46506868D55FD5EB73B9CEAB98A5E5B24B1B627B
7A8FAEC8F3EC9C31FCC01FCDD51BD6740F4BDE2445C5EFF77DC35F44C8512CBC
8FA98A881F22B81F1A7B42568636720906512FE791EB65AE23598A51E2CDF771
4D94E9ACD216EA735B2F76F0C4E334DDF73F19B5844003D338E64936A4598304
1115DB80EE611AE48CE6F5704933C66B72A26F7C5BFB146E5B38643081A91DA1
D968D3C1006E04619B81578C0EA3C3A72402DFB9B35C8E57DBF786D7BBDAA2A3
5EB13FD17790793B2B4A9E06AAC219E83AA5F2D8120ECA4EED74ABF85E3E44D2
8B0ED17EB1DA256678EE073EE3098DC9CF8BBE54D707AADB342489D3D1F1EB2F
BA7391581255CA9B40078FA34A0AEFC1EA268D4264FA4C353F3BFB7C57E0A3DE
CC92CA0B94FFF36761C12C014AE3D87EE4EEB24124B9AFD953121BAA5F9D9225
C407C60A015F642EA2054C42B33E7D4B7DC3718367C52B836F30FECA7420BC0C
BD6033CA32952BD67B6EF0BDA8CE6C8BDDB68BEA346956FC3F24FE6E6EC301C6
70028FEF178AE85EEF9EE1021CBE099ECF330F033AC321D463A27632AC5B4069
FEEFE9BF03AF9D84DD2AB94847F33A3AB3757D25245297A4BA42AC9083F142DD
EA2183744D33C42E5971F712AE3CCBA5E867BD53A467B00F5CE8DF21D44CCBA5
422AB89E041D629DB8446F058199B31DFD608B2A689808E7996210F99DE85EE2
81228C7336E07F1EF5DB788DABE303F21C10B6F8E9D1D9C9580B3E2E7A533BA3
15FF9A90DEC4F7AEDF1C70BCB7143D09AD206821C4B1ADE33FD14670C66F070D
8CF7E7607B46FDF3F77B9282769B4DEF9D348B8C0AC447681812E3B8E60DDAE8
8E34ECAF5F6E49A777D15DA87D810AC3F4C9084BFE13F58D0A5B2A7C84A08978
07AB1C2EF7456BD69201F8BC3012053AF9EBC8C8A36F19DB4EDEF3CB69F639D5
89612C93B39CA0EC2673CFEAD8AF1AA71F5F78790CADC3AECD739C9CE1F1C151
4F9CD093D67CC8360EAC6225B46DB08DEF852D27A88EA10384A1FFDD0B09DA12
602F0551A8878551B31ED1B3E7277F7BD77C264CF6D180F81130B117C271C457
2A3D7E80445D08E9972AD5861D0184F4956D390B8F3864E3E97D6CE7F8EA7B20
7E93EF97BAC0C36958427BE239DF0B84FD4BFCE671704C3CA293201BC6325B48
8EAF6C939D97345FC55AA4EA2A2908FD7958E24576315B2D653CA1B7E81AB3CE
61164ADB878AE544441192B9CDA2094917EE0F96ECF194EE06B24107DE2666E4
EF21CAD02825CE699D137D713EFB4088EA15DD9F11FAB0172D8C23E0AEE734C2
F0A60A0AB4D4C9155BE2CA1FCBEF057DEFE3E926F791C189265DBDF33BD31C31
A1F559BF283935FE5784D9C1EB2F6FFBC23613348E35D3BFB34BEF7CAA3EF670
6B4B18914E79B99C5733414089136F1A95D54B83B71AEBBC1F76D553DBA40372
FD5B0955EDB254C248BE4941472E624D3B98CD6F417497BFB6CAE5E72BCB4D17
8449CDAACE8D7001935C9D5BA5FC62CB3139A2C7E5A3DAF45B621B367C7EE8A1
88155869BA4EE24FE0962FB34772A41AA5374A0D86D4F6C237354B7846ED68B3
B097684EEA55EBF9889B8953C50A8CEAC270DEB8C31040625AFD62F056FCBA82
F6F4101C187C3163435DBBF439EE665CEB1A5EE17161866AADC04127E496B57E
2299115B8D7170E4A72F9019EEBBFE487A59445D332D0857014C42D4E71DAF61
697E6E7931431EAF094A728841A7E36FBACDFEA2D9306B6B61D1E2A3E5D62D72
D2CBBB7A83A220942E8DDD979C3E8BF4A81383C4F46977879ABC5EC8013BB3AC
ED67DF685041F4C81B019C803647054B8CE9425D907155FA38F55E8F10D02D79
33BBDE75A550CCF072641C4C7DED92148504CA8F3BE3CF03FE0C88435335407C
5A8819C7F63B3F71A53AA3AEFF60D13AEEEF362FD5CE88127EDAEAAA67E3FAD5
B902D5D0607BAD29B965625EEAA0E8AFE6C533C3DBAE0E87EAC366F1A2338940
66DE2A8FF1E177F6706A00C92BD417768C50700DB73B8CE30E157C9B88FE0582
FBD9C3D976F5A16B31C6EC9686B3E48FBA814931C04533ECDB55C198934FF5A5
DBF3EA700ECE9D6F8085E8C1DC8C1F9EA93EA8C916E34877D3C93C6A3E749A53
05BD117C168B99728B3D03B725A59C6CF3F95B6D8B124F9D12B65BE2082581D5
C97346B6C304A16E603B9062A17AB29C9B96A291356B484A1EC17EC8CF89EA93
B1C20F67E0D5D3B016E17B8CB29E4A1F33F0EC3D80122D9DED348620103D10C3
1B87561E6E4CD95008799984BF406BD83F21EC26ABD065213461AA59F04014FE
E2AAD57670DAF9712B197353AFC8D7A4B42851E347F8671CB5B8CC5620603F66
0CAE352E607A119FDAD998E4AC409026634703380DE4CC6AD0EF54DD6B9E6D7E
71CAA23E593790BD9F3D10FA4E6D57C70DFFAF5652ADE0EAA81C576EB882BC03
A12D7759447FB5B33C4A551B3CC446B370EA8D90767AEF325F690F263D604E53
091F7B7D278A7BBC33A2DE2D72FAFC885B68A31049BA6238B49F95B7B340E60C
BF7CFE5585BF9D4A4F20B45644E610A3C02DBE77FF2B20CB8DC5CCA87E99E08C
8FB0F2DCCB1E4D1694766AE551CFF724F6C93FC366133F0EC680D22B58EE83C4
B7FC0CB78D642FBF8B6B6229CF94A4AD8B05916C019FBF0C1C42C015EEE13BC3
B6511A7E8F0B6101DB5F778D11642474DBC51894874EA1C71023CA65D64B541D
58EF482D288A6F3C5735C1EF412F99DDF39A6215D925E4A7CB6A028317083CDB
46B47816923B6C3B06C1AE2B88530623E0732600840C058BAE95
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 102 /f put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D91549542CA82FB12E
0A107D92067C0D90197C0A70CB20FA034BDBC225720E21956A2E033606F7E36D
18A24B26CF66F94D8E20D196966B7402A05FF1454730E56FE7C4AE5B23390A24
5297D862DAF3F46F5EA436657450301F67F7CA713666AD3A80A6507C3CFC1983
D869DC6E642966BD0918D40C9BF7B8C245C030C9E4CB9E173CF7247EFEBC24DB
5E8D650EFCD3E23115FB86A301AA2ED820081E3821F2267DA4C15BB7427EDE2C
8EE6865E1CDF533393A0F9D4BB238F7C47C1B17E85C67845202E21D93209AAD3
5B0A92343655D8DA7C5F1F9428B8907481E3F53228C9FDFCAECF1FD98F4FAA35
EBAF75962D9CD0E7D5B397679B921682EA4168D3A3746B5A2F44865A264E715B
46CCE5D82E90A4B073B8534CB9CE86B736B5B87D2BE6E979F6D4D5A4643AADD0
947E6CDE68BBEE537C0EC54BFA43ECB50E86197CC269EDA06B6617BC04F57018
B56E03FB1E566C9ADC5E86447A84AB159116FB4DD5A29A4C01B3345BFCC659E4
7AA58096AA3488E01B0CEBA760E761B8686E408CF45FDC897C0C3A20566EE995
C1D4C03D441F19A6347A9E8BC11DCD158178B56C4947AEF124F4EABDC1D4E61B
FDE5481E65C5F2B3FB42BFA4FA3B5258272FD07C2BFF30EC4CA7D5336DB6E5BB
803A89168CC86559D03DDBBF4115580C8EEB974722A551DECF734A33395B632C
94BFEC257DFBF92C5C9D9406438A780B5183888CA62CB1B656D208F16FA60327
570CBA4DE57D1F99C2120493C76E0E28178E8ABBB48DCB770D8F79C04DCCAC4F
6AAD698B10E91DFD5E3FA91ECCFE45368EAB3E5F394EEB0E1774047E5D086B44
9C1B273030910F6BC850DF0E7A06846D6136E58A4DA1ED8D667420A0B45D60B7
B826C5562C3EDA97663A9A346C5CE180A8C958D23C25C9D085925908B8962BA1
876F31BBDA262DE00C3912083CB4D4E4E413A393439FBC2D4EC1E95038E9143A
E66CAC612F4275188CB29B34FB356347D78E880B23839DD951817B49C33C32C8
C224174A2A6EB07B07D0852240509D26C65A2DC7EF04AA53FD8133A8E4027708
F40B6D01F9790140C0889F957436DB71AC595DB589F99EDA82EC2453C76DA0E3
558825F1EF11305363D3F79FA0601ED4DE77971BA38DBE1F248D9730CF4BA2BF
18B8D4648DE45032310CFDA38AB27DDA958F30B3E71727E8F1F2F74BD993C078
EA8DEC3FFD614CDF1CF783FEBA39A87678B2D890534925536525313E9EE038C3
7A2E55F11143807D6D97AC0D56908BA18F28D09F265C8AC1B2C694EA7B5928EF
30028E7FC8D77E2E9B10B0A1D1A77115759D6DC5FE4161F0816BECC924EDB112
4C3F7A4402468F7C07123271F6831623D696B6BD979AF5CB5FBB7F06907FFABE
8EA61F76ED0005323F3903AB049CDDD2A164827B10E20EDFD76AC6EC1EA169B3
F030C5747D15E2DD6C6B660A2103F83A407F809891B6CB312A54CE3569A6FE88
F8248CB58A957D3DAE33E42551F7F32A6E12785B6005EE8E1CB44167B195D5DC
0C189258D74D481AF0C101BDFF3B57FD2A4CFB2529655565F41766A780393D54
582AAE6CC9EF04DFDB6455D64BCEB8C403438E4172437642647146AA7D17EAEF
3B08627E49658955D1485892ACB65F5B725926CF896DEC6509512A051EA2EA14
A5ADA40079F023534BB1C705E4BFB56DA50B3C9B5215BB3604257E10110449D7
6A229D3B72047E08A88D869614A5113E4C304FC67699360117BA30A53EFE30D1
900278782CD5ED71834C835DE6FCB0EB70F2F982621214ABBAD2F3482E20A72A
11576AF9F9CAD7BB56730D4427736B253FE1C66BD63C5BF103CF50EA821DD925
A8B2258E79B74D657A328BE84C329AF37013014DD51E563505580B092489D0F5
225CF76F0E3CCF99480BAB8B6246766D5DB5803EDE71AC849F2317D20B2FA485
6BEBCFD2D3926154605BA02F7CA5D80C25E2FB88087EFED256E5803BB539CAB5
AA9BF58B5D439A69A6F2AED6BAD448E8FF1EF9764273D8553AADC8406E89A0C6
83553FD978B4EB2C8DCB3186C57232BAF779E8AFB87482EB40BCFC454E3555F9
B7D975DBCC0FE000F68BB98BD90A82BBDA9E80CD4FE87705515744BDBB9B7E89
F09203B5E4FBBB5ECB3FC9FBA704E3CE52DDF950137CF892AF8A69C6ABA29533
DABACC7F9F0BA0817C8F11F618116986517EC0D6A13E1D35D20C434BEA10040B
23EC7B489F7C2AC87F1688BBEE1AD60B5AA2E3DF4542713E8FB04DE2823FF43F
D0CABC744B23B802B4CB7A27F3EFBFAB6FAB9CEF014AF36AAC1E1E860594030B
26907E5E8BD7A67BADC7F8C068135652019A6CA80B018165F4B2EF5DFD7936F3
29E56D1EAEF97FAEBA361FB68FDADDB0FB08482474EBBD3904577A0F03A479EF
320BD68F0E27F452AD17EBFD4FB2E7DE659A82042F27F0360A7CCBCCEBE666F0
F3425A6FF9EE2895C499FD23A90315250CF014538A1D2A51258B4E0B2A865883
99FBCE56925AC066F9ABD58DA35CACC7AF5CD213617FCD41EC9047E6FB8D6F56
7F7132E00C5BEED99D4CD7BA1D24A329DE5225314EB95F4AFE7125E7DB0EEAD6
1A9A61E3D184CA516A265A9132CA6A4C83A24A38FFE83434ECBD695EC6B28125
7DCE87748086AFDEAAA7BF9274219461BC51638070ED40A5A42554009C3B2651
B8316D26AA72C89923158286B88BE5290CCD13F9EB4E4E5461DBF7BE877293E8
E0DDE08589EED83BE77014518A900A1791BF6749183720F4AE13FA3EEC2BAB97
EA4006F779CAD1183B43D438CC3CE5A31232C66486BF63C6F85231B9A8557410
77A15FC269FE213DF095CFE84383252C68F015D780E05B1C9E706250C70F4354
3848D56F8D844712FBDEE7389C078A9C917AEA39D9A741484E66CA654449EC56
8E7E59DE72CEE68DA94B598243E7286931579A0A62CC4E060752D104F558C3B6
5DEF72C6FDB605CF2156A91F5222C153C9D0ABBF6EE600704C301FF012D833CE
2BD3224888B9FA4395DBD52F93FD7B7BCD2293B503DA5AC14A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A767F6A99C78F239001C028002478AB
E12A94D59AECA66F54951972795B4EDE80F67BF746E85C18F990C54B1A2A148D
DB41E49F264DF5FC0C890B501E1DA1C0D5ABBAB86B8C3C4BD9808AD436AA8DEE
050F18E90E9529CCB017D9D48DFAD3F8C2D69C77F37924E40EEF507C2069ED41
EC4BA5059F9A8983D858523953F8245D2B8AC53C60CD071C47F6E34CBCCC8B2D
D96ECB3D65C5F091826733619122A5E291FE16EF8C01FB54EDD95A82087F4E69
B7BCAFCC13B34B86F06197BEB2C71851C9B20DF35015FA19A6504D71557DA3E0
DD04D29C5BA37BF4193E5E18DAD2FDB2979ADB9D6C366646D36014824C1C2F4D
025709D28EECB76E4174BB1BC3F72FA9C2EBDCD2C65D9F14A564C797BD18BDAB
08AC186C5F47D69FD39E64A06B4B504C39936B614ACC13DED5078D17D2407154
718A61C721BE6785A1095DF65774AF0C2948D7538FB7D67082017D7EC8B32CF5
128FA693826271DEC0EDA53C557495692F7B0E0E0D3E3FF519DC261C5351D84A
AA8183977E81114F7C4B5CF140E0A0A26F922D82126B82CB98FB5B5B4F9FB617
30FE3F39C338E6A47CBA39AE6DA19468F81D40609F4EE464B575136F7E638FA4
19163341BC089FE680D9B2751763F16FE1D2F94B1FD2A4031F48A018862A3CE0
7B58EDA0D8A78E9B513CBADCFB1E70FAEC4A07E4E8EF03028F94B76258726C1D
E837680ED06921532AD45ACE4C06C4901855BCCF6AF9981C72DDA4E05B38314F
6AABD8D83F138FD8B9B60041F594E5D19383B2D7E34D4C9132C0AD46595DA14C
0C957747A625E5B585B02DE4D608698A04F0BFBCC4D3B59376AC64AE71ED4545
B07D057F856AEADC2441A713146D5B42D12EB8BC77822B924567FAD1097784E6
CBFB994D5B786863CF103B0988F3E22889A3E4D54BBD60D94F41C22B5453AE8E
086D0A3FDE5B518FD143DDE55E91EB1372010B1F1AA68FAF1DA06566EFDAD282
1F1EF08F815DA9FC81DB308E78F05DBA387C9F061DA8132A66FD0E8177B9BDFC
D593F881C2956C4250F5F28207671D7808C5DB8C916D3011D02CE45BF5E62E68
BE421D2EA0B2B90B9B8A38465533F2651C12BAB103BF99421DCA2A1FF4A14E49
3D274880218EDEE4A0E3FE7F848D35BD990E9B78FF583B35C8F097D8DCDA6E17
B96F08B9F29B0D513675FE8E849CF8FA4608C6DC073673C30F5ACFE803EEFA0F
9DBF7E8CA24D856793833B89F87E115F59AA2BECD6D87C8A89D49A6986A70B5E
9C5905E11A83282256B9EEBAFED19666A942EF50730A103B89A152596DD03EC2
262FAE9A22CC60739504BDCB140E3F6A5CDD3C57E071F52B765F40D1A093ACF9
C19170BBEE101A6BB71B3C3FE0F42DD3284EA715800AD9A9B7AF56296934D03B
ADEFF00F316B9337EC2889DBFA423354D9F420228D72FDBCD7F70E20616F63B2
C0DC1B982283844BF6CB1641369CCCE9B39EF5FC9348E2F27500A5BF924B7912
38D3A18283F6E71E56399E56944BBF51C1E6240805C3038A73D497F7B3A68BD7
913FB25C4E9E9AA6A609C574D48ABDB27598E5EEB4FF890CE205FACD0CA88982
82CB81A467595AA040632B8B3659AB24DFF6BC7E759B86E08B5ED6823AF1C31B
704A25927BF4B58EF85794BAAEE4BF03E66F3D808D3FFA87CCF47A4F591065E0
4F45CFA1B0CAB9547A683D4CA6293C66AEDE3AAE9A0856DE00A4EB68B4B991D8
822847C070A6CB7D5CFD47425798B7A60D26292EF3CAC51DBB388102E674C972
E3A3DDE9FE84A0A1C31B8CFDA9568B3B836A9470229B657876DFF667E3F5B455
5EBD9C91783A48DAE65C046D67C5A6320DF9C0BFDA998C2192F01A3EAFAB4EAE
B1EB6FD412A2BD7F04CEEC32B78372E74A8C3085D4E366293A58A5C7DB29BA41
01E5B57F50D5D822C2704F4DEF76AD242C7810648DC132E26F08D3DB7A1CD5A3
E4CD9AF1F5052E144B535EC56A0A2F82A1057546222028AE3C51A22D69AD0533
77364DEA41B8019CE51DE790C43FC8DC613D03591A8F2D965133EBBB3879571D
CD924B00A2BD3EAB3F9B1E1CDA3283C0424B11F4468CC2374C0A0EF298DF43C8
37324B907FAD864021457F78D3192ED99299F9006DB36350F6405A643AFA5FA5
4A1BD68B374A2EBDBEE1369A4C0217E7B9DA23A5068906A9DF56BE4195B2F743
0063A092EAC79BCF3F74FB6FC2C99AD301B93AA7F687B33656524DCF4234D167
F6AD72D7FA6401D772001C19E1A63EBE7E645FCBC1124D1F8F7DC7462B37BDFF
67A182804CD8A3DEA2D62D8204DD98CD09E67E806F75567E77A8B604F45E0301
5795FA9DF7D53A659E622B8AB5E575E26F8057FE12366827BF92AB47EDFEFF1A
3EA9F8F86496BA59F7F6268BAEA7A9653F1F3E9CD284A2B17B2F16E43F51A3DF
99F05E3CAE992A53975B421AC8F5803B4D13130F9658D7889941F6671B195BFD
1E73456A3BF43DA38B8587807ED4A60011B4944C026FA03D7990ADF5DD59053B
834B2675FD1AE70C94832B17642A0108C268C635821705E89638C01E6C2BA226
E8FBC87D54438BADE76B72E76BCCD62BD4A5EE7D90CC8AEEE9850E75EBEBCAA0
AC3ED2B411C9AB9C1EF7C643D284AD3FFE524E7485CB2F15E96B39725C13676E
097E023EA9BE301F7D3CF8385E796A7C9CC1F4767FF1D3FC07EF85862F0F3193
9D505D2887872F4FE24177CF2FEC7E6CDF34968DEA7B4E5B6703365BF523B99C
D6E3DD6C027029FE6A2EBADE2D9A5DE57C398E2A60F51FF115005DE4BA360006
7C76724B62BB0C18F4FEBD2FC1FB8F2C8CBA10DD86015BEC64028215504892D7
A72E5AAD673C77357195FD05F448B0943E65689FAEF808522BEC56BB109DB688
BFB73CCE3A81C12D2733C2957C162DF5FB249A07431EAFE27409C518350E47E2
F1274E2F9EA886C043D0CFA6242B759CB68C6D394250D4B9BE14AB037971D60F
DA03CD54FF56C7DBDC163F1C9E8D4656880458ADF464DA89A9EFB5AAD525FE80
2756C6DF2A332722275A82F8AE601E8179675F31B5F58F876C6EED19A5987FA5
4B40D36E0E108320D5CC17F782C3E6178FD39A8E0A5707009ED36D5B9D590155
94C697B28DE279DD6A0CDCC8E81066D6B6DE7A21B2A7632E9669EA6892659AF4
78421C03761D9DAEC1ACE94F9FF7BB595AE9AC86580FD4DCD9148BF718109C01
D232F076AAD991E624AB1F9ADCAE9F03ED318919469092BA9B84EA2FB09862AE
9E9BBEB609393FD526BF5F4FDF90354E80E9B8C34C447F138F35B9E4C7C7853E
2E847EC769203627ABE7BBB6C04F1AFCD76EBEA99DDE3B8347A2D0E3B41E50AE
8465DB71A2FBA74E8BC43062256EDCC8F12D9C79B020122EA5A1526A45B9BDA1
80F1B0577D27D2D12E587DA7B7689D74E0965F73E0E9DA5B17F679FC6535DD2F
E1F9908BA090DD513AFF147DD5A48D67C0D2737CE83866B2D43811E2D7BAF6F8
DC627B76F2F0D5905A7B44CB8871CC777E96E930266427264911FE59A67FF99F
199B75B3FC139BB72D6003C552DE4BCFF831B9ECB20C9E9896C766433AD2B593
81AD5D4B51390098DA93060F99204F32D91B8E421BFBBBE7EEBD2D0C6D7D124D
16D8E04E5B27C1A70C3320926A16779AFDBA3ACEF5544D5E3FA927892557D96F
B91A4B968D8A59E0CFA52143A3166E8843D7527245991AF33A956CF3B34C329E
6926CCB7DA344C04D2B9E78BF2D78950A8FD482592F28F86F315E4AE752A259B
C950C8794E4187EDD858EF5C6E7F5368BFCA0543D25939203FBC4394B77B0DC4
73289CD30993691EB2E596A8259F217D019E9F254AA9884168107221A07ECEA5
6F82191756BB8CC8AE64FCB1B430C376EBD840E91D043F83925200E27093AA1B
41B4C10010D295904D2EE285341DDCDB6F5B1DD285E4DDCC87B42CADDD2F71DF
17D2ECB26B273704AF5EF8A694963AA7810C5A138A0EE43D4A3CD9EAA488381A
17E017251D73098233AD5F3B739FA80DBFC9BE06F15177732EA19D68D0704585
B969251F67BEBCD4324527B0415526F9131552664043BF0B5B58DF7B890DD8E1
3231F499127E8FD3BC80427F8B870243156AC4B03DA5A7EB2CFAC9DF6D0FDFE4
43E307F734EA6193EAE15514C34703368D0D1CE03232D02938093A65DB28BA97
3629D1FC9BD01E27DFC223B069456C66CE46D16116D1A7451AE2439EA954FFF7
0F01821EDDA0886A2C773A5DDBF3F0FF4027172B93D64CD1A218A5761B8807C9
9581AC34411066E68344A9F1578D13F42E4C713D963466FE67F4977F3144A7F4
EB285FDD3B481E31B5B5628254B5FA17FD6623185AE610C894A10E6F2B383716
02A4827C05DF2BA89749F66FC9118B7A2F407A2F6C34F3EFAC1FD949B7EEC260
6AB6E8060D56F2A0CDD874F5A9FDDCDFD10D51CB30CA7C03FE648A43DFA80CEF
0FD9B72C3BADFDE3016BF4B4E37B5F6032C8CB3794B3458745F825C2F37E887A
0298329FA84CA9F68288C1DA49182D1D22F40DC986174F26E361D50F7BCAE43C
48BE6AC141F83AA13B610AC01A75774A773B0F980BEC0BBFDC25D648D3BE317C
76109010DAB315EBB1D81423DBA784351E131F1C8E18705AF1C63E82587F631E
DDAC8D7B28463094101C4762D9EF6515A9A5DB10B79E408558E18F90912D5680
05B7B7331E630C9B509587BDC66396DC5DA3C9D641FCF55E65DDF9C248B04617
741FCF5E1774EAE8D015997E9D9BD07F1351C8741E5586C9C0242CEE175C03D7
D0BD1460A369B73EFD7489D506DA25F0B657C203BC8D0A2566558265D713BD41
D13387024C120A63E927EBCC47A0405CC7FBE5464EF4177DD62D6602D34EACF9
377BE8BD5D2381442450A2C4CB43DA2F3BD3868D6373B736D4CB5F586D459054
790D28EC9634E9A1548CAF330E2B86F6354EED1D3422E9C6092E95998EA8CDB3
CF4993FF1AE79AD4F9A371E8999432F0BBB1BE3C33C1FE44F00164BCFDBF74D4
F82D7D8BED7A557276FF2374E36CC4DD02D14D905F484AB8B0CA2414C2B1A267
4E9CA0AAAC6268440C2785DEFCC5C2100BBC66C7142FFF3F402DF8794B1D7394
0C1F1C6ECF2D3C2928E60FA592CBDEF437D37D9F6D39256B54FFFDB881F878EF
8FF5E5D7D065CF8DCEC72F30205FD96880ECE94E1D2883BE387100AB891AA9F6
08A6760206397D338B521DE231B13090255839707BD81891B99E415473B4BEB3
114F7C6C1C8CA4D3153D8206CD9FC5CFAEDB24D242E49D3236D884748C1DD5A1
EDB6AFA088E9C112255D51C29928EE9038D4F6A28D65F2566D001AC0D43370FD
434E51A376D761E6DF3CFF0AC6F8F8273DA66A62220D500914B57385D569FC34
6AF6AB2E0E9E392B7E9F7C4C3271ADFB96744B995EDE3ADE08B95255E29BB3F3
F0DC770C081E9771C3DDC3986FFE2CAD65D8BF301E03E845F3BCAEA44D1C9062
3D8E91025BC24BB53FA4BCD6B493B49FA8CF40E833CE416379732BD511422ABD
EBF59445591043563996C4F697C3C73C7799F6D4DBE5EA7326EA3A94469457A5
992B7C4A85ABFB67B389F60215982BC114D1424B7FE1CF8F5B2F49398D578E6A
C167002FBE2E1A9694FF355A9AD4BE2391E4B435014828C99218986CB2CC5413
E5EE6270EB3CAD85EF0C181D8B20B3FCCB5245749E13E6748F7DC30B2EC37720
B714926AC28EE58208E30382C4999A91123182F4E5333A06B22CB4B72D734919
9F886E27EE9B8CF61A1FE31ECF97CF5324B234B7AD11899B24774D8799B1BD68
EC433CB0CC3D65106B89EA16AE1A05CE2278FAE9624519F692A2CC1E405654ED
DC130DF0465F74940489ED33256B64C03E35617B20F73C55BD7B091D270D0D2D
0BA81DC66956E70153C6003352DEBC9DFD962E36849D29F1CC10C623D090FCCF
6D6AD66A144BACD58AD35AE01B71A87D810AC3FFEB0511E187F3B9949ADD65CA
6F816E5106D0A3D4D12C13A04E320626CE1B20E379D6840BF5A3696EB49429BE
74551019C4E122CA497F2C4D5759E2B167BB03952C823C08E57170B9B2B5B0E0
E5660DC9507357B0C0EBAE5761132321BBD153DA06B81E306AAB9072E4D7CE48
276DE9EB064FA545841C492585B57FA1AE8A5313E6D21F67FB6D16AC072947ED
BB894405800BD35BD2EB58AE5F4911C7F3D17CC180321635E8202B7688880BB6
17E63509AE32CFCE248A321630BC1F869395D9379BFBBD7840EFB8F43907261C
546FD5DF56D7D31FAAA18D1AF32C0D836EA68CC7C327ED4A475AE52C86910D16
FD2F332DB6B9DBA285DD89968A881B9F5C428CBF5E332EFA4F0EC6693D00DB52
40475702E6FA07614B28AF0A498A752C2CDEC3322F3CFF4CA8CC3A6259441D1A
53495CE8EFF04EB7E16F96CACCFBE56DFC9DAFD054A060CB8A131F138BE2AB5D
934247F2DEB90605D7B33F6ACB6DDC5C3F0E5EC0F6AC2DA72DB36F6549FC7650
A0A94CF3CDC202544F6DD95DC9256A1AFA2DFE5A75CDB6B3F043ACA111A43EA3
B7D414F7848B4FF92F4273B0D24E7B50EC4EE878DCDFC47FCB83408D70DF6CFE
EA7BAE3F80E5FE662EC1F5C5C77450C1432910D17628FE5E0B5AEA4719416C1C
F7DDB768507DA2CF9AB31CFF42FE6B4F05B2F1ACE7D70A2F140B565748C8AFB5
53772A0C726A64A81C6C3C737A290008A590DECA8E7E282CCB5F9B9EBA10A773
2C5F3F8E4DE53F032C0C1FEC8AE985136855350971175C9FFD1AC415793275FD
355EA0AEC5CAE85458B9DD32FD0FC10B2911BE7935065AD24EE4BD574ADF23DC
984FF5EF5CBA6283DE7357C00C3BE72D939F8EF3A1DD23A9E702EAFAC1709142
4B4B79299C1B7FC3CCE762B111CD2508155DCF8DD799C37EB49437F914C57699
C1E1A68667C4C42DDC9F719BDD00CC61B7402EF3A3946904477A22C0956BB085
7BFC16F30531FFC2D3463B8202016799EB0A2DDCE32768188A66810170AE084D
F23C351FCCD5A8463252DF90C3F0D619D2C512487C4B9698D9202D4E9909EC5E
FB1390D93A7B5D32F15D2409BBDE922D6A9F922A79288DC14864E09B23E2238A
B55B5BED696D73C9F08003DBB967CA5876B7794252D4B1881F9EB0937BC14630
A58A2C77007C74C6302EE7F1B1830CC75242CB2E3D0DF6D5865D649F954FCC87
ADF3FC71121B1CD77AF4515FEE837CEB8A87F901B1D004302E5D2B4F2D75BD27
B64126F927CBE829004FF95B51617E1F63F82E17458FABB583B21AF5DB245E3F
656961B408EBF05438BC6BE6D9155976254961A5DC93684229CF79DEA8B66E00
0AFE49C6E108C7822BE4025F9A1A4EC0051F70FA13C410FAFAC56DCBE060B98B
D052B9B267606E6D4957F08FEBEAF99D95D631E9A25A40A06E6574719FF18F10
0E04B19A75BE92577DF9A9CA98BE49C7769F37C681626A87E271F7CFCFB62238
DDE32090ECA0C4C8F5A060BAF86B39EFC0A0B27374763CD3FF4EAFA35BAF9F93
5651D07666D415EA0F8A7195870F17B34E09C280466F4465C337471F2DFF3EFD
6B3CA54BE8CE8BCF2CCFA3B394366A43938D178311564E8215839041CEC9D7DA
ED04AB6EF99A36DDD3F0998F89EC5C607DEBF69AFC502C996BBFEDD28B882322
7165589D3D46AA188522D259ADF303528479B0D37A4E26CD6CCAD0BD5DD67263
FE3B84A7F66000AEA0E6DCC1B27B3F741A4E6B43846E2930CFC34EF70C4F0866
FC88130338E890CD7D2CD30B6E247A5EA9E7664FE0D44153C5A340C84FEC5850
DD51099756B23C6F1B1674F986C6A4CC5F44CC8B80DEA278876C97225899D540
501160A5BD2357E126E973566ECD661D7E6CFBF0AE6C6DBFE5334AF90B9186BF
1462DD969802563AD9106421783275D8C75FFCA2279C5C4FEBFB8B285058F0A0
8276F6AE51362BB90A149DF5D44B5087CFC3379E3B2F7BB8E1E5FF8DF7B4ACC1
573A530FEAD020F172D6CFE0F901EE873F5E5E49AF9C33993DEEE5611AA45710
AD37D7151232F1B06A8A61D1049142DA40863B965337B8CE9D8C3C1CB7231B90
B4EBC862133314CB51204C5BC71DB6CF9987F391E9377874A00CEB3C4062D082
397EEE33370C42ABADEB88D8E328FC0CF8CF2D402149BF7F3E93E768E4E2D0FA
652F77C24956E30B6110BCA39FC675C5DFFD893585F22CFD765A69F32289DEA1
2A6774A81F503C5FC983347F7EF05FF289156228D9A00A63E6CD2E7FF4E50E5E
9477508A52478F197D96F3AEF7B3423A172986D7895FEE699F98EEAADDBB3C6B
565D26A60A4C22493CB4836E823A8EDCD3F3DF7C03EC51FBCE81F238B12B680C
71900542168362AD8305E8CA86A0C1C87CF745E42FF545C186E9BAA76CB7EC3F
F53B163D0804DFDF2FD1268D14CBAB5564C89DE944C25FE2EBD57B1E35CAA83A
E6AA32067DB113812EF0A29CD9E5A311B529C75D4C4A4D49D9707D8A5840D322
12F7CCDA403B3F933927046CF51D07AA201B917426FC775736E6BF701B0CF41B
2649995FFB9C83D458F0DC3F43AF2590EF19AEA0AA826D1C3FAFF112EC265237
2A8D6A598D948EFAA0F5AAD7E2276360ADA7EAB87C34A0A211DAAB7DD202746B
A1EAD224556E556A591EB52AB11DFE899A54D5698663446733118120B8B5EADD
6292E33F4950565A74DB72388463669EF26D6547FA4C7B42EE1C8F917D8FEBFB
0508A87160EA825608601B3D068B1F4CFE595E725B309EB68B698A0832AB827F
153234B697130F27404FF7C89D7D721A0E3E6E213C54D466E07BE5E5AE6E4EF2
523D0463AE2E74CCD87E7AD6CBE9050FAEC3402286491A0955D2C5D55D4171E9
E50E77F9FF4B35E682C87634F14404C0F61C45703F9A5FB3EDF222937915062D
3052DB0709E14D4201384F2049AC95089895084DEB17DA5AC444CE935917762C
3E78DF65418DB36D6A3AA28263154EFA125BC63F27A775F7F638371B463A5E05
D1433F228FEFF0FA22F2D6A482790977950EA3CDC389E387D62D31CD5FA685C5
48E6856339786915146491BA659CF38AD3A6962B2A47BBFFF2EA25D4679DCFC5
0A59E19D031699A16837563BE403F1C4CCB5E8497A87E51A09D4A3848274C03F
5AF5E709F4CE0D2D2E0BFF6CDEAD70C437B55086E8EBDE8A60F681DC07E75D02
D8CAB8D51ADCC7065D3DFC0C0AA397321FA06760D9FEE5540A69004651849511
ACFF673559655878C95556026AC9243E7A22CF3BBCE6E4D0B66E0D85908B71FC
C1E68EC73EAFD059468E3FB5DE65CD0853784125053582EF675877ED120A9ADF
268A766367B0CAEFFA27CA8C98542CF2DC296595E10415FDFDADE4CBA28AE044
ABA3116F88A38FDD0ECFC086776226EE6F99EB0A2DDCE32768188A66810170AF
3B09DCD29DE1D58D771E57D8350C286096ECDC965824B7FDEA8F45079AC8DF24
B4F226D7993E654E72028390CE59D54CE09364274C833F9C3F3A227AA31C4884
7925F298F1534F26F5F063F6BD5D9345AF4BE80772841CF2A6B42B83B702E170
438721E7616EC393B6BB627B76F2F0D59230966D6A6B4022079F97149F1C2E3B
26296EB97D929FBB603B9BBDC92DFACB649556D179BD791BFA4F63C47980173A
1859C7477A10265431C610CBF3ED2F86907A14A804018798D1BDF5E625DCCC0B
C477617E266DB429C67A784C9E820812FF747775D5CDEEEE9CC3EDE3D4BC2A18
0FF47AA2DC263934967EE346DEF8433E93FF75ED0635D587485344A74968FE34
78AA1C6CC490B27180A05C112A15F4335BF3A891FBAA225FD64BFB92118FFDC1
2269F22582FA23721D38E3F41FCC275CA8BB73BA8C3D531D43BE82C54E7496FC
2A7EBD517C7E93896335DCACBC3E932B3C0C65EED4B73DA07FBD5774AAFB2705
C339D792D24EAC8FD83165A970206C18597B234B897CDF0A5BABA91AF4CB1A21
CA53335C776E2E75BB1F82B42FC8A95F789A6962C96C412DD0BCB57024A856F8
07519A9FB2EA75B3678FA870C7A34102DC43A42F07ED95C7935B392722566FD5
D4D7FDDDF0125F06F748F324054A0E4AEDA7834BE592CCFF450C7F4CEC31566D
EA3221841035980ACAE6671BAC2A82941B8E1BD69CF349EE8D0B4DB5FDF9C2B3
6E67C5F3775CAEDAD8A0AF7BF70890C6612BF7608DD8EA2571CCD5493AE9350E
F157BD7A256037583594684600ED5DDD23E0F7F1E0C9D1AB2DCE3792579DC3ED
E3D4BC2A180FF47AA2DC26393498DDB28BB99A57DD4EA546F8EEB0DD871AEE19
226B949F1718F781D8908FEC9886F8E7FAA7DA9926147AF043C6C72A7668ADC5
8B821E757C430D07C67621BFCE390F10FE1AEA548D39F43EDB3C3F9448D07EDE
0C100D48DD8FF6AEC6A3CE18C6B3C79BAAEFD4227A3FAD7FA9FA045C41D5986E
B0A40B59B4F0385CB51FAA9735E707BBC255BC6291B3802D7621680EC064191C
D6CA8C29A27E148C4A84549AB96F5E58D48A7AD6A96D2EF9758C02EBCAC79FF7
55A3C7659ABBE8421741C23254E36869006EDDFF51F5992727619BD4AB59A5AA
0DEBEA1C5788A6AFBF691A3CD15AD97EDEE0807726DF59815F4194140EF96174
8F25A4D48442F85F9DFBC28A250CB3DEF3D928C7CDF7DB422443EB3A0A756CA8
0AFCB298F47F4039F7372A909F660C370697CF396537DC67FCE3024F40456F6D
523C36CE442ABAA8D35177DF3F665058B216470547BDA603EACA295C846272F1
FD50ADB650F7005A34CA900C7DF666D3E2E6FB6B098A6974BF3AEB51A8E78261
DD9D3FBF5CFA4B651FBE6D0BD114581921663D3D4AE10A7E5EB950D13A9A9B70
A14C98A43030CBF0605356DCCDFA9BEA0F687306A1005713E6523F88F16F22B0
303C3197223C9E5BF5BBAB247327BF9C8C32CB50200B017E8718B7CED20499E3
42BC499DD7AF69B2F8124AD8A4945D046E0F7F825A0759523FDFC07F794D8454
50177862F4C0003E6F232C4B521E1E7EB6BD2174EE8A8148A5E603B33D531D25
E2B0D92569F49B88B2873C2585935D6FE3C36F5646D347BE04848870653306F2
4F0AA747F7A0381A7551DC366F76FD058673375D3FF093BCB5DE7348B1CDE901
AE01501096018E95E6497BA3A8DDF6BE4B9677DFA38D3B9996A70E7893480FDA
1C560AA1C64693620C756F7A35435C2C2AE0B55E7DED15459D627A9E65A1323B
A915C10A0B6E34EF79D1C6DB84F0F04D7D461ECBAE04A480248F5F7C4DDA7103
8ADF3C605E13D40B23FE8A1C55D04F89901A8391E60EAB359CE2FC98C7572C4D
8DDAC3E33B3F38C47EEFDB66E8D709D4C0A81E7C7EDB6CF1E4DCCA7A40CE152B
D28585356BE260790E2F1E366DEAFB3E0004F27927A854234631EE3F77F103DF
AA1A5270B0739412659725A4A425F5EFCB49A22A13D6EE737A810763C909117D
E46343604A3CCB024E32D290F9BF10C2889E9CC2DECDC4B5D32AA948AE73886F
2BA9D814759145EBF6EFD4DF196C462A2DAEC4AFF90DB1919538214D63EC9EC6
DCA6389C239239224691640DCFC17AEB484927FB442E8199A95349E35A4EF76A
128CDDC5314C34ECC23791AC98EF2D52D9EEC7DB199C78E4B4B4363F54D5ED55
9EC5332658347AE4D312082BB86036B10FAF06FF03ED7C81A474D6637313B914
41010E6BF1D35EA24E0D4D62F3D99F8E1916F8F80D8197026B760EBB43679E6B
59ABA8AD56FF970FB50FAF48F8E50CAA06FC97BFD8D2802CD0C89692B28CAE2D
1FF4535D74673E53033CF7C0C72181F031BC132B3A32B8A120A7354FD68383B6
51C886EFE3D7E34D5E08A52E8081B4ED8E88E6F7F5EF5DF221AF49EE2FCDA6CB
8F5B416E8CE6591B32CA4A8F6A00841F980DDC9FF093A85FF354B99536DEEE77
755303E8785BC76F3360C355698E32DD2FAF4A8BF80684D3F5BB34389E8677FA
AF7424A5C17DEA160D817B6226568D05E9A6F8BF657236FA7479E8DA89E2BF95
3731AADDEA53BE3465E613AB18E1CF5D31DB1CA988AB7C3C8011BAA755B29ADB
992C57D7D9D3D9FF10CF6875195B574AB03A95CE528FE3EF1EB196BA3B116E3B
D08C10F4DC99E9CB73F11A18DA71DDA5C4F4D6E5435B0F0CFE9327E11F4488D1
3D4217AD82C65D7E1E33670DFBAE15CE91EA3D89D7BACF8C6F40335962156E0C
8A15AC52CDE0884F0F71F04359E3663D3B4CDBF3E8DC4D7CD5BAFCB201DD60B0
9666A5BE7A5E51E8581DAB0E47ADE19FE4D8B0FAEE5BD46A6A37279B089E9D27
D6122DF3FF342E5F05051768BC93792D8FCFB3AB735741DA37E299E3DD9EA361
53253E94441FD4CE17497C244140FD48AAE8A9A027FEA9DFD7E08913A3BC7AEC
388B2670558DCC656F54EF7A0057AA6B3624FC17FEE3236093EBC5B85EC1056A
1BE1B8FC45017265175595FDF06E84607072CB0755D48B29BC79417ACA5E857B
BFCBCC1C1C08A2714730E2DADE5CA80F909EAC42C3FDCFEBD1D9A5C34BE3FECF
BF56C20666C6887967948579B01EDD51BDE9E8523E1FF353DE53DD27B7020A7E
4CB947879BA7C38006097A804B97915EA840C5D661E36E08C2C6B31E2BD524F5
3DE82EB031F9CF91DE7BEFE15EA4C7B6CA97DEC6FE4167A883E7CB8875F64925
BC7CEC1E54A639DBE18E9618CB67A26D8FDA9C879CE81135532A4EAE4FEB314B
B448C6E2F3816983D1F2F63C510956DD3C8503B34C9F165E4550B85A54A0588B
B2761DDAD9737F5C7CB519B7580C6619CDEBF4044B72B7102DE1498876506BE0
0906906EE526F9AF10730889C891B0C8909995CA135BAAAABA5A99F87206A02D
56954BF928543168A40B1E0F996E99C81757E74E4D8E58EC3D281ACDB7645ECC
5F49530BFB05DAD0C1D2E898373E54214D757A9A39BDC2B1331E6B7141ED9E12
1A75031292A8C47F79B9C169406A7208517F9715C492AB0E90113BAFB9A302E4
D0F4C8454C7E9ABA7490DB769EB6267D9844CA028FB7C4B9751F5A70B028881F
C7A251C2FCF774F2F20C3B6FF1AABCB2B103BF99B06B8EED73FFCED41F897B60
342EE43534AB0F54C30476CF9BD5ECB41018F330D8F3BB3DD7608E6A477DCBA3
B526ED9AE95BA14850E6AFFBBC55F1EAD2471845DF803DFFED0947FE9F1C38BA
9FF873875A202010B3A7BA41DB5929C152862427E6DBD984CDFCD3A83D7C6B5C
E58381EF6581C6ACADE538F5A7DD8829ED3D2E8D1832882149C4DBF79E3CE3E3
2A56BF56D280F09997BDAEAD97F0FADDC671CA4C3A7C703D76BE931DF361EA5D
8268B206F850503538F9EB6840A8737EB43FE9404D5357992F6D8C8B987AC716
D798DFF53D9EA9740DB0311AF7EF2B1797C01E99C910C1E63155BAC021806E7A
B6B100ADD37C1E46A2349B62E2878E64C9268901373339B2FA67A8806930D7FB
643A8A7CDBF91A7461E212078A6FF2A3744F9884E908E341C1879FFDA8673353
F462088FA4546020FBD608AC12BF6325CF2A102FA3813F5DE4BA3600067C7672
4B62BB0C1CCCD8ECA9FD01DFE44D65B758F97102E7ACA87AFBECC2A8A0A96658
C852BECBA1FCE52D54F230C214058AA0FE804A11F6D76807544A65B50CEC6010
B7A5CCB04249A4840EFC4F833F9C3F3A227AA31C48847925F29EAFFC735663DF
739F52B21C5C8EB3024C3CFF4F4EA2A437AF62714DF033CDE5E9391AD466B51A
CB599DF98A2010A35A746A6529E8E7D648A8A8D9BF3907617F0D5A49AA4A7BEC
42801D73029F6E0A92E7C46F4B4C4022192238654422D7C882D577204BD75A52
503CBBC097A9100D2130F6CB457D18190AEEBE71BB62B1BA041D45C01B74BE22
56A995E3C2F0AB3B2B7D233E1B40C283C9E176D68B2B719B2DE05BA12959C30D
990187F1DEC4D092BA631C1B7850AD24919857811EFD041CEC5449AD7D0EFEB9
64413582E5DBCC686AD466BEBF2DFEBE6097481B19B12FE97D91C11AE3C262A2
05ACE75FB74E4849AB6CC49600EC3F76BC5A85B914D4210E4900DED65B2820B9
4DC7F8D649034F3B8FE7404997247E40257C1FE2BAB45AAB6EE59E53B4993217
15A18BF842FCB05823682C5FA531DB62789020B1CC4E646B54A7C3FE5B9AF8D6
A281B1F6B9E2B12EB8246015BF7DACCAFBC873E21EB8BE0D28B3B1B026F79285
453FD4015CEB70012A7E31E448A263EF78D32BB0374E832ABFBDA1F8A47A16D3
416A817FF9A8F6527DD6BA6240064244860A671DFA26555F767B7925724D3531
EE5AB667662D444818AB259FF8FA22F7524F253D543F7D7359DCEA81E37356F7
E617E193582589D89A115F3FB2DC771393F5DFDF1ED421993F727ACDC8C31614
F0704EC591986ACA7725672D654CA156EF239E6AF739D37023808453277ECACF
F140866C64AE58303D1D353DCBDBE24A081CFA8F4FA08C8023F97DADF735C6B7
B64622C2D317D17A9F1EA7D6553494EDAC851D66621D2BC0FE8B98BB53352DBA
807E1B3B3C96152FD62161A5DE8C179BDDE6524947D6514618BABA9587BEABAA
6A1FA145DFF5920CF5B2257CCB02FE12CF90B8843B29ADE8F841B74A609C7444
D1D2D813AB436AE2079B39BD11B5221CA310A7E72850F90867578905559A65C2
D8CBFE800280E232C2C7A705A06A6395E3FC9D42D8F663420423169911D0F7EE
D9491B6C85B232FCFBBD18095DD98770898A0530457A840D3F413E14651DB062
B15E6495D7F9D1C03EA3EDE5BF40210BF8543E08FAA61EB0CF6DD8F3E81B4765
27E22CD3BA1A310AD2571E160590FD4815F5D36F9C3128D06B998CE35F72BC11
EC563E22EBD0085A43DA16F54CF8BA929C597BB8193D203C134B8B706E15EBA8
12C50D0FE0C7DF2DEBF0BC70A92D3B64D1FDF723DD51B07A90A9ED738FD89A09
82FB3C27E56E86DF763BC96FA5D1B37B0F5993843992146CB727C39EBDE137F1
5AC4957F58F65490F2DD0DCBBB848296DF7A6DA8AE9C4E28C18CE53DAA88C633
69C222E8E3DA30AF3C1B94CF1732A7865772A3BF855220F975CCD0686BD5DD1F
0D91866052BFDF3E7C73B00B771F2EED066E68E5F4CE6EE5C47B6FB435D5BA36
4460866C6DC15E65ECC5BFEEBEE31A5C73718B35844910C4610A6D0235ED4DAA
8EC134DA7DE2E7E22712233F9E8753324FC12997165C6048B8E1CAFC0B0215E2
51D630BB66850360DE0E36875DE2C3E4B7FBED7E99EFC66DD8580236D0ACD743
68BDAD80B0258FA4C29F606CEB2D5D9A88C7B5C8BA4DCEA5F60D6081AE7FF0C0
064FF0FE0AEC868BA4CBD359B870D40067F132C3D318BF5D40722B6E265CA0EC
F561E43791F5FA37C1BE7AD027D53C3B70A9597CB66F5CCB0BE4663EE8CDC21E
BFBEF8FE70576EA427E7BA59FD15C374D8A0C3F580744404997B4E50456307B8
19D9EE4C3FE66EFFF94D9D7C195C8434D617495A3B930A27D5EC19B2568D335D
0C6AAB94B430C648A004C5CEC2A40D0E04A50CB7E91F46C942A066C00558A84A
BEB9644731B96274B37BE634011C1953CF0A5D2EE095EE0BE3FE3721F4456EBD
D60C98FD5D96D214F11C66B3D3442EBEA550D41586A94C068634AA156A620552
88058F637CD4F1D95F112CCFEC75B13E1EDCE2E9D84192525D19AC5A496B1070
F9FB747A6A7C5D52CB8732BD2869D5DC9EB9E491D69A5D39FBF00F1BD1CE8F9E
E20E2089FD84EBC9330062A9E9DB115A954A7E9E5ABB1154009E0C18A6CDD841
DE3FEDA12B9E0EAD4109CFC65AAF320768F117A5D00EA676B71740AA4AD81F5E
7D96B4476738B35E68478FA6D07EBB2F326ED06D3D412185E38553655DB2C39C
A75F0060CCA3A16CBA634D6317061EBD4C83EEFB784BB412CE0CD8E1AE3513A8
58BCB6ACF0A544A02ACCC27DDE4077DDA82F018B959CCB279F550AFEECAE2699
AEFC4CD1BAB40D9537B49495CA187EB106FC39A77BA46590317688E2047322EB
5208E9BD0202C8FB9A6CC3EF074F94A6A6374BE2C44E02384CF67A977457C0F9
C07BD7571DB98E4DA0CCE1C5033965EAACF69B04A6EAFCDD4B4EA03A54F31241
2CED9A2D4D7F15312F234D4D0652DB84C502BD0DFD605F6D5E1315823754065B
38C5BD1C028E3DAACEE404C35FD2BE1800ACA3100B6CE438839413F29F450717
73E50372BDD4275F150B5773647BFF70650C3D8F26629306BC85C180FB895544
396425230CC099948E18DBE4729B2C0C88320C56406D7B8A8426BCFCDAEBD1AF
B7A7ED9D2D0A9FF7692990A41A7C78A60A3676CE5F2926099311B0587A9AA976
86E8C27F8FF52EEECB542ABD1410D8C03AFB3029ADCFE2BEC0E3331F077EF712
45D6A1C17D3FDCDBAF0CBC03D1305BF4D44C3BD5DBC16B44D1BD508B4C162327
AADA299B49B5A65638BB7200C276BF0311527D1BA07A5A482C1EE66B6E33F6AD
036FE5EBD955E9CE2A2621975E811C8FB1108673D867B3930FC9BE78B0247285
E7434F3A373C0627EA3074AD5A6D24D1E143E54CD37ED906F5D54EA413DE4BD3
4F42E31CE8702B9F902524C4BC96A184A587D348B45976141532ED6E5B8E62CC
B91AB51E071BE6F0B820D54433588CADED91C3866C7A57A5AB697BF22ABCBA5E
76C692A1AA50C27A5D7F7C19575DC3003914643A9B3F6F52D4AC92C47F9B11FC
32E5B188A844C4D605BCAED33392910EA7C09E607A1E9EC5A5F4F2583F632191
2007BB7FE129E39B822CEF8C3FE11EF5BB81FB8871F86818ADB755F11DAAA8D7
8574C430939CEF9EFCE00E0D218B2ABF7405C9E6A7DE351875F1C4B6EF589F0B
EF87390010A4EE2ED540C9E9E955B51DE6F7CF415CC734D5947C9F85580E2F63
B9CAD6F0F132A122DAC6FA98B6C050EAEA2383627BF5736BCA3DE34E62141EBF
246015BF7DACCAFBC873E21EB8BE0EDEE694B8129D73742D17BEF718017CD2E5
9CF3A8362962484510138D4D5C2F627DF1ABA938385699BD29FC5A74A172F801
11BA19070F7BD455BE95F0F7CEB2BF8873C5EE3AF0CA72B0D54DE24EE880E3EB
09ACA94B86B104A6BA4126C06C7B1F3B6AEBEE1DE541297AE22DD1DF45CC5E67
170675CB21F6FFC5250C1CB84391426255411B5E93236A4A5DC71C35C4E40962
6DD6A89CE01362BE0A2709C3537A1E38519F5EF4AAD6612EB0795EF7186B8612
97455965E3F11A1DAC64A54C0B781D76E12A54BDD90FD11EAB33AB5315C2DC44
F86D3899BCE5274F718632BE1B12F052EC3919FB8234317CA62858038D8EB228
235D9002121E24060E5315F6168D2761DCAFC235CBF69C99E171AC8A5ED1162E
FA0D735DE3BD3059EDBB9B84A0351E4F64B1BC7B53E020336DCCCC81A7F60049
B2421576F759C4C44B3943067F25110B5DBB565147914773001D05C1AAA83E8F
EA614F35281B29EC64D72D8385E649DD20204160411096E853627F869FFE93B5
0F1A7BFA3F9BBCD3F9AF4896C3505C1C4DDC9F9AD22837631D398ADDD534B330
467DB68B7EDCB74EDC0F1E2275A1642C7AA6688C4F785963A9B3EF5DDDEC750F
2C235D47F459F299DBB7E4082D0FBD675732001BB7FED3BB8E0B9D64DBB27A88
36EACFF474677CBF68EEB67CE0DCF3DB602F93F2AD9F14E00604EA01B484C165
9DBAE08A742A4087DC26306133AC047E776901598C36BD8CA4056CF63C5DF015
4DE777E639EB5AB858571975046E20C4E4F3DC28017AF1DD8B9121561425B673
B94CF3467901FCC27B204D7A67C1F6DBA7A34C08677E2DD20026CC8EF06577BF
FDDAF3C14599FC92A53A12CA3C0B2224F70255CC3ADFF44DEF37EE4E20D29FD0
24FCBF1BB47C508006077E342C67EE05B6CD9A40F898F7B4C90996FF66FF0103
3AD78543D7706D4D916C83510874A8CD79BE4F68D5EBFBBE5586ADEDBB81D6BF
BAA129928131B58C98ABD8E89B57E7BE64C6013F196401824E7F80D2372EA1E6
F31D2BDCA47BE3CB7760502CDF80AA212AF497F925B425A66CCDF7FE0939F6B2
E048B65588A07A24A0D5600501B8469E83FEA64C1B8589E303AA0A1FB591493F
97A10BE930D8E18EE0E371A1062918CEC1CB5B6D696FB8E83CC012D36DEAE232
20E18BBA3A3AA263D531C454ED67CD2F19AB7F71F5B5C0950E381FB33BDFE3E4
B06CF0D14CB82A9640D1D4C0932C1538164D5FD5E6CFCA9FACF3B3D54BE24309
4316CFD27A60AFD9CB423E60E7881146FFE739E945C315D9531F96A84FE47FE2
F14417B9D277F015BC41C06C46ABC566827C7CE865F4B0922AABF0442C741439
AF027A12939F5CC5DE14373675FADF41F42F634F7032FFBDB9BF0257C6979CAA
57046D9F01974E6572A4A70F6F7C498A71F064686F9B62ED39ADC2F4EC1AEFCB
F7234B6C860B5CE99671587CDDA51474BED21A117045A5CD12DA0BB816795342
AE5F2DA263BE190E82D50E1F96B4588FC39AC2CB418F4FCB345E064EA831E45B
CD24D66AFB7BF2BFA2CF2301D84A4BBE14ACD05CB7E24BC5BB78AB95AB563B20
63AC7038FBC9294BD92A8E02158B779DE254EE98553A60766DC5C7307C7DA797
CDF179BF9875CD55A023F77657FE3D90D45F96A8AA00E003A034F1C1A5CB351E
37FE1A56340B76B6A8451164AB56C664A07834711BB582AE1767A483B6B60D7C
5B7CDD2025B1885FA0397A3296215EE7F6034DF31F37AF9569A66D312FF4EED1
CF2D0B6FC0A1C86BD8D1595D36E98ECBD8ECA1D98AB65817F613FFBD82580381
1D429BA4099B92BF1824B7C201022E329DC4EAC1EEFE53BB4E371A22B966EE8C
E8D438BC8C809A8433C4E4168FA607F600EBDFE73CBCFE3493437996E768FCB7
21CF19C3CB73346FF15C92F078B6FD347B8898A6E4C596E0F5AC5DF0CA1B8F0B
16463E1FAE0EDB827DD09EC18890894794A3CBC5E0B389E356A38789C308DD02
BF0D948EC963175D4527EFAA25FBA4824909DAD77D35BEFBE1BA150DD8FCF5B3
237A22DB44A8251B9640ABFCF624B485CF59E2A85E314560E30813BBC8EDB557
5E6791337C204B1A575D85484D6E8A4430DC6C0687717B25CFCB16AD505F174C
35CDD8A58E870C7AEFAB9F4B699E1F7CF242E9B298C9D625CF259736ECBF59D7
F30E148A97A0E54ED4318D96A906C1AA03A8362F9609C7995ABBD390D2085A70
81B8CCC96B76CB3F889D10357A08E71FABE5A120F78565C7AFCAD7166C80DB9F
839DE8ED007E17A35FF7B47AFFEED06D15CE5261117D95292A72971FDA6DEAF4
2482B638A17369DE16A5A787074BFFE5B300CB985D8B7A3BFAABD7CBC6170741
2FFCB731A40272135FF666ABD23A63B93E67048A8FE69E483AE730171F6664A3
8348BDC99D4701B310671D8226025BB2BDA9FB49B49CC2FA9F1F72D16A104E1D
F6ED334D363166740D3891621420CC5D1E23E194DA5274B6BE525FA7E55772EC
47320DE6A43A340FFCB3A77BE04A698118F47FDD19F9C46B4B3DB796BF2AA181
191EDC60697C93858D21EB375FA127147AAE074F8EE2F0D369B6BA6D3A8EFCB5
8489823AF8F043A881EDC299AD3B7704B198C48BA6F55F44C960C216D7532262
48BB64127C20F4464A7A09BC4C23A13E927386D2712C376B3EEE5ADF2B058D50
1509758D23C78D2651FBDC2E1BEBC6F11665A828073F899ED6770D4D224BC308
9BE75D69BD115BA4C7776359E57876E1AA5075AE99EE6FC9C8906AEFEBCB54E2
7D82AB8D2049694F20CA7D8A3AC8135DD9DBCF30B3453F9967C4F4E2842907F4
C104643E76588F25BA1432B40E854EEA9E35F34FCF6A0066027D4BD5BECD0D35
B3D1319C82CB37BBAE3FC6F2043E3C28E31ADC9111332603C2CD7AA872B64147
47A9472AC0C48208E373926E0A7AB659DAC325884BCF23AD39A4323D447DCAA2
13E964F1FF542201B4A2FA04CA566424B5D76E69AA8B760E77C446B1F104D28F
3E8F24C7F5167F3FA0EA6334733BB0FC378FC49CD411AB204CD242D5E20615EA
A144775024121322E40DDAE1DB8CC6EF2A2E2CC59B81DDD2B8CCB0BF09F6BB7C
E1C333E6509081642605F726A1D09FFCA25BABBA260DEE677A9219ECF9B0EAA6
9E4C47D9D2B7C5FB6662179B67CF039D2B1CF9BFD5A9F02D70952089A69A20C6
455937A06099727E5DECF24112D57A387A0E7A2CB3C171D4C7E67E1DDC1E7999
48B7F14225CAD48B5A52F53C404280F4F731D3320DE86E21CE6A3CD75E351447
5A9F35FEDB69F08C6F1EEEEFCB0234F1B655A103194B4E22DFD81E137E77DBB6
00327A8DBF97741AF7F85EBE65AEFCF51A84EAA1EC81147BF187BCFB4A6B7C60
98674C7CE982625066C83A4EED462AEDA1AE0479399D7BE3E4003A996984D8AB
127EFAA2D782E3B110A1BD9B028AB4AA54607D7CD0318417DFB535A150699634
A4465CEF96CD8A062133A2CB9E5C2C47297D80D04ED00EF8CFDD5A07F5112FBE
A51289C4F3CFC83CFD0288EB4753C457EEA3CFBE66BE75C51E26E4552B07D24D
6B890712F1A2E95032F1284B44EA704322AB017F6A752658B8D0657C3CE81F3F
3093C59BB8C72FA0338637D34328F26A7C4DE750D388125BD42F4D3F20261BD3
208E9A0BC77A1AD488FBF96B0B6DE074B6DB4882F81D86BE3C0FC166F657C466
C290163BBE1FC5D46E67B7E74D7750C746BBEBAAAD111788D9E14D7799994C88
A5C2E1A1614013C17E21A96C317775788D7C8FF30B45F481978F6A5185FC1D57
B1F0C8F84CDFAF3A0BCF9961D58D1BE7CE5A136E97FC00F2DB868A1AC5792134
3B325C0E248AB25C0F1E1FA583C64C7D6B569BF1DCA423EC80C4121BD2418690
647481F19DBE1A30C6AA13ECC750022E867079ADA3C19F5FEC9F249AEF006DAF
480CD3AD58736CF4304A29D3F1FE53572D275292CCB4C620DAD1B68942729464
05659DED590F89074891396E80460A90C9742D9C4438EAA012FEBFC4635BABA9
60C10ADD3F5E7027BCE187DD4211C33BAFFC995BE3400D08BDA4E22020E2879F
8814E6B7A6B4578341099657CA8E16EC92D5DD62FBE5B1B16A40812F448AD42A
20A06EAC1E0346E09121FAC987D472DC9BB29D930615CEA751929AF05E652EB6
8CB30E8C86D37257207EC441C19A8AA3F7D96414FBCED2985C009271FC8938FF
97C87FD5DA5482E2861068F1208E698BE8487C418AC006CF1D831802614CE8E6
C9C79280E12916B917D8093F809A02636E422841131AF7BD634A19CF0566AE1D
08E7C6A11F1594AB988707AEE16E26FD4DD76FA2635D0BB94870CE5329E50D36
8974180ADF45608D4700DDE12BE9B81E255A2137D67A16017B26389D45E50304
5893468E58C6C2D0B8CCA20764B0C737257D958CE09EDBC4D5F3B15A0EB9D505
C688FC9EA44CA717166843E8DDCFD20F70A204DF3E2A46E42FE300E63AA620B4
C359ACA0F9FEA9005AB62AB71C6E22F84478BE6E570C41D46A4A212977526826
FB17F3DF51F3A70B8249ABF24835123A1F02B0727D65210E195A3FF17A68D343
783D255DC2F9B742621766A0C4F4E509D7BA4BDF134638AE0AD2A5FC0C5E06B0
56F3C9B36E46B59EBBC699495CEEAAFFBEE4B0CC03C7F748A477B37F47B9C12D
618577E3708F854CAF5BE869953D5CE34526CEA54E771A71C3A0B5558AEB97D9
24FF69BE69C5F5A6F4F02A9CE11A30AB0BA6E0A9463B1C5591B644F2F2F5E8BA
EF37D892297319347C5C2C4F25CE41857FDB2467595FDCBBA34906B435BB3BC7
89D7F6CA76F14520073F945BD57068CDD2A1575D6F4F4C4AD065B5A9A6543D8D
50C48D02F0FB023F0F947030E6C843678AC414D7880635E1BE1675610A6DD5B0
096B1AE0F86E3BC9581B8CAE71367447ABE279A093B36D58E1E57A9B08C334DF
FCAA3A7F20E2595110EE05DCF8EECFBAFD498803D76C7D6934B2E6BB926EB360
E1F4B693026D4DFE742585887658E843032D6CD526F633278A5F98F3AB7EA54B
018B0F489D7EB88F4520A61CD0AC1A3A1A4D0C2E4B6088835C0E7D10570E7CC9
9F1A5924A573343FC2A45CD70D1876496AE425D9347A3749DB93D92D08EC6F79
7BD362F4570B451B9284B44CE3E530C3C47223E1855E7F876725767C89DFDB7E
5FA9E8BBBDD08FA9F351E08A6E75277EE9C90160B811E39647795CE2639E9FC2
3577C89831F167F4A5F41658624196CFDBC0A97E117D59C26AF676579256A5DD
7A7E5E45AE8A2888A4C318796FC7532B4F579D06326EFF6F3ECF4F57214684BE
E2E1EE2B9F483F7363A025AD37082E23B9C210160294E32E88FF84CF4524EC2A
D9208235CA35B727FD96F9B4F93050ACA5CF5312934E8A028D7A522A0F241022
08EBDC0A72CB8B92AFCD28D747C285A1362FD671A067E664469F37584BB81C9A
64607F19F7A3997B656E6B40317E9B3CE964D17EC695305D4F327A1784130529
5816EAF6ACE65A683F16D10566EAACDF277E8B2F6C3C05CEB281DFEECCA83DB1
5EFBD1C6FCBB3427EAEF8F96DD752EF959630257907F2FC40EE337559A0B4ECA
A309217B2F45CFC6B200102BA9AEFF1222FB82F68A05B1FCECA817089B9C3B8B
7051BAF24798A15A27DB8161FEFF59E15B189C02D8E9FA4999DC84A97E90FD2D
AD3D32141A5CB2372FDBDC65AFAFA2652B3EBF97AD5C6E2D412255311863492F
9CECB2CF9EB917B6D0ABCB460DA1705F63EF72B3D89A802E19068DE8A43AA24A
18C0EC5B1FD98E16859BB44B5EB22F14CD2816C808F8F44B0242C2BEC8B7AA7F
F9742B3445D0C81D8CEE29B8E1EFAE36440A44FB1B32976CDD2068DAD0EF0BC4
9E2C77191FF64B19A999E277E7BAE4B263EB5C2DB0D781DA835D3B8DCB448E59
5EEFE0E10C50F6948DB9635D72BC22848B712CB65F78427195021EBB50908255
E113CBF247EC2EE24F981061BFFA47B3CACD7FC0A434405E92E547FE00DB037E
03442F29E8A205CAFB1AE9B3E58E9915E8886FC16AEC8FD5C45F9068278781D3
A4F300A754997E05869116B31FA6884C4A764247530BB00ABE9E44D7573CC70C
CBC5200C452ECE2E4B46F4C1982215B873EDEE4E5FCF35472F86A85E351BE2CF
C7F08CA1B6CDCE8F8999FB68F3018DBBFB8E6A8302FDCAAC85B0C6CA51FF1DE6
0AC845192E538771A723131AB4CBD51EF2B6AB2AF7D5EE48A9A2A29C5ABBA10D
B716427CB3E81253D3D8259CC9EDC52EBA6B58A127E96E5B05015DB3A4CF74C2
0E88DA59B171E490E71FDB199E58CE939088BA450E244ECC922C0CF22EE9A87D
18605806EFB888A638EA2B2CE0223FA5606412B50B64AD92887B5EE18195FF1B
97039F9DD33B79061B27C42C7630480687F8B27BB83C23F34E4E31DC166AD158
73B5F11768969CC3968D75A23665F80A388862A054C8410F17194F13D53BBCF1
659631210D39E3944AB404C530B4E8EB307460AB9F20E50F434ABA384FE3D513
74A3D88C1BDFA4856D3FB70C4A17508BE9ADA089246624E93017E36E30EC143D
2BAF5321B4E58920893C7622A6FCCCEFBE584FEBA676BE927FB9F5F571AE452F
84747569F57942CB2C6AC58BA8B97B429418D7948241AF2C586B544A72D267DA
3E31EE8CB6CDC18293AA86E1A889EB9C6DF7FA42B5B2D0C954A7D18985514216
64D737C6815BB09A63144EC11798F4399F3B05539C7E2FE24143563717A67497
D02E793659C826C3D040B1B282473E910DA322237C610AFE3B06B2D2EEE2424A
F1E93DE250D3C796D9BF3BCC723CB8E1D02A91DA1A270F297A8E5CB71536AB9C
6F698DCA37826B22EC8D721F63DC28E23021162102A48484C1BB778BACAFC797
DFC52562080A69308CCBDFCD111C8E011C2F2E6962659410159615C5E01FFD51
4710624417B28B294CAF88F40CC3AD19F5BCB8DE11D0B93462664BA809FC1237
786091A0EA77AFB9A34A06EC38BF30A1152A830D824CDA0DD378BE4349CF465A
1900D31C234FE2190DD404C7A4B18D96A2548AB59C1F5E9D4732CAAFD049536C
8E25C0CB85DCD1A482902B1F31E7E50113587061DC0257F8546C3FF0AA26AFDC
E454AA03CF003D694BC4F649F4022A81B651676782F7595305A7D54C62C7676B
E0B4BE33881E7B3111F7D034A9784B257EA0FB84C5ED75AFA6AD13D017971D32
041094206E1C4811BB699CBC6B0DEBBF5E50973C18B36F93BB57D99D98FEA5A4
7BA84AABDE1C235652D8FAE3238BA3AB273BE58AA0DF646C47E4F0428B6516DC
A163779D7CE5F0C7AB09DA7B56F048AA6C783AA10FA96DC11465E6D4742DA538
AFCC07DF139F75F35DD0F524B1DC7F53A8E1A398BFCD767A3EFEA7D5E0FDAC3B
CD506A6B0E9C0B9FA52B5D1C963083CB90C6ACEDC36EF6E3023673789E9861C0
2A54B16BF870802CF1349F546CF2DDB20736D753D3A0AE5581FDF21FC6AEBC09
40B974378CD344AF541E0131DE2AF831BD2C39AF77E6E6C6296BCCB0EE262D7B
C830CD4470C549AACDD064C77F5381791C251F252FBE8751F0EC96E7B23E020E
D5B12D97454668842E56F5D4F2B97314363D5C1F939969B2F2905EB16902D696
6CB628E04AAD5482353B59651A2B4371C11E1F917834AE3BA4A1CDA516090732
85EB3722D89920BA64ED2853B459AB39C69B947025201A8007A1B2B13FE2FA35
464B8EEB4EF4001363EF16541599A8B7746CA28337C9D6BA4BF74AF363F3C219
E85797D0A2249D7D09419F1BDEA6AA91E4D323A756E1DD6DA5374EC0A826BA1D
E6FF21052356C5DD5BE8E328BE283FE8D8507A2EBAB9E3520E52B50996F5CEF5
CF04ECCB7DC8655A5F40E68EAF882FB2452FC6B1CEDC1387C54F8AE6A5370265
F3F8322E1C6EB454B2EACC2FB8EA08FF4D3E9C4C83097AD086C1FBCF9A1C7974
EFE7A310C53BE5BF3139C7A37A9B5F5E94DD7754B9D8B6BB41140412DD67C725
B33FE73233F1997C157409AC809F4117428310E0769E8D2FDED8BB8F8813C5AB
F11A85DA1EBD5E8410E13A5C0BB528E3FA916097FC44BB1BA4ED860614488F73
21AC59B5B33B41B127BD6CAFDDCC55C9E3A61BA0015DF0D8C9175CACE1001130
0D04A5180F9643B12E3F399066102051C13273BD08A578FA7F34EE72335A72DA
431B3DE267597C8762BDF38B55465F749C31938EC96E21325E209C0ECEDD8112
811D4957D08AA4E696E3E826A55C5C14CC5CECA9B61D6A4DC4E3D94345491F0A
EFB60D5064B20FC07F38E82925CCFBEC387CBF2A4F8FA6A7A5EECB7EBDFFCDA0
4ACC63A5824714CD4C8A85694FF452F0D14EA83CE53FE285AE0FAAD06A37D0D5
6FFC3D87D0A10962C1D4830A784891A13B93886BC3543200B2826CCDBBC4F8A5
909E367ADF5D1E85E0468DFC415BC5CDC710582F1BD631D1D0A09E0BAC69A8E2
0971849118695B29ADFA6970929AFF587EE3E4402779F8B0ECB815A317C5FEE3
487D12352406C9B1C46C2C674C2EFE70A5FE0C94E06FDFCA314D257D3B778704
3469AC637D85C23D8595493448A2B49D6213294FEAFB6F9A4E038E7679888574
3DF5854EC8A73327C01240CCA11675FE570E19610C0E3974A51C7AC977BC8BDD
DFAF6D97CC859D09A2684556D0ED553F4448C419E6E9A01D38746D77A47F8ED9
31EF4A5F9A38F4E994CE4E27CB4B12961CACD1685C0F5E3296A774699CE7AAAB
9AAA57199E31212F476E34203261239FE519B52FE0A2DBCCBEC189E6709B0F17
FE02BDC19171F106676735F42DB9436859208804259558428F629F9B84D60A9D
F26E80AC161C0BEFBEA6856145C2D9248BE2F32F7682A33F118499B7AFF0712A
8849872ABC5F9639281B2A2D3D6676322A2A986F11705E62A9012C61F60FF55A
40FA2E44CEF414A721870287D8E7A03B287E4EF453DB146F071B534F06A7A938
EB519DA63D1DBB60CBD079302090DEA7BB1798F38EB6F4FD242944E828E47B6A
3BD0BD1BA485EA82D2E2B66B69A979CC2D52FA73F051B2952181D3092DABA56C
D6D313AC969301E60E5DDF85068CEF84BED9AB597DFD6ACA8DCB189D08F3EF4C
B12C1ACDEAFBF332091EBF3AF9E10F9D4FF14DBEDA0B768F680570B1480E2A5F
D9F3BB2D9788ED14B6A7F1DCDD6220D6D8FD4D955A620FF8FAD1BF55B6CFDF67
CB68EA7077E49D0684AD4A5AF41DF87A41ED9979EC14F92B38C80CA972C0F7DF
4CD78B09719302E5FD0A33C00BE94C1B7C72FE8F980A04D30C763C29BC44F410
BDEE67E6EFC16CE2E5B6C2B3D8A8E9ED9EA1C87047AAB0525DF1D40DF65A4376
E5550B151FC02F25344432AABFBF43D83E5D9A6D64DE081498F64AB90B8BF9FF
D28D789F55EC98D65339AF1BFB770956BE1DC8C995F04738A50FF8E3D2A31CD2
6660CA4117F6AC36AC8CD4E9C2158261F112BF2DD541535ADA63B162A9EE5C39
90C0A825512C331EDA49288261A7C8FC351BA25E641DA4461065056286C1F30D
52AC9D0959418812D147FA10F5570C299A9BBA058DE58B344CA0FE47F5C172E4
CE3B426497AFEF0B846CE0903392DD2080BB37CA4946A2893B59F2F038516AE4
E71BD746BEB2C4FEB2522208B1342C8382CE36386BD3EEBAE3D74E6FF786054A
8EBDADABAFEBA2B65B7FD793B2A3FFF3864A15D479950CEECF8D947E45036DCF
3B639D83EB86723334F920BA709FB2DC56AAF0014990D4D9D50805CD39B1FFEB
AFE5C52423A0324BE9DE0A84C591BAEAD5E4689218EB59645DCF335110FEBA54
AF91AD2C5070D0F2DF8ABEB147C79186AA1A8129BBB7CE71FF4223846A043EA5
6853388A046757E4EF4B26ACBB205F9FD4B16EE3DEB1898253655E1D195FDCA7
CF272B6EA7C0CD8115CFA79576BFC25966166BABEFA423FF674BF801351E8D5A
D8550E671204431D485A2E9BB67B6C45B30798EBC4F3D257A5FD2FDAE39AB91E
973DE6B5C0D9BD107FA061A4DD1C97D556D112E989A234886DD6AB96985974A0
5BA471130E2DF0B6901338C7E5E110A9C9CA450786BF86210857AF4621810D84
09D8170C73D9EC3D2496A19DB0E5415C8E11AB6CA170C179797C8E0E6874F7F4
AEE9CE00CB50628B87D5C49EA2415EB45035699530A7F0C8DD0C2C4924C75C86
C8DBD7D038A6590D42091B42B69F77A301695E515356C84D3F97D4E7370FC2AF
F06204333914629D6889740098DA3C02B4698D5146B536AAD2FADD4D5ED99AD2
1F099003591646CD78D36938F6EDE53716EA460B7B3611CD28D26A79D3FB798E
585B22FDFD497C3BAB9374418210ACF3670DDEAA3B9AAAC1A7E293ED0DCE67A5
C15C6CF70B101A5259C7CEA5B16598DB87476B77BC72CB3B483D734B0D14A20B
CE52BFB7C1A3E76388290696A502D9704D997366A73A2408D217ED23356EB0EB
A3B78BBFCDFBCCD8110E9E816B32FD49C32EB15B79DE755B913416E0580778E5
4C5E558B9BF66832B5D5E3158B852837A14326FE464A730E36D66DC0CBC29372
34F53B1A5DCBF0E66576DD0287D7D97C4A4CB6ACF2CCD8CEBF880DF6D1D4B846
E3230B8C23F58CD44AF5EA0520EE7406602AB37B3F9F8656C2B9D405BDBF5B2D
77A7DD71C591845CE02BE5B28194738E67B90DFA5F9F952FD49D234182CF4D96
5EA06DBABFBD543DABB937FE40358353CFB66DA85A0BB399E8651455EB50FBCA
6AA9B2F4E4208BB932B33C702BA8D369892C61191A61C16C5CB7B9C9D97F4CFF
6EA5A51039B5B1E0DD5A40CB907A65A4743E406CC6A81170BA2CE072DF7C25E9
0D7C8C25469B4575806AC266BC1F9A886F41485435499C20929345E122D7DBF9
9265872CBFE7459E2F63571B15506161F3454C4F8C2CEF1848471363E71BCD2A
A74CB07B82103D9BC1D6BB68D5F39F0B73386F35A4BF31BDB505D0D558E95247
B204C662CAE1BB97DFDECFF000726A4AEFBE339B485151F30F4200833D98D9BA
AC562D9B781DEE895B86319ACAD8C1F4EE17EB663A38812307B23102160FC095
B2178A593A58C1B41E8ECDD40DEBB0BC5641A6A8D0534AFF1A538E5A758CDF3D
84EB4797C4E4F31BE0EDFCCBAB4BF7A8563669CFFE5FAC7BCA12A701C26A73B7
092AE4AE8E6B76DA83A49C98AB07D408ED404D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFSL1095
%!FontType1-1.0: SFSL1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecsl1095, tcsl1095, lasl1095, lbsl1095, lcsl1095, rxsl1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Slanted) def
/FamilyName (Computer Modern) def
/ItalicAngle -9.46 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFSL1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-150 -320 1474 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E724728647E86B0DDF0DF
27E470DE304BAF6B908EB3795E1E2C2EF1C03404F1DBE0D3E3C183379DE9E0FC
0BFB0D61769003C4A9E55431A4C3C5DBFB2752864A9A725F367EF3165F7E622C
C138303769E5DC370F262EE5CA8F59C0831C0849547E8357BC5300BDD59440C9
294CE784007D57CECA937A34BED5119A5E304D5261DE9153D2DDBCCE739E6198
9070CA375A2DEBA40443CE2AD54F4B3D184E9846EF9C2C567CC19A512C73A990
6E3D61BC03F048A3FCEEEC49D7E62D00A699D12E4459F98C8423D946E74E9041
3C8DDEA7C255512A023960324BDDA11B92459A83DC5A6A119375E450E0F3FBE8
6BA5385413972A464640F061E935AF7989DC229C4E9DF86D9162A1BF33567C0C
31045A0C5CAF0A394B694D99E97BE7B58C3C427F8F48C15094463323AD593CC9
CA898C6939F284563D4BFFE656737D635FD6BE414094FF3384A36F14024D9368
6E38EF747E4E8F662BC7E7099CB166191BCC2410A69BCAF57F21FB55FE221CE0
BB8019CF28A7B33F6011048B700E1220ABC2B49A835457838BA4E238565CDCD6
73C74C40FAF34BD971DBBCCB60B2BD7AEC5253B4610F9137BF480E3C9F1CCAE0
F24F8F13C840D3D815D51C6C1BC368DBF428B5454132BDCEAF909FFDD31DB259
4E6F6B41EED47EAB63DF8B2D6B37DD024B3483CC13A06C356AE9895EAC769BEB
EF5E4839973091137858C1D8596000C2F85892D574194F0EA9B44085C3BBDC87
5A1C250E382F837F4A493228B7DAE705275B56BA63D4C4E5389B32052EF346F8
9349BEA0C53D690900696B7E92555F3935183C17752F1DE829847D167466BFFA
CD64CB39A99A44D0C255646911E40F0AA1A0F2EBB1E1A34E6EACB07A901BB4A9
4CED1ECD64E0FD0679EE72B812BE81BAE0196AA209D1CFA5C8267F794ACB69E7
1DCF71A547123C8464BC5DE64E0717E7B076251A9019C9AA9EB921266A103431
05E947584617685896EB18120F759C3D5B8305C186A61279D544E2B62DDBEFBE
EFCC6D6706337662B94BEF7C919C6829379849A19401260A7434413533269ECD
C99B60755D87C2F5FEDED313DC59B60614C2D7E72FFD2E71F2020931EF7C6287
E8933A4FA58300298B12F3DDB5318F92C6F33E6D384C155A789EF1DDB768507D
A2CF9AB31CFF42FE6B4F03CD53252501C2796B15E89FD7D5E9EDC21FFE4679C8
D20B5EA6C04F961E03169F13B0C2720DEBB9432F01A550980BF7FFCD72AFA257
B92EF40580FFC7D49BE88BC83E76967445B1F5730DE62C03875E50B14B0B6BF1
FE86A001507C04521B40EA1CF49975BFEEA0B2276AA0630DCBC4306D1D96FA21
AD7B1C806F4ED2BCE9A2B379B89EED605D72D0BDCC2A72DE0E9B41A66C608F7C
ECE80469201E64134B6D91829737B529FDD96D6C22A99E04D6532BEFAD6A9354
2B26C28A9D9D736D429C304296090F66AF3738F588D612DEBF7FA7DD4220A61C
D00F1BB5284434C917AAFE03A6BBAA3941B1056B6A3EFA631A9DE24D6E9DD8B5
26EF02EC5DDC3040E38CC2FA9F6EFE382FE4FBBBE7EEBD2D0C6FD2C5B3A41F00
08BEE50D97D2C3D6D004AD27CD4DE92D89F549D7C9959A0017F9F909E698BB12
7E4D543A7B128893D0D808E5933013A67DA0E78383EA858AE2A1BBB996C90D0A
557D1A0F97D00BB653C274848D0B49375AC07EAAC1F39A8CDAC4722F9EFBD234
9A572B8D9C49904081F5EE889665BFD5CF095DC10B658B1D2ECD03DE2F234B17
4D8B17FF27457D09F34E3AEA8B78003042DA8581975D4C14CBD9CAD608045328
4D21E7A6E9F0D06720FE1AABFD0D697B6365AE4DAFC3A88E05E97214FD97E281
20D8A1373B617E061109AA0AD371AF1987D9AE31AAEDE320A0520A1F095275D4
E9C6C475E9975FE2FC20D0E397EDB7BD229082E178AA6A6FCF0A1A038732E38F
7E37270241205A1E1B08F580E612EB64C4DC165BD6C64C44F44C208B84C0C7F3
CF111A7DC0B91D4BB0C8BECD16F1512AD2F69615F48D4050677787ED921DAF71
2A0135F35B9B1CCD769147E7A4D00F27C2E1AD8CAA72945C94960840005C7528
27F9AE2CC60088FAF1ABCADDA38D4EA22B3F912EB2DC12DAC3E890DA1F075E84
FC2FE0B2A3698E3F7166E15A9FFE7EE7B8FE92CF64E7E6A79BDCFE3F44CDE174
513001FEB070116A145FB3B0272C619E6A3CC8A3F602E7D0B639E2FDAACE60D5
A6009CC1644BCDB9A47BA7F0BD089F9BED1D904E7C6DD6BE703868758CC19E81
DAB955BB114FDF5F688DE08C84FF443BC122E310304907427C229938838A5454
CFF7A7DDB93250698AA0AB99C610D5739BED2629572529A19B0C080808C73007
08BE33F3599991D07DCA2785F52A2D9587FDF9FB095BFE6125C41C1EF08F815D
A9FC81DB308E78F05DBE7F262AE102DC020C35ED1F2F85E0B962B2967A677BFE
E847A8F50AB34063E50A0A05DD71CF004087F913EE0CF4B5284CF8FE9A2E99DF
6BCE0BC5F8D563531062B5F19117BC34CD778B057EBD29C3DD113D2D8A626621
778463D1287DB8D742DFE83E847C1720B47420F1C8B4AAE9F22CD6C76650A7D1
AA9D026CCD1B21B70D7FCE2E4C2ACBD6A361AC8026558DC3FDDEDD4109073210
DB92D6168DE1D9C33139E956AF79A217A315FA7B7962AAD680278ECE63C3448B
F5C2A651BA10469159C8911F844021FAD8EB29845025DE74A792B3389C249A86
EA1764EAD2D65F03B4FC9106B4610C16C97EC9C93466FDEF6E41F8C4CF1DD88C
50A2F6FB0CF63CDD5FEDDF536A90DB58EE30B33ED56B35AF4D871CBA7F5D54BB
399F7AD87556AC4B2DF46A79E76BC9A21026B5AFA16C3C57DB545CF8C748DD42
9C3FC85114F9806D271AA72073495CA295BE6933B1441A8253334C9FB1BA385D
79739EC28346E30F68F66AF1EFCE9A8C95E447FD020938E02C10A3347D516A08
D004B567793B3917C4EC71FB0A9C2DB0C2F30AED4EC343F6FB448978F58EA8D5
269BADB658908BBB0DAE7BD18E01314194A8D526E8D61539CCD9463C68299180
2075C8AE72E7FB4BF0203DCD9CCFEF19336B13B81B363A7D8859EC2DC27A2920
3DCF46C4D38296630AB077AD96270F0C2048CA2112051398DFEDF0573D8D9104
5389AA77C19171B22E3D34293A98B1B422D93FC7B19A19D7E1D95D49E54FBB28
E2127A06C26FD439BDC79AF24B1E51A20F41119742F4E3281AFF60FF78E65D6F
FCC2C2D56AB22553001E833160B5047931CB24F3DF7F49D69B9ABC11CEE2ABE3
7156EC48C2532054CE4621251A287D12BFFB2131781F3234B3803A4FF311D78A
EEE8FECCFA6183F750C799A8E80923EB7201344B23A1D8B0D625F520920702B3
9B46C32C799AB4D33D2CD6D855305C3AAD370B0EEBA6F87BC92CC7A3F7829296
DCB0F684D19BA2E1760F73F58522EC6FD339BA67EB314266BA9F1FD4D5835F6B
B7657CF2A0A2951BC9E072C0C1AF20D681702745D81B88208E6816770C93BAFC
0CD2293012310A50802BF2042E8835311074EAE9ED878D047D3CAB2381245451
88DFD681702745D81B882339AFC82735A1CF4D1CE19E46C61A0AF4332C928A33
04A859D98C2AE3B0DF0C1360B2BFD99F2DADD5AD8283DC9CD1C81B93B844F4D6
35520B2269035CEDDCB3B5518E2C1C1B11096363748ADB403A2495B3D53C4E90
874B15D889F41783A3EA4EA466656FE8721A5C6BE598A448C9272EA02E66EB1E
A0DEA60602D6153A670D00266FB7345BA7A2F05453FAE1D2311E6EEBAAC514A4
2B46541BCCA8323B798C6D3B8930D7C3D779DE50D50FB3CAFBE398912A3F22F4
B3113BDB5E2BC36B8FF68B24CBF7D79A6F974915B838EE89F05DD820578DBEA7
E3BDA2BE4024C50C8B5879AFBA7DAB4DD0635346554D16CB650CCF7751A240A6
16073A9F1E34262FCCE584AA10ABD7E9C00638DC06904F0680A8048B59AD93EE
9AAA8BE98438C6183E093DB16D953B78679A23C0BD615BDCBF3B5BA481BE014B
62759399EAEF8B4BB1CBB26A53901310676CEEB2EC4F37D2FED84DC3206AF06D
F3306F4195D35DDF81018CFDE16F37C7B58B6AEE2B56D12D33F599194A044C55
E21E9D187AD9CA260CDAAEDD0DD902F450285D595ACC5B376A425B37F9D9CC85
30B6C1ED9E4F1C10281CCC98E0D1C4D5047D4BA97D901A1D503D7B9E6CACB70C
5FA5B96078BC1DEB158CFB707F08A181350D6EF2BA778817174AD09B9C92F21E
559AAD015A3ECBC6773D4A8E05293C88179956E369C418B77A92E0B718668A71
C7D6B094B14FBA78D14931B4D1566B478E0D9E6DDD321D51A2E412FA202D41DC
88A30D3828EB29E0B32B95A89478F8C8EABFF56F5A09C1257CF81E56651BF157
3997E08AEF740A455F3E1C163D57FE05E7CA830163AB27FD7C001FC6302F6880
23B4B5B33BE92A0310DD612A295B5B72491AE0E2CF7D447C1B6A40A3AE997242
3C51C16C0F6BDFAB854748172F646CE344F4D76996D0127E23FDEDBE356E1CA0
55F80607132B66A80659D1E8011A2C6F184EEC7C7E614CA588BCC95C23200FC3
221F142BEBBFDD58DA9D4689E5D207751DE0BCAF73ED468BF58A186BC6BCF43B
A455DEF3CCDE1AA8FCEEA48E815FB47A57EC73E5A4C4385A2F5AE58AFD4A3364
A47680E82D0E1772753E04311775DE97A802E45496D7C99530F426D5FF7F10BF
D4467BAF34835CAC34C5C0677AF2B3C473C5EA77E3B244C14AB5A245DD8787A7
83D08A069FDE9003CCB87CF1C4757B78821D52A03F669ABC8CCC9C7AC2BDE2F6
58E07099DA3B71E6EEBCAC80D17024F4F0FFEAAD16CF75E9C06B9D593022C17A
C8734181777CAB9BF9C20DE216B3319E23FBE110BE6274895A3FF937C6CB1882
1A811552CC7B72E43E34639C248A2A6CE65ABB4A94800D73007B4F6060FC2937
DD6AB422FCDB929D94565781BB77FF203C063E252CBF5A12D572721B5F946F7B
C232B84112C1A88BBFD5F134F4974AB098935575983B743D597766C94041DA68
A11043DBCE995E7867954D2CF55961C0512ED552B37D8063F5ACF719E5F6F66F
12DA59625C437D4C180DB0CFE5C8FB8FF538B1093E1F9990481264023390ACAC
DF7E603304077B139B5F11BC14057875DCA5493CD69B4380D32A7A87F0D17FD3
7779E82F47ECCAE0749E97B5CD13C38604746D826811F7C8B663A9376B871A57
E6EF028103BDB5DF9E7D3F4A4F87101381555294F65A8E3C686A3F8D65AE50E5
481EB898AD834EC65107E430DE2E62E8C1194AB206E3823CFF7708F7D78C26C1
D30E3B6AEB7EFAE67384667C5369467F0663C927DACBAB9737D011CCE9F0EACE
9F97B5911158713114F79D4DB71C472FDA891AC2744F8E4755484C073F981D15
ACAF54AFE9A9008A616251A86BFD4705006E4AF46A848771EBC0694A7AAFC805
06B00336285F6CABAB72E7BD0196059F98ADD1ED265E96E4352DE80CA020C752
34FD6C574117146FE57FB77CEB986AA1C9FA2BA8C45C94919231A51D25C9203E
539817CB0472CB805AA9A6B5BDD7B27C047D9CAE387378FC232393DB32E2A00D
B9F0CC0FD934823271837120F2A13D7BD5C6118E30484E2971044E7021EF83B1
D328C386E13F0EEC37407D44468B5E27C4A2496B5ED750549C0238926AF35775
327FC5C5AE70093518AD9000E3CE315A4E18071665A39BDE0EE7368EA1DAA264
9DEF78173384DE6ED387C051B641383D1E637D899BFDB630A8409629BDE3F089
B8367EC0271CE295B620B9E745F4A05BAD737B2A2EC8BB9A8959A0E13A259D3C
B47377A99EBA1F9EE3D8D12E98D4BC2114A4BE40B4F5243B4982C503D49FCD50
08E8448ADB78D43F071C647F99018C117DF0B2BD415687124F18EF6716B368D9
B0024B395111FF2286A875B95E950CE999820A15ABDBCD9CA636723A64D100DD
7C66CE6F1B457BA89C4DBFFD88AC513E0B07D6CEB2FC1048E824D87501B5369D
B1C94389DF02CAC58C1BEF50462E59BF1FCD59DAEAE142BD2D4E912B80B49357
6E0891DA51C599E10ACACD6F9A07B3684E46E7D7CB3F24C7CFAC0CC95021DF41
F5BABB2B6DB8070A4F3EBE2116D50CB7FFF1C167EC360688F5269CEAECEA0500
A1E37C1AFF542133868010EE23C94C0459012F203FD61DD9BE8F5906465A49E9
63B3FEEDA37DB82E63BA2E5D206C7F6299C49CAB1B3844FA3CE4F785404AC5D2
0F8912226D571A18CA48DC1A6586DEB6D302F8913C6BB60832AC06E4A3F1A61B
11727E311D760A1F9672BDAD415F4B34ABCAFCAC2FCC33FE8717D9483C3D90CD
CA8DD26EA6B25B067BF784BD3D8A0CE8DE1F408884FE98C1383EDD3B140DF8D2
76745C88DA2EC25B75C01085E9FC6CE00204AF7959BF2D966705D80FBF09FA2B
EFDDF91B4766FB91947CC743CD6637B6E3D52454F7C7425B6901476738B002FC
42139850ACD990092546AF937F0BE8B4197E509F4927641511C5A17854CC24DE
67F7B766485310EA9A9B88EA924090D1CBFC4ABAD1F5FFEA86E9AE215C79C1CC
6A1C88EBB6A5F4AF5E70B13F6F6CA317C1A7351FD00A02EE061CB4F460AD9C33
3DDF5AEA23709BB667545DAE84A4B76A65DD7F4C2FC1BD83C432BB7CFA94083E
1630C801CC25791BA4CED3A6A94C8FB201C9E18668AFFE056C5FF626C1A840B1
5A1B11BD38059A4C12D55EB7424FF583C132D24EB3F46C7B4D72201FCD020F8D
B32F5ACD29421BADEC43FBE482BF2AC5D42F6AB08C51234A87D8D42B543BF4D4
904A9DB221D6A26F83828603A745468784B7F3091ABFFE8E8BFB5A609F0CBDE5
6745219717B3D088F9082913773A08A6567F812747A6031D07B6460AA696EE86
80F72AD122D14B6D6CA60B1F2A679835679A9F84B87CE63A1021B0A1895306C8
D08B0940830186B286AAC2CC7932F017D6ED3ECBC400428A279ECCED5D3EFF2F
F4BD7C970E4315D069F56424D43916E799AD04298D971EF7EC0426EE926FB26C
E338CFE5F50CF2937BA69AB97673FD4284B8D14F4872A439CC804FD1A47B8D8F
A5EB10E25BA41EE9124C48BE11B77F7D00AD989DF67305D3A251D1A607A5B5BB
C5E1DB6A0DCB8D0CF788A0FA47E31A57FFA78AC78EEBC9FC68AAC0AFB8C0640F
4235A2606102198ED89B9258E67A7224A4407BF6792C4576D24A193B41947777
FFAC047CB1E103DD35DC762C859BDCAD57DBEA349465832765B86046AADD8EB7
05B6CE72AE5E6A2D7CC83709E7B1F043D9B2AAB1BBA3E92751BF4083B295E46F
4C3D9A8E9EE0D6FC35E245F700BE22433B7494A1286004A1E58D5834F928EAC2
44CAD6FA6C270FD424EE4004343402A24E6776FDCBB2742EA6632DDB8B2D8CA9
72455534CD898A2EE5DEC3654ACE617B6F2F761AE694105ACB71A11C776391B8
FA4438E92AEEF0BF2AC8AF46D0339DEEDBD48EFF2EA4BD68A5B8EACA7A287CBB
48C561EAD1AF652E42295E4B5DBFC7B980FAB6AC77AF90111311025418375FBB
09DB7F34F072E4B04E0B4799FF851301BDC31198D30DEFA88A0633B8108CB555
236A14368F9BEF10EC0C46F4BEFCA79E8620825E5DEB9673894CA9D7E303BB52
2D20F91AB973BBA8D26DDB03EFBAC85EEB91A62ABA6EF344788245856108F8E1
9DCE904CD39DE18B88453D0C4E9DF81B2CF16CC8D9E67963016A1C77555FF8EC
6F39C81C5A9B589423FE8E386C646710BCF518C1B92FAE3EC2CE003245CD099D
44CE016458B114423F70569776A23C0723DC47BC6EEACB2B99FC2CC90D816164
6AF1B4E859D84D50B004A7EE85F3A49416670915B9EEBD5FEF21CB1244B88C6D
380A1B63AA077E58DA1004B15AF6908F243B673EC29ABDFC6722B8990F570D08
26E5433C25A5FE8968FE5DB4282EB7D1B85B203D71DC802866F884E5F7AF4E5C
79529C029F278F612B880E6C0D430D1D80858F5CE1C414D709C1BE6A726E2C13
8AC9AC0982C104CC919D280441616F73EFF152EBD59359563E4E498DEB47B3DE
081EB2168B3D1B42607647F6EFF89C97B5A01B4C5A035E864189F8259826F363
FA856BDFE6C72D9CA6F9C7E02536219A4504B3946B09383D81DD3904D85C32AF
4018D631818E1A0AE690E4E750565C6A63D4E868BA31AE79D3432312F8E8EF94
71F7AA5A5FCE33CD2BEA504C976E945512A38F8096C24CA17E70D61E78B3D6C8
D6FFCB26ED9010DC52B17C1802B3B2D454B2A62BFC379A48A06E11E57D7B2C53
7FACD18F19CBA04421D8A4631EE275B83B62D4195BD05545B04A54FDF2CB3FF6
66A0EB387276C69F3E71E5A53F2745950461448F3DA9EB1A47F2AB39A3FC9E26
0FD436684182C9B8FD83A99CED30FC1D066C3EA0554333695BE2B2B18966478C
A1E13A16BF7C51340B9C57773FFB718C4CBF13F9DC35C339CC467E4D22C358B7
33712B9197536D5BA8611C7F47BCAE3BFFA9E2A00F8C0F3266FE3BC28C1DDE65
747AF8F5643D441C792E662C2CC8D20E7B2FEC571623729CE14FCBCE484B7F55
A146D8BD2A38F7C07680D1A9AD9007EB369B2A6B80A956735284020E97B3CEB3
02886322215C3D8860A508795CFFCBEAFDDD7DC740742D3E421F18FE4A3D877B
221B0727107B7CF39E05810E65F566A1C695F8D501537ABE3F15F5FBDF877D78
FA32A7CF62CD4DD8B065A9C367BE5F50CC074C98C189C334C577F78B283C5DF1
BE136CA0E13E10A4B31B29DCAA3984CCFE734DC86FF098DEEA0A248016B940D3
A8F1697B4F4B5763E628A466731CE41B2854E7251BE2E085671644E889CB71E3
7BAC2C13BB200812BDD001D2CFBA62ABF0533F151B569A0BE14E361B541891B7
8E0C530AFA5FFF62F8FE26A02632ECDFD0BF913D2697A4B5B87D1DEFC1BC0BD7
DF733F07DED0FF4F9086F239DDE63EAB225F2857D63D5CA74B5F3FF6CF40DB53
A552F5999A1B500D357354164DC008CDD674A19F38BB8CD76583C605038A8FA0
AEE394CE83436E9945383FD01B9530C7333F9B903268006A99F5B0B9C60C10A7
595A3FDEF5A78A41E4BF5384AE0E66F0970A4099F55529BB528DAB42210FA563
2C0FFEF90A864DFC8050FA52A43BD093520A87455633663995CE6137298747FB
DF9B6D3DDED36978583836894DF65292F0BBD05A4E26DF502BBB968B61EEE2DB
E4E428F10D6361548940602AE0AA7A295EA4EB39FF1D17405A3620270BF01EDE
1BFB64EB7CF6955084AA74B9E8459ABFA31EEA92EB52EF994980B921C47EF745
92B6FA0D4B1951C648D1F75FA0C7E46A46B2BF96C8EBE8FECCFA6183F750C799
A8E80923E993AAE8523E11CEF846426006329D340EEB3E41D99EF12FD3CD91EB
213A92541054C05B972D78A68657BF6ED1F4BFDB27007903DAA149088143F1AF
BC0E85D15EB6A459A08F09CA41D28ACDABBB8C2B2A3C9E36431D9EE9ED999020
B01CD2F176ACB3B40C2AD40F13350F70A046732B115C4E8026D233EC0AAB9022
A6C6E67F9E62416D85AEDB5A78DB866EB200F60801805A8C4D880971F692346E
A5DA9B6FBAD028F92D0A7C89305D2E396A57D348C8699CDBBAB318BB72913810
1F8384D7183883808F23EF4AC14C42BDAC9617AD31DA8D1CDBC4D20F3F418BA4
17939172074C40600FD67B79A8EE5E0528B365B81BCA25DC1D0D4C3FF37F2521
E7EDE4696CA09440902D0983B4EA885CD9DF121103BF80775281FD7A8B4132D5
C35C47D639FC201645CEC2174D0E6422111BB81D4C8B5B1DE06718EA3286BBB2
365138869D666EC10BF1C88AAEC1A55A459D3F57504048C0F210D1A6B83F242C
D7D3BBE4559246C9FA712D7711E6462FEF6165B0143AC59698E084E5A72B86A8
820EDCBAD52B8C391B9272AD31963B379EB1559F77B9DD072CD64C3B048E3EB4
66D7EEED6E00DD3B183CFA64757CCE0BB0CFE5C8FB8FF538B1093E1F99904AFF
928652490A31EFB184F781387785659BFED08DED24E434D98573336D5F16497C
F076AACD1E69F824581A91E2E30EC3FE52FD3545E8853A6A8343DDFFB840F5E2
0C8806D73D94DAED2909813121F0ACCB72A0FB54AFC17A2ED5AD1274BC51C67D
CFD8E886857484E09333F26EC047B16014275309AAF5A4C5E050CC75AEF32776
B3A29543F526B92CFA68A927D2D6F8B4ABDDBB6FED5048600778C4E66F7F9B8A
21A3D319F5A2C3548BC3C9CE8F5A887DB9C8A48595E399ED18C84F86A7D5DB98
6A59AA60664D2B3CFF2DA1552EED275B1B6443D5507F563A528E1E6DB60D88F8
D524DC50EA94E931CF4859A76D6205027A35B28C8C771F3B74C0ACC8DDEBC0CF
FE5D7849D734BC9844749FF7C02F4CC8CB0787E20624CF500757712F7A57D062
A620DACA7750D7EFD51E830EA429DAA585F70B5D1040054F2BF3F2A0AAD96571
2728417DEB91020450E7DB0A8E981347E21C316C918797C4B949101FF665A780
6D89E7739681A0E5273A9BF938E6AB16B2A52ADDF6EF861CA2B6BD49B44A0EC4
6AD2E8F794C151C257CF9BCA17A2D508D809FF461106D38A5F42EB62DBAC95A0
53B2A38C80CB0D5520F6080FC68ACF427F7B09C61AEE0B67BC491273035EE652
1D41AAC9B1A9ACC5F02B868921A1F27153C874D9E7D1F2FD32C072BA4D82DC3F
1062E543EF66B98F9F45C2ED71955F3F321192903A4F9FB2A08B48360A2F4C86
3DD60FAC84A5D33E27382663283EE9D309C72DE267794D6A060830BE729498C0
147C5B77224C103909C02130B506FB4732B136ADAF438E48FD16EF420C1D801A
E1CC3071BB8EA01F035C399EDED6AF7A70BF27B19A170DA0767B6C0A51F66AB1
54DAE7900C218542AB1F562B205191673BE8DC07AEC284DEC07925EC6F2C26BD
DAE0294BC44F4A5BBD6CB72301B0ADA3A44868B78687774923664DB8CDD1210C
3242B4017C11A635E09D7066AD4E54B8072927D0241DDAC2F69F99C2F361F092
77C8467852C6167A41D9137E9542C692F9E5A139A6FD5A64D6903A23EB4F7247
C1544BBA54D01D2B42B3980AE7CE89485C5F41E675B238AEFC6CE2A1D9E51A4B
61F5B691F04E526C85C657D1C6E550D9BA09C5CB3FE06390D32D8B1042DE5834
23A2EC4D219FD964D4FB01E6220B001AE1A142EC970409266674CA23110FB41F
88304290CEDA8D1CDBC4D20F3F418BA4179447036070F045637BF6F46DC6CD4F
EA8E18E3A6CDB35E8E468A1B62C8929FFC1FEA0F312854E772DE956ACE0CA995
B7BE5DE65590E7C217D43F798EE0DD3FC02D26B276628633378ACE7D3CD04517
0F95D6191F3287E32BEFA87A839D70015EFA7FFAA12B256EE39F1899A0F1A13A
E321001D5ABD368FB7792298859FDCFC04820E2C57F585DA96CA166C0047D28E
14AA058A34FFA56E5DAE5E432EDB4222EFC2A63E87293390E2ED53A79B75E175
C64DE59E00E9253C9B160D225ABDE2A5529369A03D501AC6601146907D83D768
0C6CEDACF572324DAB9A7B6FA299812BC828B6E0B9EB9C83FE340EBE8F03A38F
43D05FD1B1DF59CDAC54CAD5EFF289A9B7D169B36350F6405A643AFA5FA54A1B
D687FD91FAD6E45EAA03EFFA83E84F9E953A912BD611825E99124389F65E0DBF
66CDB26E66879D869EFEBEFC3DCA6A8D6933DDEDA10171D4281080BA9F50E917
85711E3B419296237C9DCFEE98A7EFDA898E95F774F78F0959D682E13C4176D5
E5A86ECF2693940C90625D1673093CFD71FF2DA588399B10AF8971DD6C9A8993
94FF19037D8A673AA447EB75BE531D3B1B7E41694B03D9959B4266FEC7816571
2D78192D10CF9C166F966894FBE80A900AA27783C45CED390EBAD6D893DACB09
DCED2FCDDF7AA5E402A021411BFAD49CD62F83C6E32F6A21DBA1C204D4BD2FCF
4A5A0B93CC99881FDF09A9379E3924A26B286DB76B9F56167D8C0F3516C416BA
03AF61F982FAE658E188BDB36EF4B50F77F5A4AD07FE07EEA9F97EFB002CBF81
8A2B50712DAD0A53BD9B9AA3BDBC5FEC96D9AE9E3422DA16A6D082123A6A273C
184E496719A54E6030D04576A763849DE2447210C874F6FF9A95D8526E02D446
3AD45667B53A1D027129777BB56802707822DE85145694F4D6DA385489B60ECA
96559EC2AB0A689FD7A9AD35E79BFB6574BA23C5BC8F67C41E14CDBC3A206057
99532BAE1FD33EE749DC5CA4C868C094BE88B71855F6282481DF824F81180C3D
F89F1AAEFA49BF6F1E3384CDAE27F49E9DD53956A4B47759B680D45ABC17D942
30C074F160D43BF068C10D6F9AFD5F149516508792883821BB22E6B2271613DF
7982E97287956C9FFAA6A1C76238C4D8192B7963829012EBA17B58B154AF8543
39C59370DA9C9AEC6A83C30A70A34323D56D124F73FF91CFE5273B704A1EAAAF
6E9D46910539801393C3FF55A96331BFE725DD4D7F5438D7B87EFE37BBCA049D
CD6F8E43E60A0BFE64BCB9257A6D6C19DB0DFE2937634DD0B9B612199CDDB4A8
7DBF06DFE56AC88BA4381C92831BFD61B676F4FF319CD64546E560F1515875DD
9162752C73293FE05B5383C49AD96E100EEB267EEB8D7DC98EBBF55011AD5710
635340105E022A41D7A0D523C06678F931663CAAA896AF9D4FFF8AA0AE3DF700
E40C28EFABD4BA03F60F0C7D018DE4AA3D9A44E2D7AF48FA2D631A940A62BEA2
F092A3E45C380E879F1EBA09F3D11260F11B602B9F48832400850E2EDCE10917
24B0A06962764A671D66EB451DEFC390EB33C21AB0C2F48F82F9C6336D351A69
B88CB3D6E329D73961D494FDEF9E3EFE930AC07EF5549AB1D587C464B81693FC
BC24C0033AEF18CAA77C3E1F216F33D02958474AA95A6AAA2347EDC8E83A1771
73F2A93F60D8B8768E8FA6442B793D291590A381B143BD48B95250D72E01FBD1
740F7B3ED9A79FE6FD1A5E16B3A6395EE76EDC73CFF744AF97D7CCF83084CFF0
D019F1F131BD76E748078A88E853BD9A751F6137DFEA833004F468947318FFFE
992B3B2B1C8753E86C5FC40BB41394D9297AE0F532F49A93873CE97AE2F4DFBB
748488CD1BE8D856656281EB2D210E0397A5835504BE0F327FEEE42B483BAC09
D6689ABF61B74965FE75BAC7FC7A6812DBE86F3DC693E6A3105A8A41BE553D01
2754A6D029ADC5EB01367274B59FC6F2A799EE15D2122400299E1D502C4FC51A
EFECB5313B7F713716A217722C4A06C2AD4CFBF4328BC54E15C66B9BEF2A7B1C
DF40AC183179C30EA709E549AF3C0128B036D82B1A9F8D9EAC5120BF7BEEE925
6AD518B3D49E24589D3D46AA18829E285AFDE19C788B5C2BF115C29D834B54B4
64E495144D01E56DC807734B35CE28FBE3996E7DCBA58B2BDF073723D92AA3B4
EB58F6EBC3B73DB3C95F1BA7E3806A1534708C378F40466D5AC1DF4BCFAD1DF9
6F82FFCC4145600B49D598C4D9F57045BCEC024AFFEC504702002CF97B0F8E59
055A7A457FEC6C9A25BBB0636B8E4CC1591ED81C16A8E8B4138360A410A6C781
7D55874870992DD4C818EB9DDD10B6D5846434F37294723C825B0D6141DBDB78
A0491432D70D1417541EA61390913108145F747754CA79D8F6EDECE0E8BD8B48
E55D304B11B5017B4E7CB7ACCDDA8AFE80469C00CFB4C2F573C66FA03DF92D4F
5E3F8344288E79B2FBAE3CB6DEFB663D035BF224B6EA61C8CDD9758100ADD9CB
BB97E584D5F85E8CBE85DB16F4691EDD31135B78B5383119AB3704F849C2316F
95BE42F08A3A67AA53C4CD0B51B2211AE0E9313F4B66F62A24E625AF3230DCB8
85A1095DF657706DB32077063F6ACB3FDA289F09A5729641561D7AD08B8AEAD9
AF75A2A43084CCE18B1EAD9B4110333102E3CEB940813583EC09EF5766F00C25
007D304188A9E3D175616A8220A8D83DA5B505B5F326EC465D50D094AA31D13F
89A74D8550213E1A5EBC2304E6EC354780B61D6065BB27BBFBE0D970F75D8883
F59C4C51FCF85D95A91E95797161ED0E0F66F65C923E567B225E703D9A28430E
C6591FC47CE0E7431D2565F9EBA3B9318546BDD02D36CD00AD9EB380107A1565
581A5FF98FEB82C16DDE509CC7308875A44733503D4DFB43726576FD8A8494BA
A30F8C0F3266FE3BC28C1DDE65747AFEA99F6570EDE5C0912F7EE4A96379C955
E57F3A02DF9B69F620A60CE0A04EB773F097D8DCDA6E168BA9221228C1780DFC
6ED28FB793C3D9C3ECA83702960FA88B0D6952F979219B247AD14CFD0DE38445
754256FC5F537264C0D006978CBDEBC7D6904FBE0D6CE8FBA82343EB98B9B231
4CE4935EDA3270A103648997E867582A142A89B65AA64D0A0F1FF41447CFEDDF
EB25F63DA842A6235E343A01A94B4F28882C72FDBFDEEF6F2D2FBD4E421297D3
6AB8A7D831DE499CEB3C9522F47D6FDD7BF7665D584E4DD35D907DAE068C755A
7D1DCA5D48C817186CF4E77390D80B0CEE8D52BAE71F9CD3CE185CB98D42D400
A94461DDCC6AD816CEC368CA4EF2AFE35798B908F5087CBF8B4D7693BE05736C
A382BEA56E3EF92C7435438D4144862CE925D163BEA22381ABB958B4E01FF750
7BE4D608D72543F7692E2DB480EE39BFE6AE6E00456948BC4C4261AD72D8A965
064887899C110A23D2970B441E2A35AE083CFA2A5F140D8342F8EC352745F5F8
2837228484D0F967E12DFDDC54827C9D5B7CB54E36E6A5E529D8053700BDDB4E
2DFE7EACDBCA8A7F3C8F0C1521CD2BA8360AA2050D539F5A13E3370708E6CDD6
2EB5BC836BA4FCDD1D0C71A23F67F3E689B2B26247DB5A3BBD16E8873A811954
AF92E3AC314AF8FDBEF52517DCE8A204A24A2FC36B05E83849821D077FD359E8
DE829B03176768ADD400CDE2BE2C5C14D8B964B980FA031CAADF93F881C2956C
4250F5F28207671D7E3FEEB31A46EADAA4827160B800375848784CE927596DB1
D7F391E34FE1FECC661C05B430BB65975F5B4A6E200C668AAE2E394A21B05070
FCC33D46F9C2FE922A8DFF9E29EFDB2B70E64676F88660178B7B0C497981F764
003D85CCCB15B587A1B4927F33964F03B0B331DBC88524130625B70FFEBE287D
F97EE708E78C118D43A76D582650EF8767142FD66C35F84A671893F033848E67
D08709AF1C5E5BFA1E256EE5DAC923CC821B922CB3D690D600A83B33A8B638F3
F610618A28CC4ACEA44C5BAE3E0F2C80B41E2AF91D2D707E6F5C409DD6B28E77
20FA95A0B84A894016987D62B6EF971D7647937DFF15BA94B1E87FE23F11E215
234565C2D3B94A7F638C8D3E34061F9385348C498E5A68F3BC6BF940B24672F7
3C7A8459BB5AB88635C3E1B89948BE9F32EFE05F0AB5524286430D222CF1EACF
0056E7F6E733AE98A7BB53EE4D694987D9A8FFE4A0A9EE68CC87B7529181FEEB
B743BEA31BF8F5D86DACDA93E7DB66C9BB07EEE8B9372FCE121D8FE4FF405287
7522B643BFBF372B75E65D6FFCC2C2D56AB22553001E8335B238E1B400F441B6
27C895947416A78AEAF6B4684E6CA7856EF78B2E03A0269B0BF62D3CBAAAB217
F5B4C4178DD66BC0CD9D58A7A9335A29C98D586F5211B7DC6B86BEBC65D2D965
B2C0F5895C8F92698037332C718B17313FE3EEF55C3C9D7850F97A4EBB3A274A
153B9984C76EDE45B5D6F5A5F33CA31733E09733A7D4A853D99C635B23570A7E
D33F437F385B924C89E14FB51BA5B22D7FB2451D4A31EA1AB1E37F1CC2B577F6
563A2B05043D0FF84D1F2F7CD544A329ACBE29B7887A6A364F9DD44A4F97A21B
7BCAE322CEDCD02AC1360F2D4238B539BC80E89821A5FE6C48BF44B3FE1CC88D
DF9E06747F17C14C8FC935AA1E2EC698EA640F752672D4C6B94014647062732B
AE788C6E93A08D0ADAC6A25A53AA6722A42F260E4494FA899FF43EE984ADAB27
80CA144ABDFEA50BD7829E7491779BEA526E7DB3648DA533B77F21B03D8D3409
2CB9FFEE9C4BCA7580DFDFCD16805ECF58E32BA43D04F4AFC36788C3083BB242
A624B13C666A8BBA72F9A2B918B36E0AA2F1AA183BF679A1A86E19133BB0FF3D
DD591BD50B8B3F946DCC5D5582975C8B40CDF1365D4D7B25D72F6C4FF50C0765
F8EF31A8DBEEEBED91E9BE7582BAD97673AC1977D3B19D4130B686A72F66991C
9A4C428C3D33CD9618E154DB6EA731DE1A297D6A284F65DF8552047F06EB2CF8
433AF289140D57A2345F7B505EC40D1CA6CB491D0E5F26C0D00B886F36177687
89AC1A7462AF121798F939B0A14466651ACFCFC452840709450CF8AB68232C46
79A07170CEB26E9EA3F22C22C993407462E8E6CC5950E784B6DAF6D519908D78
FE779653101CF9B1358862A20B63B6C4B4A2D1569E7C0A36A874B1B8EB78A3E7
51CCD96F8BFDB95EB9A04F58078B2CA03636DDA52B7CEE9C1C40CC1D2D08A45E
0B6ECFEADD4B4B1BA1C001ECD5817954C34EF2A6C32D5B96E22EF96AF7C6793C
BFD47446A02C80A2298169BD16E41C05EBE31DADA8EBB3021793F7D29D3E17E7
8268E68763FA71905B11E2716E8A4DFA11738948B7F460EB4646B0ACE7D783EF
B34369F064553A8B2EFCF013DE198123B3ACCC888095F816C7D3D19F7E5D4908
3AD2E94A92117D05CAC8EC8DF93598F9DE2DA134FF86E8A76D1B59A095DFCBF7
9F7E8F84DB1517736EBB1573CC330DF822EAF99F19A291D7097A2D1A35AA6923
A0908D2D27C4AF9D94C2A2A6FC1E4FE330F426D4633D5BFD57754E6C26CD91A9
FF01A569197A4DE3298DB8902FB15513ACB54D72A6F8601A08C9E2C3B904846B
05D93A1E711B777F0C5695077C01C3CEE888B93E8E99C1BA9C6BB24CBA9354D9
C61A16A10B5766320E0435F1DEB4E0897425F065DFBDEA1646FBC7BD1FD5DA7D
362130EDD83DE01A7155501DCB74F4013A7AD1473E6701C98E1CCFB1643E0B29
A42349A79AE46C72B949992F894AA2814E0CCCA8E37A073D8E7FE2E45158F6F3
19DECCAE46DFB7E689C9F3C869E8157A489EC38075524C7200CE4833A2C29087
A0BCEBDE8EB89919D35F9673B05C8829BE252B3AABF45F253DE4C3743756F431
0B5864861E53E77328A58A6038BB37EB7C6AE8C677CDF4313257EC930F421B92
892AD2BDA74FB24154AEB359F7D8E966414B6D2FA8C790995AF6D0CF8C02CA2D
CE30214595548F7D099B38819E0CD319DEF0CF7C396EE60D59B1518216B1211E
15A3E61398F4C19B369CB2D1ECE14A0D14EC21435625C0134D9CAF0BAA99D2D9
3027B82A097D10DA30AE89D11684B7F99DE79C000BD55B5488859197B3FEB005
3D822FADBD441A15DB36A7CE9E136AEEC4002E465D4FD683A72358A2901BA0A1
9A63AFAFCD3E86D94CDD97E18B3CC54EBB27A8E4278F6B8EF6F337FD412F7086
6CD6B8CC69985203FC5A94326DFC9D63E7BA131D39AA4AB220777F9BFDE97271
A557F13A2EBF5FED549471D0E6407E1CAE1E0A8BD139E961782E667F66EA8478
2D97245EC9623F99E876A9F6753B327DBE0582225FA9FC573181275D043DB033
6D00E4DA08CDBA631CFAE5B21929C0BC1410CD68F49474858E6EB6B031584CCA
5FC71128DFF105F86682C5FAE3241E39257BA17B41FC053263D6F44E31010918
C0981987123B15EF926EFE3DD47A02744C904646F112EB85E4D2D0F7FF63254D
C6D5B33AC9DBA0382413549CDE0004AF46D08FC096D86C31E0F4F985F314396D
8A8FAB19F8028D87DD1D1FDD78617485BC44E54DC6CEE45F7B89235814AED387
19C9370979AF54DBFB372605FF64E9EB83525BC0F7423A3E9C817AC92BFBB5E2
838B6B7E880F3DD94C5D8E494BCB5E1FB1486464CCCE7D06AA4B9029D9BC1BC5
5A9695C40EB7B502341ABA904DAF37D828EEB36FA74318606C77461FB54E6B83
48ECE22D25640B9637C9D355916EE9B2B084E097D8DF6925A9A5ED019C8AA594
CB8D47B3D359D1F6B6ED013E755E02C7B61130D662EF3F4964A4FE7890DB5E5D
56CE361DB5CE952E40EC702AFD1E51B1F25BFD2D171406E655A8D22B02566584
2A98E6F6F4C50927D6DB0E8D1EC40C4DAEDEEC7D0D0F1C9945E847F8A155F797
16F9E00529E3FF2BDA0EBE43168D49F08CDBF2A12E504C927899E83ED9D4FCCC
C6FE7E4E32315E6B641825ABB71F33A4AF8B6D99CD05528A94320E81D7A3C392
841D62867C69C889A09B22CE0A66411F6FE1C7EA30F534A026A77A1084212569
AB56046E0AA46EBDEF77D797D0940C4336C73F79346DCA47F4812FA2EE0907F4
A3AEB332534ECC7FBB5A9833FCEC1FDF0318867AA6EFC25C627FA0ABFF1EC724
2FA864D9A49EF50E9C391AAA4214BDE313BA15724E558FD6AED912614DD0EF5C
D2059CBF82DC3F5ED92FE4D1FA7221B10D2AF07E59F3503F7B62C563A28D8707
F2FF0755D79A6C7885DD864D3119CCFC4033401CD0A06BE0A96C3657F8517C92
CBCA670FFD93FB6118FD7CDC27E719243DFCCC09335C3F20C384C3AD669C22F0
7048505E6D2FF224DA4C429B69324C26B4A5E5B41ECE95272E13DFE90FC97224
26F488C90A6FA28CC511AFFD3FEBC372566142FA545490A645CDA076804AF3E2
336961E535781736C0D62F944930A0611B964446898FC3D366A59249C22BD051
6F95BCF0FE3DEEF4DB68633901B0ADD2C18CB26A8FCFB61CC2570DA9DC9F61B3
BE5A3CECA168E931ADD63206710B7E0B25787EC10E6DB731ABF7F18BBBEDE193
6DA1B1629041DE4E26F607841848B7D8BC390A94A53F164ACAB47E8B6743A991
53A6583F273AA0E6E018512229293F188B22215F0E3C02772990A86B62E5364D
C18A20132C7CFDF6D63AB702779583953B10EF021FE63E65C536447E7A695205
C0956C3BB7E74F87087F483E487DFF52B4E11B6D8A6BA7228B4F01AA24A2D592
7D27282F90452ACE90C47E03C2040223D1D9768E3242A24227466B7080025492
0ADE4ECF587476DA23518AC2530D8652505B69C335DEB26FE8E89382188156D3
D019270D9D91350F62D05453EADA838CF7493AA69C31CD659D14057A3A18D92A
6337625A4E141720419CF6894325CBAF63A80E48C9679372CD76E380B70BFD35
C056B524BF927D66DDB78A5F1497AC6F92D087899229ECB911DB0034B7F37B8A
1103F045AA56B08A3E77A99107AE70383437521B71B570C109E4D6A65E737D98
FD4718E83551E30841C147A213A1519AAEF09D0613C153A34B33A74B5B0FBB3D
DC16E8685E265848C4ADD740D74522DBA54EBCD2B8FE3D4DB5BE4A28834F6E63
618C99EA70952BC4B63840D5DB3DB8D94792EB605390E41D5BAADFFC964CC049
C75E4AD676A1CCE5BC85D9A74E667F6D988BB03D178A0B1BE012968477342F05
B34E78C9C56531E89B32C77D565162B97F766F551D1DC21674584A4D6AD9A257
E9BFBD40305406182BE1773079429DC6F99418685BEBBC997E3213CE3F6E227A
633CD6A4710FCC9C028328B53DC475F131F5C46AC1076315880954693F144ED7
234D86BE7841197B6B2135BCEF55FC14C22FA5D1C81C977B6EB25D20A45CB247
DCAE2799EBA01A4EB48DC582E714D4F156E61421FD9B38122D49F30253E42A7C
17EC9B2A0BF4CFEB439A97787F0B7E5AFF502E77C8A8544717A2BDD756A479F3
09697BE09BF8706D9C344AC717C5517945754C87E67C132ECD756DEF623C5605
2FD1611C2BC882B773ADB5C7B4D22DDC3D9BF5E1843662CCEE6F35017960C107
46EA2614607F1A0A62B15A52A30FA3528B52A492078D22BE56186DD2FAE043F1
77F24F4B786278BE009E215BA7613BC0F568176AFB0B3FB9E445AF543D68A5F0
2840C7E3E2D4C5FC9A0149D2D7562AEDB399B20DB76C80C4FE6D06A819E8000F
FAA89D76FBF5B16D4374498D316FD185497878F9ED54117475947BB09C136835
58F8D830010BA4A175DD161CF02986C1AF6A604071A4CAF96D5534A66A89F368
B348F4CB84A02D4FED23B8067B61694BFDFDE220FB3111EBBE6CE7A81218C844
68F535F716B89A8379F06F0B060727E5263D7E15A747F448439A465BD0EAADE4
95B59A690975916B00EA374564048C4FEE21BFF6A6D5CBFCF7CC6FCFF380766D
8E360715B7F4DC6226BE3933C2077BC95BFBBBA94EC74EF68A19F44466DA0A02
6CD8D3A6145BFA22F6688D009198EAE9DAD025AFBE2A3C56AA06D459C9DC98AA
904A0ABBEAADC9D59A1240C45D16AD1CCB28A0269A41C29D7F128AB26A882CE8
2D37181974EC3C31305CD9FDA3248FDB7AD74F213AB23113A324AD94B1573CF3
AAF2DBCFBCD35C548D0F326402A311078DD27B053143AC18691582B4336E566D
61BD5A1FD7CF5DB00ABC672275BA14734FB3A5BC1EE0C0958BE057979F0B3973
853190DFA6C402E31AA42BC1F73A9C27B4268295B3BF1CECC2745119E9FF136C
7864BF8CB02F21D7D880FE57612EDA09146EAEF465A62921EC7D9A1F162F85EF
9659320F8D816AE4E8746D7369EF4884F6220F154D17B7B7479F7449F482C8F9
C1FF37840C852216D396D08F723435BA336EF8ACD8E28AD629DD4003C1050C03
6A44E1A13B2243EBD68972B2A3D922710246D3FF12F9F0B5CAFD22BC6C3F8A3D
F81CC4D58A4F5AA634EB70524C7D9C7A86D2F0F7D176D018388E664C67F657A9
BFDBE1A378C5CB06FA88D773B8B788553C2743451072F539F0210304BBC38207
E633673A8A1592DE66E07178D1AEC51958A0BA23DAD0827E94F033C748D9C171
A20CE2324A4703C0ED880E5D4A83125D832747B43B4A108BB375D1C59D87480A
330E7F32D752AB35B5E48370100ABA5CC981E9175DC099084C722FAC1A7C56EB
2397780C674976B86A7FC211D2DBD27C99C168658B6F7FA259A90C4407435433
2ED132904D1217CB3FD26BA3326C58ACF83F8ED1BDB031A643FFCC223D807EFE
E95588E04EBA60E99838AC096CB727E940CA1C00E0E61EB4B303C51CA89B5349
2D8D32A4162BE9CA12B2428C78FD992DDD3698BE880839480F8C4F643EB110FA
757C14596D0BDFE69A05A7E41E888AD9A4E4D717B6414D9D0814CB964A65669B
C37A8B12398D65831A5E80C331B716BD79E6E2A40CB37646C3504EBC5089B10B
501ED28F34D5C77B013689BD7CC862E8DFA493C5A26FD15CE590DC55627C75FF
5A939C08D19CBBF218F190EB650AEC399AD4580A8F92EE91D8CD0158EC170100
30F1F9FC08417D1E227E500327AD9FC7D808D434FB9BD57F94D39E18636E01F6
DEEF14BF204D9A66CF96EDBBC5A5DA8C7D6B734CA1E5864F4E677983521311C9
FD9A53C43A2E1A112EF0BBA80EF828CB64F90E6E4ED090663C24F857598DD76B
FCFE3EB6001CDF982C28C8815278901010CAD1CA4DAFDD29F63FAF481009BBAE
BC570CA5310829BFA554A1BFF7F7125B6940F3F89599D349A19838EC95013048
10E7B9D4209EAC7B5651DF4301287CC92723B2A5F9285875CDAC7A87B57B828B
D7CA5792CF194CE2532FBED2A682AD75E827C8BA1874A89CFE87269E636371A3
0D9822ACCC16BE8296748CB8D64713A9C01DA4723B706D5EB5275D43CFA03BEF
4884520EF959B6C53C21E9C0C82F56DFB4E4D507889292851CADF22316F2BD2E
59DDC56AC9D9F7F6175F3D6FC06DAB41C98C594170BBAE4A4781CB56C8611E30
245754AEE4FECA790319501860477E0CE12CB2065B8B5BFAE29BA96447198373
DB42331DC4EFF11C964EA054D45CB626D1A339E03FC72028022F1174F933B020
3E545917DEF51EFD1255B0CC1C66B7571F82BEE80E63DF5496E0DFCA9C459D0A
C7A10EC3E8A2E93D36F8E24F496591332DB7897983813A7A6F6612
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(/Users/Matze/OwnCloud/Nachhilfe/Mathe_Arbeitsblaetter/Anwendungsaufgaben/Aufgabenblatt 4/.texpadtmp)
@start /Fa 153[34 102[{}1 66.4176 /CMMI8 rf /Fb 205[35
50[{}1 66.4176 /CMR8 rf /Fc 255[71{}1 90.9091 /CMSY10
rf /Fd 194[71 2[25 5[45 1[45 45 45 4[71 1[35 35 40[{}9
90.9091 /CMR10 rf /Fe 135[52 17[45 30[71 58 67 1[65 69
68 5[25 59[{}9 90.9091 /CMMI10 rf /Ff 9[45 17[45 106[48
1[65 48 50 35 36 35 2[45 50 75 25 48 1[25 50 45 28 40
50 40 50 45 6[55 2[93 2[65 50 2[61 3[56 70 3[71 59 1[69
1[64 16[45 2[25 30 25 2[35 12[50 28[{ T1Encoding ReEncodeFont }40
90.9091 /SFRM1095 rf /Fg 138[50 35 36 35 1[50 1[50 75
25 2[25 50 2[40 2[50 45 13[50 5[83 56 10[68 10[45 3[45
45 45 1[25 46[{ T1Encoding ReEncodeFont }22 90.9091 /SFSL1095
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -136 -442
a
SDict begin H.S end
 -136 -442 a -136 -442 a
SDict begin H.R end
 -136 -442 a -136 -442 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136
-442 a 0 TeXcolorgray 0 TeXcolorgray -128 -327 a Fg(Matthias)31
b(Linh)m(ub)s(er)884 b(Arb)s(eitsblatt)31 b(Mathe)852
b(10.)30 b(Septem)m(b)s(er)i(2016)p 0 TeXcolorgray -128
-290 2008 4 v 1880 -290 V Black 0 TeXcolorgray -128 -128
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -128 a -128 -128 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -128 a -128 -128 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128
-128 a -128 -128 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Vermischte \334bung 9. Klasse)
/OUT pdfmark end
 -128 -128 a -128 -128 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (L\366sung) /OUT
pdfmark end
 -128 -128
a -128 -128 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -128 a -128 -128 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -128 a -128
-128 a
SDict begin H.S end
 -128 -128 a -128 -128 a
SDict begin 13.6 H.A end
 -128 -128 a -128 -128
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -128 a -128 -128 a
SDict begin H.S end
 -128 -128 a -128 -128 a
SDict begin 13.6 H.A end
 -128
-128 a -128 -128 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 -128 a 0 TeXcolorgray -16 -36
a Ff(1.)p 0 TeXcolorgray 46 w(Gegeb)s(en)e(seien)h(die)g(Punkte)g
Fe(A)p Fd(\(0)p Fe(;)15 b Fd(0\))p Ff(,)32 b Fe(B)5 b
Fd(\()p Fc(\000)p Fd(2)p Fe(;)15 b Fc(\000)p Fd(4\))31
b Ff(und)g Fe(C)7 b Fd(\()p Fe(x;)15 b(f)10 b Fd(\()p
Fe(x)p Fd(\)\))p Ff(.)100 77 y(W)-8 b(eiterhin)32 b(ist)e(die)g(F)-8
b(unktion)32 b Fe(f)10 b Fd(\()p Fe(x)p Fd(\))25 b(:=)g
Fe(x)1549 44 y Fb(2)1609 77 y Fd(+)20 b Fe(x)g Fd(+)g(2)30
b Ff(gegeb)s(en.)-128 99 y
SDict begin H.S end
 -128 99 a -128 99 a
SDict begin 13.6 H.A end
 -128 99
a -128 99 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 99 a 0 TeXcolorgray 174 227 a Ff(a\))p
0 TeXcolorgray 46 w(Geb)s(en)g(Sie)h(die)f(De\034nitions-)i(und)f(W)-8
b(ertemenge)32 b(v)m(on)f Fe(f)39 b Ff(an.)-128 250 y
SDict begin H.S end

-128 250 a -128 250 a
SDict begin 13.6 H.A end
 -128 250 a -128 250 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128 250
a 0 TeXcolorgray 169 377 a Ff(b\))p 0 TeXcolorgray 46
w(Zeic)m(hnen)32 b(Sie)f Fe(G)896 392 y Fa(f)972 377
y Ff(in)f(ein)h(k)-5 b(artesisc)m(hes)30 b(K)m(o)s(ordinatensystem.)
-128 405 y
SDict begin H.S end
 -128 405 a -128 405 a
SDict begin 13.6 H.A end
 -128 405 a -128 405
a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -128 405 a 0 TeXcolorgray 179 527 a Ff(c\))p 0 TeXcolorgray
46 w(Berec)m(hnen)i(Sie)f(die)f(l\344ngen)p 1315 454
142 4 v 31 w Fe(AB)35 b Ff(und)p 1668 454 140 4 v 31
w Fe(AC)7 b Ff(.)-128 550 y
SDict begin H.S end
 -128 550 a -128 550 a
SDict begin 13.6 H.A end
 -128
550 a -128 550 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -128 550 a 0 TeXcolorgray 169 678 a
Ff(d\))p 0 TeXcolorgray 46 w(Besc)m(hreib)s(en)31 b(Sie)g(in)f(Prosa,)h
(wie)g(sic)m(h)g(der)f(Punkt)h Fe(C)37 b Ff(b)s(ew)m(egt.)-128
700 y
SDict begin H.S end
 -128 700 a -128 700 a
SDict begin 13.6 H.A end
 -128 700 a -128 700 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128
700 a 0 TeXcolorgray 179 828 a Ff(e\))p 0 TeXcolorgray
46 w(Berec)m(hnen)32 b(Sie)f(die)f(Fl\344c)m(he)i(des)e(Dreiec)m(ks)h
Fe(AB)5 b(C)i Ff(.)-128 851 y
SDict begin H.S end
 -128 851 a -128 851 a
SDict begin 13.6 H.A end
 -128
851 a -128 851 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -128 851 a 0 TeXcolorgray 185 978 a
Ff(f)g(\))p 0 TeXcolorgray 45 w(Der)32 b(Fl\344c)m(heninhalt)i(des)e
(Dreiec)m(ks)g Fe(AB)5 b(C)38 b Ff(b)s(etr\344gt)32 b(n)m(un)h
Fd(10)p Fe(F)13 b(E)5 b Ff(.)33 b(Geb)s(en)f(sie)f(m\366glic)m(he)j(K)m
(o)s(ordinaten)300 1091 y(v)m(on)c Fe(C)37 b Ff(an.)-128
1091 y
SDict begin H.S end
 -128 1091 a -128 1091 a
SDict begin 13.6 H.A end
 -128 1091 a -128 1091
a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -128 1091 a 0 TeXcolorgray 174 1241 a Ff(g\))p 0 TeXcolorgray
46 w(Legen)31 b(Sie)g(an)f Fe(G)904 1256 y Fa(f)980 1241
y Ff(die)h(T)-8 b(angen)m(ten)33 b(durc)m(h)f Fe(A)e
Ff(an.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
